
Buck_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000189c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001a24  08001a24  00002a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a54  08001a54  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001a54  08001a54  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001a54  08001a54  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a54  08001a54  00002a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001a58  08001a58  00002a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001a5c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000300c  2**0
                  CONTENTS
 10 .bss          00000020  2000000c  2000000c  0000300c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  0000300c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000030f0  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000c7a  00000000  00000000  0000612c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000370  00000000  00000000  00006da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000273  00000000  00000000  00007118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018cd9  00000000  00000000  0000738b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004925  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000920c6  00000000  00000000  00024989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b6a4f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000be0  00000000  00000000  000b6a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  000b7674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001a0c 	.word	0x08001a0c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001a0c 	.word	0x08001a0c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f8d6 	bl	800037c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f802 	bl	80001d8 <SystemClock_Config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001d4:	bf00      	nop
 80001d6:	e7fd      	b.n	80001d4 <main+0xc>

080001d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b090      	sub	sp, #64	@ 0x40
 80001dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001de:	f107 0318 	add.w	r3, r7, #24
 80001e2:	2228      	movs	r2, #40	@ 0x28
 80001e4:	2100      	movs	r1, #0
 80001e6:	4618      	mov	r0, r3
 80001e8:	f001 fbe4 	bl	80019b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ec:	1d3b      	adds	r3, r7, #4
 80001ee:	2200      	movs	r2, #0
 80001f0:	601a      	str	r2, [r3, #0]
 80001f2:	605a      	str	r2, [r3, #4]
 80001f4:	609a      	str	r2, [r3, #8]
 80001f6:	60da      	str	r2, [r3, #12]
 80001f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001fa:	2302      	movs	r3, #2
 80001fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001fe:	2301      	movs	r3, #1
 8000200:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000202:	2310      	movs	r3, #16
 8000204:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000206:	2300      	movs	r3, #0
 8000208:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800020a:	f107 0318 	add.w	r3, r7, #24
 800020e:	4618      	mov	r0, r3
 8000210:	f000 fa00 	bl	8000614 <HAL_RCC_OscConfig>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800021a:	f000 f818 	bl	800024e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800021e:	230f      	movs	r3, #15
 8000220:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000222:	2300      	movs	r3, #0
 8000224:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800022e:	2300      	movs	r3, #0
 8000230:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f001 f9fa 	bl	8001630 <HAL_RCC_ClockConfig>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000242:	f000 f804 	bl	800024e <Error_Handler>
  }
}
 8000246:	bf00      	nop
 8000248:	3740      	adds	r7, #64	@ 0x40
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}

0800024e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800024e:	b480      	push	{r7}
 8000250:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000252:	b672      	cpsid	i
}
 8000254:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000256:	bf00      	nop
 8000258:	e7fd      	b.n	8000256 <Error_Handler+0x8>
	...

0800025c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800025c:	b480      	push	{r7}
 800025e:	b083      	sub	sp, #12
 8000260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000262:	4b0f      	ldr	r3, [pc, #60]	@ (80002a0 <HAL_MspInit+0x44>)
 8000264:	699b      	ldr	r3, [r3, #24]
 8000266:	4a0e      	ldr	r2, [pc, #56]	@ (80002a0 <HAL_MspInit+0x44>)
 8000268:	f043 0301 	orr.w	r3, r3, #1
 800026c:	6193      	str	r3, [r2, #24]
 800026e:	4b0c      	ldr	r3, [pc, #48]	@ (80002a0 <HAL_MspInit+0x44>)
 8000270:	699b      	ldr	r3, [r3, #24]
 8000272:	f003 0301 	and.w	r3, r3, #1
 8000276:	607b      	str	r3, [r7, #4]
 8000278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800027a:	4b09      	ldr	r3, [pc, #36]	@ (80002a0 <HAL_MspInit+0x44>)
 800027c:	69db      	ldr	r3, [r3, #28]
 800027e:	4a08      	ldr	r2, [pc, #32]	@ (80002a0 <HAL_MspInit+0x44>)
 8000280:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000284:	61d3      	str	r3, [r2, #28]
 8000286:	4b06      	ldr	r3, [pc, #24]	@ (80002a0 <HAL_MspInit+0x44>)
 8000288:	69db      	ldr	r3, [r3, #28]
 800028a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800028e:	603b      	str	r3, [r7, #0]
 8000290:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000292:	bf00      	nop
 8000294:	370c      	adds	r7, #12
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	40021000 	.word	0x40021000

080002a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002a8:	bf00      	nop
 80002aa:	e7fd      	b.n	80002a8 <NMI_Handler+0x4>

080002ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002b0:	bf00      	nop
 80002b2:	e7fd      	b.n	80002b0 <HardFault_Handler+0x4>

080002b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002b8:	bf00      	nop
 80002ba:	e7fd      	b.n	80002b8 <MemManage_Handler+0x4>

080002bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002c0:	bf00      	nop
 80002c2:	e7fd      	b.n	80002c0 <BusFault_Handler+0x4>

080002c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002c8:	bf00      	nop
 80002ca:	e7fd      	b.n	80002c8 <UsageFault_Handler+0x4>

080002cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002d0:	bf00      	nop
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr

080002da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002da:	b480      	push	{r7}
 80002dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002de:	bf00      	nop
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr

080002e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002ec:	bf00      	nop
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr

080002f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002f6:	b580      	push	{r7, lr}
 80002f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002fa:	f000 f885 	bl	8000408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}
	...

08000304 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000308:	4b06      	ldr	r3, [pc, #24]	@ (8000324 <SystemInit+0x20>)
 800030a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800030e:	4a05      	ldr	r2, [pc, #20]	@ (8000324 <SystemInit+0x20>)
 8000310:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000314:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000318:	bf00      	nop
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	e000ed00 	.word	0xe000ed00

08000328 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000328:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000360 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800032c:	f7ff ffea 	bl	8000304 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000330:	480c      	ldr	r0, [pc, #48]	@ (8000364 <LoopForever+0x6>)
  ldr r1, =_edata
 8000332:	490d      	ldr	r1, [pc, #52]	@ (8000368 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000334:	4a0d      	ldr	r2, [pc, #52]	@ (800036c <LoopForever+0xe>)
  movs r3, #0
 8000336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000338:	e002      	b.n	8000340 <LoopCopyDataInit>

0800033a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800033a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800033c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800033e:	3304      	adds	r3, #4

08000340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000344:	d3f9      	bcc.n	800033a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000346:	4a0a      	ldr	r2, [pc, #40]	@ (8000370 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000348:	4c0a      	ldr	r4, [pc, #40]	@ (8000374 <LoopForever+0x16>)
  movs r3, #0
 800034a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800034c:	e001      	b.n	8000352 <LoopFillZerobss>

0800034e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800034e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000350:	3204      	adds	r2, #4

08000352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000354:	d3fb      	bcc.n	800034e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000356:	f001 fb35 	bl	80019c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800035a:	f7ff ff35 	bl	80001c8 <main>

0800035e <LoopForever>:

LoopForever:
    b LoopForever
 800035e:	e7fe      	b.n	800035e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000360:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000368:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800036c:	08001a5c 	.word	0x08001a5c
  ldr r2, =_sbss
 8000370:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000374:	2000002c 	.word	0x2000002c

08000378 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000378:	e7fe      	b.n	8000378 <ADC1_2_IRQHandler>
	...

0800037c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000380:	4b08      	ldr	r3, [pc, #32]	@ (80003a4 <HAL_Init+0x28>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a07      	ldr	r2, [pc, #28]	@ (80003a4 <HAL_Init+0x28>)
 8000386:	f043 0310 	orr.w	r3, r3, #16
 800038a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800038c:	2003      	movs	r0, #3
 800038e:	f000 f90d 	bl	80005ac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000392:	200f      	movs	r0, #15
 8000394:	f000 f808 	bl	80003a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000398:	f7ff ff60 	bl	800025c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800039c:	2300      	movs	r3, #0
}
 800039e:	4618      	mov	r0, r3
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	40022000 	.word	0x40022000

080003a8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003b0:	4b12      	ldr	r3, [pc, #72]	@ (80003fc <HAL_InitTick+0x54>)
 80003b2:	681a      	ldr	r2, [r3, #0]
 80003b4:	4b12      	ldr	r3, [pc, #72]	@ (8000400 <HAL_InitTick+0x58>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	4619      	mov	r1, r3
 80003ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003be:	fbb3 f3f1 	udiv	r3, r3, r1
 80003c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80003c6:	4618      	mov	r0, r3
 80003c8:	f000 f917 	bl	80005fa <HAL_SYSTICK_Config>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80003d2:	2301      	movs	r3, #1
 80003d4:	e00e      	b.n	80003f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	2b0f      	cmp	r3, #15
 80003da:	d80a      	bhi.n	80003f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003dc:	2200      	movs	r2, #0
 80003de:	6879      	ldr	r1, [r7, #4]
 80003e0:	f04f 30ff 	mov.w	r0, #4294967295
 80003e4:	f000 f8ed 	bl	80005c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80003e8:	4a06      	ldr	r2, [pc, #24]	@ (8000404 <HAL_InitTick+0x5c>)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80003ee:	2300      	movs	r3, #0
 80003f0:	e000      	b.n	80003f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80003f2:	2301      	movs	r3, #1
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	3708      	adds	r7, #8
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	20000000 	.word	0x20000000
 8000400:	20000008 	.word	0x20000008
 8000404:	20000004 	.word	0x20000004

08000408 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800040c:	4b06      	ldr	r3, [pc, #24]	@ (8000428 <HAL_IncTick+0x20>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	461a      	mov	r2, r3
 8000412:	4b06      	ldr	r3, [pc, #24]	@ (800042c <HAL_IncTick+0x24>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4413      	add	r3, r2
 8000418:	4a04      	ldr	r2, [pc, #16]	@ (800042c <HAL_IncTick+0x24>)
 800041a:	6013      	str	r3, [r2, #0]
}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	20000008 	.word	0x20000008
 800042c:	20000028 	.word	0x20000028

08000430 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  return uwTick;  
 8000434:	4b03      	ldr	r3, [pc, #12]	@ (8000444 <HAL_GetTick+0x14>)
 8000436:	681b      	ldr	r3, [r3, #0]
}
 8000438:	4618      	mov	r0, r3
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	20000028 	.word	0x20000028

08000448 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000448:	b480      	push	{r7}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	f003 0307 	and.w	r3, r3, #7
 8000456:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000458:	4b0c      	ldr	r3, [pc, #48]	@ (800048c <__NVIC_SetPriorityGrouping+0x44>)
 800045a:	68db      	ldr	r3, [r3, #12]
 800045c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800045e:	68ba      	ldr	r2, [r7, #8]
 8000460:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000464:	4013      	ands	r3, r2
 8000466:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000470:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000474:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000478:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800047a:	4a04      	ldr	r2, [pc, #16]	@ (800048c <__NVIC_SetPriorityGrouping+0x44>)
 800047c:	68bb      	ldr	r3, [r7, #8]
 800047e:	60d3      	str	r3, [r2, #12]
}
 8000480:	bf00      	nop
 8000482:	3714      	adds	r7, #20
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr
 800048c:	e000ed00 	.word	0xe000ed00

08000490 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000494:	4b04      	ldr	r3, [pc, #16]	@ (80004a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000496:	68db      	ldr	r3, [r3, #12]
 8000498:	0a1b      	lsrs	r3, r3, #8
 800049a:	f003 0307 	and.w	r3, r3, #7
}
 800049e:	4618      	mov	r0, r3
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr
 80004a8:	e000ed00 	.word	0xe000ed00

080004ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4603      	mov	r3, r0
 80004b4:	6039      	str	r1, [r7, #0]
 80004b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	db0a      	blt.n	80004d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	b2da      	uxtb	r2, r3
 80004c4:	490c      	ldr	r1, [pc, #48]	@ (80004f8 <__NVIC_SetPriority+0x4c>)
 80004c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ca:	0112      	lsls	r2, r2, #4
 80004cc:	b2d2      	uxtb	r2, r2
 80004ce:	440b      	add	r3, r1
 80004d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004d4:	e00a      	b.n	80004ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	b2da      	uxtb	r2, r3
 80004da:	4908      	ldr	r1, [pc, #32]	@ (80004fc <__NVIC_SetPriority+0x50>)
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	f003 030f 	and.w	r3, r3, #15
 80004e2:	3b04      	subs	r3, #4
 80004e4:	0112      	lsls	r2, r2, #4
 80004e6:	b2d2      	uxtb	r2, r2
 80004e8:	440b      	add	r3, r1
 80004ea:	761a      	strb	r2, [r3, #24]
}
 80004ec:	bf00      	nop
 80004ee:	370c      	adds	r7, #12
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	e000e100 	.word	0xe000e100
 80004fc:	e000ed00 	.word	0xe000ed00

08000500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000500:	b480      	push	{r7}
 8000502:	b089      	sub	sp, #36	@ 0x24
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	f003 0307 	and.w	r3, r3, #7
 8000512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000514:	69fb      	ldr	r3, [r7, #28]
 8000516:	f1c3 0307 	rsb	r3, r3, #7
 800051a:	2b04      	cmp	r3, #4
 800051c:	bf28      	it	cs
 800051e:	2304      	movcs	r3, #4
 8000520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000522:	69fb      	ldr	r3, [r7, #28]
 8000524:	3304      	adds	r3, #4
 8000526:	2b06      	cmp	r3, #6
 8000528:	d902      	bls.n	8000530 <NVIC_EncodePriority+0x30>
 800052a:	69fb      	ldr	r3, [r7, #28]
 800052c:	3b03      	subs	r3, #3
 800052e:	e000      	b.n	8000532 <NVIC_EncodePriority+0x32>
 8000530:	2300      	movs	r3, #0
 8000532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000534:	f04f 32ff 	mov.w	r2, #4294967295
 8000538:	69bb      	ldr	r3, [r7, #24]
 800053a:	fa02 f303 	lsl.w	r3, r2, r3
 800053e:	43da      	mvns	r2, r3
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	401a      	ands	r2, r3
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000548:	f04f 31ff 	mov.w	r1, #4294967295
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	fa01 f303 	lsl.w	r3, r1, r3
 8000552:	43d9      	mvns	r1, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000558:	4313      	orrs	r3, r2
         );
}
 800055a:	4618      	mov	r0, r3
 800055c:	3724      	adds	r7, #36	@ 0x24
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
	...

08000568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	3b01      	subs	r3, #1
 8000574:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000578:	d301      	bcc.n	800057e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800057a:	2301      	movs	r3, #1
 800057c:	e00f      	b.n	800059e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800057e:	4a0a      	ldr	r2, [pc, #40]	@ (80005a8 <SysTick_Config+0x40>)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	3b01      	subs	r3, #1
 8000584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000586:	210f      	movs	r1, #15
 8000588:	f04f 30ff 	mov.w	r0, #4294967295
 800058c:	f7ff ff8e 	bl	80004ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000590:	4b05      	ldr	r3, [pc, #20]	@ (80005a8 <SysTick_Config+0x40>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000596:	4b04      	ldr	r3, [pc, #16]	@ (80005a8 <SysTick_Config+0x40>)
 8000598:	2207      	movs	r2, #7
 800059a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800059c:	2300      	movs	r3, #0
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	e000e010 	.word	0xe000e010

080005ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f7ff ff47 	bl	8000448 <__NVIC_SetPriorityGrouping>
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b086      	sub	sp, #24
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	4603      	mov	r3, r0
 80005ca:	60b9      	str	r1, [r7, #8]
 80005cc:	607a      	str	r2, [r7, #4]
 80005ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80005d4:	f7ff ff5c 	bl	8000490 <__NVIC_GetPriorityGrouping>
 80005d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	68b9      	ldr	r1, [r7, #8]
 80005de:	6978      	ldr	r0, [r7, #20]
 80005e0:	f7ff ff8e 	bl	8000500 <NVIC_EncodePriority>
 80005e4:	4602      	mov	r2, r0
 80005e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005ea:	4611      	mov	r1, r2
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff ff5d 	bl	80004ac <__NVIC_SetPriority>
}
 80005f2:	bf00      	nop
 80005f4:	3718      	adds	r7, #24
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b082      	sub	sp, #8
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f7ff ffb0 	bl	8000568 <SysTick_Config>
 8000608:	4603      	mov	r3, r0
}
 800060a:	4618      	mov	r0, r3
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800061a:	af00      	add	r7, sp, #0
 800061c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000620:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000624:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000626:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800062a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d102      	bne.n	800063a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000634:	2301      	movs	r3, #1
 8000636:	f000 bff4 	b.w	8001622 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800063a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800063e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	2b00      	cmp	r3, #0
 800064c:	f000 816d 	beq.w	800092a <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000650:	4bb4      	ldr	r3, [pc, #720]	@ (8000924 <HAL_RCC_OscConfig+0x310>)
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	f003 030c 	and.w	r3, r3, #12
 8000658:	2b04      	cmp	r3, #4
 800065a:	d00c      	beq.n	8000676 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800065c:	4bb1      	ldr	r3, [pc, #708]	@ (8000924 <HAL_RCC_OscConfig+0x310>)
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	f003 030c 	and.w	r3, r3, #12
 8000664:	2b08      	cmp	r3, #8
 8000666:	d157      	bne.n	8000718 <HAL_RCC_OscConfig+0x104>
 8000668:	4bae      	ldr	r3, [pc, #696]	@ (8000924 <HAL_RCC_OscConfig+0x310>)
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000674:	d150      	bne.n	8000718 <HAL_RCC_OscConfig+0x104>
 8000676:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800067a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800067e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000682:	fa93 f3a3 	rbit	r3, r3
 8000686:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800068a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800068e:	fab3 f383 	clz	r3, r3
 8000692:	b2db      	uxtb	r3, r3
 8000694:	2b3f      	cmp	r3, #63	@ 0x3f
 8000696:	d802      	bhi.n	800069e <HAL_RCC_OscConfig+0x8a>
 8000698:	4ba2      	ldr	r3, [pc, #648]	@ (8000924 <HAL_RCC_OscConfig+0x310>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	e015      	b.n	80006ca <HAL_RCC_OscConfig+0xb6>
 800069e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80006a2:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006a6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80006aa:	fa93 f3a3 	rbit	r3, r3
 80006ae:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80006b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80006b6:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80006ba:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80006be:	fa93 f3a3 	rbit	r3, r3
 80006c2:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80006c6:	4b97      	ldr	r3, [pc, #604]	@ (8000924 <HAL_RCC_OscConfig+0x310>)
 80006c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006ca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80006ce:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80006d2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80006d6:	fa92 f2a2 	rbit	r2, r2
 80006da:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80006de:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80006e2:	fab2 f282 	clz	r2, r2
 80006e6:	b2d2      	uxtb	r2, r2
 80006e8:	f042 0220 	orr.w	r2, r2, #32
 80006ec:	b2d2      	uxtb	r2, r2
 80006ee:	f002 021f 	and.w	r2, r2, #31
 80006f2:	2101      	movs	r1, #1
 80006f4:	fa01 f202 	lsl.w	r2, r1, r2
 80006f8:	4013      	ands	r3, r2
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	f000 8114 	beq.w	8000928 <HAL_RCC_OscConfig+0x314>
 8000700:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000704:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	2b00      	cmp	r3, #0
 800070e:	f040 810b 	bne.w	8000928 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8000712:	2301      	movs	r3, #1
 8000714:	f000 bf85 	b.w	8001622 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000718:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800071c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000728:	d106      	bne.n	8000738 <HAL_RCC_OscConfig+0x124>
 800072a:	4b7e      	ldr	r3, [pc, #504]	@ (8000924 <HAL_RCC_OscConfig+0x310>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a7d      	ldr	r2, [pc, #500]	@ (8000924 <HAL_RCC_OscConfig+0x310>)
 8000730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000734:	6013      	str	r3, [r2, #0]
 8000736:	e036      	b.n	80007a6 <HAL_RCC_OscConfig+0x192>
 8000738:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800073c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d10c      	bne.n	8000762 <HAL_RCC_OscConfig+0x14e>
 8000748:	4b76      	ldr	r3, [pc, #472]	@ (8000924 <HAL_RCC_OscConfig+0x310>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a75      	ldr	r2, [pc, #468]	@ (8000924 <HAL_RCC_OscConfig+0x310>)
 800074e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4b73      	ldr	r3, [pc, #460]	@ (8000924 <HAL_RCC_OscConfig+0x310>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a72      	ldr	r2, [pc, #456]	@ (8000924 <HAL_RCC_OscConfig+0x310>)
 800075a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	e021      	b.n	80007a6 <HAL_RCC_OscConfig+0x192>
 8000762:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000766:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000772:	d10c      	bne.n	800078e <HAL_RCC_OscConfig+0x17a>
 8000774:	4b6b      	ldr	r3, [pc, #428]	@ (8000924 <HAL_RCC_OscConfig+0x310>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a6a      	ldr	r2, [pc, #424]	@ (8000924 <HAL_RCC_OscConfig+0x310>)
 800077a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800077e:	6013      	str	r3, [r2, #0]
 8000780:	4b68      	ldr	r3, [pc, #416]	@ (8000924 <HAL_RCC_OscConfig+0x310>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a67      	ldr	r2, [pc, #412]	@ (8000924 <HAL_RCC_OscConfig+0x310>)
 8000786:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	e00b      	b.n	80007a6 <HAL_RCC_OscConfig+0x192>
 800078e:	4b65      	ldr	r3, [pc, #404]	@ (8000924 <HAL_RCC_OscConfig+0x310>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a64      	ldr	r2, [pc, #400]	@ (8000924 <HAL_RCC_OscConfig+0x310>)
 8000794:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000798:	6013      	str	r3, [r2, #0]
 800079a:	4b62      	ldr	r3, [pc, #392]	@ (8000924 <HAL_RCC_OscConfig+0x310>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a61      	ldr	r2, [pc, #388]	@ (8000924 <HAL_RCC_OscConfig+0x310>)
 80007a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80007a4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80007a6:	4b5f      	ldr	r3, [pc, #380]	@ (8000924 <HAL_RCC_OscConfig+0x310>)
 80007a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007aa:	f023 020f 	bic.w	r2, r3, #15
 80007ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80007b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	689b      	ldr	r3, [r3, #8]
 80007ba:	495a      	ldr	r1, [pc, #360]	@ (8000924 <HAL_RCC_OscConfig+0x310>)
 80007bc:	4313      	orrs	r3, r2
 80007be:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80007c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80007c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d054      	beq.n	800087a <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007d0:	f7ff fe2e 	bl	8000430 <HAL_GetTick>
 80007d4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007d8:	e00a      	b.n	80007f0 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80007da:	f7ff fe29 	bl	8000430 <HAL_GetTick>
 80007de:	4602      	mov	r2, r0
 80007e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	2b64      	cmp	r3, #100	@ 0x64
 80007e8:	d902      	bls.n	80007f0 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80007ea:	2303      	movs	r3, #3
 80007ec:	f000 bf19 	b.w	8001622 <HAL_RCC_OscConfig+0x100e>
 80007f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80007f4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007f8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80007fc:	fa93 f3a3 	rbit	r3, r3
 8000800:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8000804:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000808:	fab3 f383 	clz	r3, r3
 800080c:	b2db      	uxtb	r3, r3
 800080e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000810:	d802      	bhi.n	8000818 <HAL_RCC_OscConfig+0x204>
 8000812:	4b44      	ldr	r3, [pc, #272]	@ (8000924 <HAL_RCC_OscConfig+0x310>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	e015      	b.n	8000844 <HAL_RCC_OscConfig+0x230>
 8000818:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800081c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000820:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000824:	fa93 f3a3 	rbit	r3, r3
 8000828:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800082c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000830:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000834:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000838:	fa93 f3a3 	rbit	r3, r3
 800083c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8000840:	4b38      	ldr	r3, [pc, #224]	@ (8000924 <HAL_RCC_OscConfig+0x310>)
 8000842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000844:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000848:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800084c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000850:	fa92 f2a2 	rbit	r2, r2
 8000854:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8000858:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800085c:	fab2 f282 	clz	r2, r2
 8000860:	b2d2      	uxtb	r2, r2
 8000862:	f042 0220 	orr.w	r2, r2, #32
 8000866:	b2d2      	uxtb	r2, r2
 8000868:	f002 021f 	and.w	r2, r2, #31
 800086c:	2101      	movs	r1, #1
 800086e:	fa01 f202 	lsl.w	r2, r1, r2
 8000872:	4013      	ands	r3, r2
 8000874:	2b00      	cmp	r3, #0
 8000876:	d0b0      	beq.n	80007da <HAL_RCC_OscConfig+0x1c6>
 8000878:	e057      	b.n	800092a <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800087a:	f7ff fdd9 	bl	8000430 <HAL_GetTick>
 800087e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000882:	e00a      	b.n	800089a <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000884:	f7ff fdd4 	bl	8000430 <HAL_GetTick>
 8000888:	4602      	mov	r2, r0
 800088a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800088e:	1ad3      	subs	r3, r2, r3
 8000890:	2b64      	cmp	r3, #100	@ 0x64
 8000892:	d902      	bls.n	800089a <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8000894:	2303      	movs	r3, #3
 8000896:	f000 bec4 	b.w	8001622 <HAL_RCC_OscConfig+0x100e>
 800089a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800089e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008a2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80008a6:	fa93 f3a3 	rbit	r3, r3
 80008aa:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80008ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008b2:	fab3 f383 	clz	r3, r3
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	2b3f      	cmp	r3, #63	@ 0x3f
 80008ba:	d802      	bhi.n	80008c2 <HAL_RCC_OscConfig+0x2ae>
 80008bc:	4b19      	ldr	r3, [pc, #100]	@ (8000924 <HAL_RCC_OscConfig+0x310>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	e015      	b.n	80008ee <HAL_RCC_OscConfig+0x2da>
 80008c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80008c6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008ca:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80008ce:	fa93 f3a3 	rbit	r3, r3
 80008d2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80008d6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80008da:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80008de:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80008e2:	fa93 f3a3 	rbit	r3, r3
 80008e6:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80008ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000924 <HAL_RCC_OscConfig+0x310>)
 80008ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80008f2:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80008f6:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80008fa:	fa92 f2a2 	rbit	r2, r2
 80008fe:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8000902:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8000906:	fab2 f282 	clz	r2, r2
 800090a:	b2d2      	uxtb	r2, r2
 800090c:	f042 0220 	orr.w	r2, r2, #32
 8000910:	b2d2      	uxtb	r2, r2
 8000912:	f002 021f 	and.w	r2, r2, #31
 8000916:	2101      	movs	r1, #1
 8000918:	fa01 f202 	lsl.w	r2, r1, r2
 800091c:	4013      	ands	r3, r2
 800091e:	2b00      	cmp	r3, #0
 8000920:	d1b0      	bne.n	8000884 <HAL_RCC_OscConfig+0x270>
 8000922:	e002      	b.n	800092a <HAL_RCC_OscConfig+0x316>
 8000924:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800092a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800092e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	2b00      	cmp	r3, #0
 800093c:	f000 816c 	beq.w	8000c18 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000940:	4bcc      	ldr	r3, [pc, #816]	@ (8000c74 <HAL_RCC_OscConfig+0x660>)
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	f003 030c 	and.w	r3, r3, #12
 8000948:	2b00      	cmp	r3, #0
 800094a:	d00b      	beq.n	8000964 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800094c:	4bc9      	ldr	r3, [pc, #804]	@ (8000c74 <HAL_RCC_OscConfig+0x660>)
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	f003 030c 	and.w	r3, r3, #12
 8000954:	2b08      	cmp	r3, #8
 8000956:	d16d      	bne.n	8000a34 <HAL_RCC_OscConfig+0x420>
 8000958:	4bc6      	ldr	r3, [pc, #792]	@ (8000c74 <HAL_RCC_OscConfig+0x660>)
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000960:	2b00      	cmp	r3, #0
 8000962:	d167      	bne.n	8000a34 <HAL_RCC_OscConfig+0x420>
 8000964:	2302      	movs	r3, #2
 8000966:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800096a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800096e:	fa93 f3a3 	rbit	r3, r3
 8000972:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8000976:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800097a:	fab3 f383 	clz	r3, r3
 800097e:	b2db      	uxtb	r3, r3
 8000980:	2b3f      	cmp	r3, #63	@ 0x3f
 8000982:	d802      	bhi.n	800098a <HAL_RCC_OscConfig+0x376>
 8000984:	4bbb      	ldr	r3, [pc, #748]	@ (8000c74 <HAL_RCC_OscConfig+0x660>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	e013      	b.n	80009b2 <HAL_RCC_OscConfig+0x39e>
 800098a:	2302      	movs	r3, #2
 800098c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000990:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8000994:	fa93 f3a3 	rbit	r3, r3
 8000998:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800099c:	2302      	movs	r3, #2
 800099e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80009a2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80009a6:	fa93 f3a3 	rbit	r3, r3
 80009aa:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80009ae:	4bb1      	ldr	r3, [pc, #708]	@ (8000c74 <HAL_RCC_OscConfig+0x660>)
 80009b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009b2:	2202      	movs	r2, #2
 80009b4:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80009b8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80009bc:	fa92 f2a2 	rbit	r2, r2
 80009c0:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80009c4:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80009c8:	fab2 f282 	clz	r2, r2
 80009cc:	b2d2      	uxtb	r2, r2
 80009ce:	f042 0220 	orr.w	r2, r2, #32
 80009d2:	b2d2      	uxtb	r2, r2
 80009d4:	f002 021f 	and.w	r2, r2, #31
 80009d8:	2101      	movs	r1, #1
 80009da:	fa01 f202 	lsl.w	r2, r1, r2
 80009de:	4013      	ands	r3, r2
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d00a      	beq.n	80009fa <HAL_RCC_OscConfig+0x3e6>
 80009e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80009e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	691b      	ldr	r3, [r3, #16]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d002      	beq.n	80009fa <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 80009f4:	2301      	movs	r3, #1
 80009f6:	f000 be14 	b.w	8001622 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009fa:	4b9e      	ldr	r3, [pc, #632]	@ (8000c74 <HAL_RCC_OscConfig+0x660>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000a02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000a06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	21f8      	movs	r1, #248	@ 0xf8
 8000a10:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a14:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8000a18:	fa91 f1a1 	rbit	r1, r1
 8000a1c:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8000a20:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8000a24:	fab1 f181 	clz	r1, r1
 8000a28:	b2c9      	uxtb	r1, r1
 8000a2a:	408b      	lsls	r3, r1
 8000a2c:	4991      	ldr	r1, [pc, #580]	@ (8000c74 <HAL_RCC_OscConfig+0x660>)
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a32:	e0f1      	b.n	8000c18 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000a38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	691b      	ldr	r3, [r3, #16]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	f000 8083 	beq.w	8000b4c <HAL_RCC_OscConfig+0x538>
 8000a46:	2301      	movs	r3, #1
 8000a48:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a4c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8000a50:	fa93 f3a3 	rbit	r3, r3
 8000a54:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8000a58:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a5c:	fab3 f383 	clz	r3, r3
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8000a66:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	2301      	movs	r3, #1
 8000a70:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a72:	f7ff fcdd 	bl	8000430 <HAL_GetTick>
 8000a76:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a7a:	e00a      	b.n	8000a92 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a7c:	f7ff fcd8 	bl	8000430 <HAL_GetTick>
 8000a80:	4602      	mov	r2, r0
 8000a82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d902      	bls.n	8000a92 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	f000 bdc8 	b.w	8001622 <HAL_RCC_OscConfig+0x100e>
 8000a92:	2302      	movs	r3, #2
 8000a94:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a98:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000a9c:	fa93 f3a3 	rbit	r3, r3
 8000aa0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8000aa4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000aa8:	fab3 f383 	clz	r3, r3
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ab0:	d802      	bhi.n	8000ab8 <HAL_RCC_OscConfig+0x4a4>
 8000ab2:	4b70      	ldr	r3, [pc, #448]	@ (8000c74 <HAL_RCC_OscConfig+0x660>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	e013      	b.n	8000ae0 <HAL_RCC_OscConfig+0x4cc>
 8000ab8:	2302      	movs	r3, #2
 8000aba:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000abe:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8000ac2:	fa93 f3a3 	rbit	r3, r3
 8000ac6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8000aca:	2302      	movs	r3, #2
 8000acc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8000ad0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8000ad4:	fa93 f3a3 	rbit	r3, r3
 8000ad8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8000adc:	4b65      	ldr	r3, [pc, #404]	@ (8000c74 <HAL_RCC_OscConfig+0x660>)
 8000ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8000ae6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8000aea:	fa92 f2a2 	rbit	r2, r2
 8000aee:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8000af2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8000af6:	fab2 f282 	clz	r2, r2
 8000afa:	b2d2      	uxtb	r2, r2
 8000afc:	f042 0220 	orr.w	r2, r2, #32
 8000b00:	b2d2      	uxtb	r2, r2
 8000b02:	f002 021f 	and.w	r2, r2, #31
 8000b06:	2101      	movs	r1, #1
 8000b08:	fa01 f202 	lsl.w	r2, r1, r2
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d0b4      	beq.n	8000a7c <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b12:	4b58      	ldr	r3, [pc, #352]	@ (8000c74 <HAL_RCC_OscConfig+0x660>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000b1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000b1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	21f8      	movs	r1, #248	@ 0xf8
 8000b28:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b2c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8000b30:	fa91 f1a1 	rbit	r1, r1
 8000b34:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8000b38:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8000b3c:	fab1 f181 	clz	r1, r1
 8000b40:	b2c9      	uxtb	r1, r1
 8000b42:	408b      	lsls	r3, r1
 8000b44:	494b      	ldr	r1, [pc, #300]	@ (8000c74 <HAL_RCC_OscConfig+0x660>)
 8000b46:	4313      	orrs	r3, r2
 8000b48:	600b      	str	r3, [r1, #0]
 8000b4a:	e065      	b.n	8000c18 <HAL_RCC_OscConfig+0x604>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b52:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000b56:	fa93 f3a3 	rbit	r3, r3
 8000b5a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8000b5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b62:	fab3 f383 	clz	r3, r3
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8000b6c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	461a      	mov	r2, r3
 8000b74:	2300      	movs	r3, #0
 8000b76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b78:	f7ff fc5a 	bl	8000430 <HAL_GetTick>
 8000b7c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b80:	e00a      	b.n	8000b98 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b82:	f7ff fc55 	bl	8000430 <HAL_GetTick>
 8000b86:	4602      	mov	r2, r0
 8000b88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d902      	bls.n	8000b98 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8000b92:	2303      	movs	r3, #3
 8000b94:	f000 bd45 	b.w	8001622 <HAL_RCC_OscConfig+0x100e>
 8000b98:	2302      	movs	r3, #2
 8000b9a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b9e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000ba2:	fa93 f3a3 	rbit	r3, r3
 8000ba6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8000baa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bae:	fab3 f383 	clz	r3, r3
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	2b3f      	cmp	r3, #63	@ 0x3f
 8000bb6:	d802      	bhi.n	8000bbe <HAL_RCC_OscConfig+0x5aa>
 8000bb8:	4b2e      	ldr	r3, [pc, #184]	@ (8000c74 <HAL_RCC_OscConfig+0x660>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	e013      	b.n	8000be6 <HAL_RCC_OscConfig+0x5d2>
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000bc8:	fa93 f3a3 	rbit	r3, r3
 8000bcc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8000bd6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bda:	fa93 f3a3 	rbit	r3, r3
 8000bde:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8000be2:	4b24      	ldr	r3, [pc, #144]	@ (8000c74 <HAL_RCC_OscConfig+0x660>)
 8000be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000be6:	2202      	movs	r2, #2
 8000be8:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8000bec:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8000bf0:	fa92 f2a2 	rbit	r2, r2
 8000bf4:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8000bf8:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b2d2      	uxtb	r2, r2
 8000c02:	f042 0220 	orr.w	r2, r2, #32
 8000c06:	b2d2      	uxtb	r2, r2
 8000c08:	f002 021f 	and.w	r2, r2, #31
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c12:	4013      	ands	r3, r2
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d1b4      	bne.n	8000b82 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000c1c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f003 0308 	and.w	r3, r3, #8
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f000 8115 	beq.w	8000e58 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000c32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	699b      	ldr	r3, [r3, #24]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d07e      	beq.n	8000d3c <HAL_RCC_OscConfig+0x728>
 8000c3e:	2301      	movs	r3, #1
 8000c40:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c44:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000c48:	fa93 f3a3 	rbit	r3, r3
 8000c4c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8000c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c54:	fab3 f383 	clz	r3, r3
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <HAL_RCC_OscConfig+0x664>)
 8000c5e:	4413      	add	r3, r2
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	461a      	mov	r2, r3
 8000c64:	2301      	movs	r3, #1
 8000c66:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c68:	f7ff fbe2 	bl	8000430 <HAL_GetTick>
 8000c6c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c70:	e00f      	b.n	8000c92 <HAL_RCC_OscConfig+0x67e>
 8000c72:	bf00      	nop
 8000c74:	40021000 	.word	0x40021000
 8000c78:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c7c:	f7ff fbd8 	bl	8000430 <HAL_GetTick>
 8000c80:	4602      	mov	r2, r0
 8000c82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d902      	bls.n	8000c92 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	f000 bcc8 	b.w	8001622 <HAL_RCC_OscConfig+0x100e>
 8000c92:	2302      	movs	r3, #2
 8000c94:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c98:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000c9c:	fa93 f3a3 	rbit	r3, r3
 8000ca0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000ca4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ca8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000cac:	2202      	movs	r2, #2
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000cb4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	fa93 f2a3 	rbit	r2, r3
 8000cbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000cc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ccc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000cd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	fa93 f2a3 	rbit	r2, r3
 8000ce2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ce6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000cea:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cec:	4bb0      	ldr	r3, [pc, #704]	@ (8000fb0 <HAL_RCC_OscConfig+0x99c>)
 8000cee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000cf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000cf4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000cf8:	2102      	movs	r1, #2
 8000cfa:	6019      	str	r1, [r3, #0]
 8000cfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d00:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	fa93 f1a3 	rbit	r1, r3
 8000d0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d0e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000d12:	6019      	str	r1, [r3, #0]
  return result;
 8000d14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d18:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	fab3 f383 	clz	r3, r3
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	f003 031f 	and.w	r3, r3, #31
 8000d2e:	2101      	movs	r1, #1
 8000d30:	fa01 f303 	lsl.w	r3, r1, r3
 8000d34:	4013      	ands	r3, r2
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0a0      	beq.n	8000c7c <HAL_RCC_OscConfig+0x668>
 8000d3a:	e08d      	b.n	8000e58 <HAL_RCC_OscConfig+0x844>
 8000d3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d40:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000d44:	2201      	movs	r2, #1
 8000d46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d4c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	fa93 f2a3 	rbit	r2, r3
 8000d56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d5a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000d5e:	601a      	str	r2, [r3, #0]
  return result;
 8000d60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d64:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000d68:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d6a:	fab3 f383 	clz	r3, r3
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b90      	ldr	r3, [pc, #576]	@ (8000fb4 <HAL_RCC_OscConfig+0x9a0>)
 8000d74:	4413      	add	r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	461a      	mov	r2, r3
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d7e:	f7ff fb57 	bl	8000430 <HAL_GetTick>
 8000d82:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d86:	e00a      	b.n	8000d9e <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d88:	f7ff fb52 	bl	8000430 <HAL_GetTick>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d902      	bls.n	8000d9e <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	f000 bc42 	b.w	8001622 <HAL_RCC_OscConfig+0x100e>
 8000d9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000da2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000da6:	2202      	movs	r2, #2
 8000da8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000daa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000dae:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	fa93 f2a3 	rbit	r2, r3
 8000db8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000dbc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000dc6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000dca:	2202      	movs	r2, #2
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000dd2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	fa93 f2a3 	rbit	r2, r3
 8000ddc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000de0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000dea:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000dee:	2202      	movs	r2, #2
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000df6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	fa93 f2a3 	rbit	r2, r3
 8000e00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e04:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000e08:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e0a:	4b69      	ldr	r3, [pc, #420]	@ (8000fb0 <HAL_RCC_OscConfig+0x99c>)
 8000e0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e12:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000e16:	2102      	movs	r1, #2
 8000e18:	6019      	str	r1, [r3, #0]
 8000e1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e1e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	fa93 f1a3 	rbit	r1, r3
 8000e28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e2c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000e30:	6019      	str	r1, [r3, #0]
  return result;
 8000e32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e36:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	fab3 f383 	clz	r3, r3
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	f003 031f 	and.w	r3, r3, #31
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e52:	4013      	ands	r3, r2
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d197      	bne.n	8000d88 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e5c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 0304 	and.w	r3, r3, #4
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	f000 819e 	beq.w	80011aa <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e74:	4b4e      	ldr	r3, [pc, #312]	@ (8000fb0 <HAL_RCC_OscConfig+0x99c>)
 8000e76:	69db      	ldr	r3, [r3, #28]
 8000e78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d116      	bne.n	8000eae <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e80:	4b4b      	ldr	r3, [pc, #300]	@ (8000fb0 <HAL_RCC_OscConfig+0x99c>)
 8000e82:	69db      	ldr	r3, [r3, #28]
 8000e84:	4a4a      	ldr	r2, [pc, #296]	@ (8000fb0 <HAL_RCC_OscConfig+0x99c>)
 8000e86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e8a:	61d3      	str	r3, [r2, #28]
 8000e8c:	4b48      	ldr	r3, [pc, #288]	@ (8000fb0 <HAL_RCC_OscConfig+0x99c>)
 8000e8e:	69db      	ldr	r3, [r3, #28]
 8000e90:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8000e94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e98:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ea2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8000ea6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eae:	4b42      	ldr	r3, [pc, #264]	@ (8000fb8 <HAL_RCC_OscConfig+0x9a4>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d11a      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eba:	4b3f      	ldr	r3, [pc, #252]	@ (8000fb8 <HAL_RCC_OscConfig+0x9a4>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a3e      	ldr	r2, [pc, #248]	@ (8000fb8 <HAL_RCC_OscConfig+0x9a4>)
 8000ec0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ec4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ec6:	f7ff fab3 	bl	8000430 <HAL_GetTick>
 8000eca:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ece:	e009      	b.n	8000ee4 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ed0:	f7ff faae 	bl	8000430 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	2b64      	cmp	r3, #100	@ 0x64
 8000ede:	d901      	bls.n	8000ee4 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	e39e      	b.n	8001622 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ee4:	4b34      	ldr	r3, [pc, #208]	@ (8000fb8 <HAL_RCC_OscConfig+0x9a4>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d0ef      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ef0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ef4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d106      	bne.n	8000f0e <HAL_RCC_OscConfig+0x8fa>
 8000f00:	4b2b      	ldr	r3, [pc, #172]	@ (8000fb0 <HAL_RCC_OscConfig+0x99c>)
 8000f02:	6a1b      	ldr	r3, [r3, #32]
 8000f04:	4a2a      	ldr	r2, [pc, #168]	@ (8000fb0 <HAL_RCC_OscConfig+0x99c>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6213      	str	r3, [r2, #32]
 8000f0c:	e035      	b.n	8000f7a <HAL_RCC_OscConfig+0x966>
 8000f0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d10c      	bne.n	8000f38 <HAL_RCC_OscConfig+0x924>
 8000f1e:	4b24      	ldr	r3, [pc, #144]	@ (8000fb0 <HAL_RCC_OscConfig+0x99c>)
 8000f20:	6a1b      	ldr	r3, [r3, #32]
 8000f22:	4a23      	ldr	r2, [pc, #140]	@ (8000fb0 <HAL_RCC_OscConfig+0x99c>)
 8000f24:	f023 0301 	bic.w	r3, r3, #1
 8000f28:	6213      	str	r3, [r2, #32]
 8000f2a:	4b21      	ldr	r3, [pc, #132]	@ (8000fb0 <HAL_RCC_OscConfig+0x99c>)
 8000f2c:	6a1b      	ldr	r3, [r3, #32]
 8000f2e:	4a20      	ldr	r2, [pc, #128]	@ (8000fb0 <HAL_RCC_OscConfig+0x99c>)
 8000f30:	f023 0304 	bic.w	r3, r3, #4
 8000f34:	6213      	str	r3, [r2, #32]
 8000f36:	e020      	b.n	8000f7a <HAL_RCC_OscConfig+0x966>
 8000f38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f3c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	2b05      	cmp	r3, #5
 8000f46:	d10c      	bne.n	8000f62 <HAL_RCC_OscConfig+0x94e>
 8000f48:	4b19      	ldr	r3, [pc, #100]	@ (8000fb0 <HAL_RCC_OscConfig+0x99c>)
 8000f4a:	6a1b      	ldr	r3, [r3, #32]
 8000f4c:	4a18      	ldr	r2, [pc, #96]	@ (8000fb0 <HAL_RCC_OscConfig+0x99c>)
 8000f4e:	f043 0304 	orr.w	r3, r3, #4
 8000f52:	6213      	str	r3, [r2, #32]
 8000f54:	4b16      	ldr	r3, [pc, #88]	@ (8000fb0 <HAL_RCC_OscConfig+0x99c>)
 8000f56:	6a1b      	ldr	r3, [r3, #32]
 8000f58:	4a15      	ldr	r2, [pc, #84]	@ (8000fb0 <HAL_RCC_OscConfig+0x99c>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6213      	str	r3, [r2, #32]
 8000f60:	e00b      	b.n	8000f7a <HAL_RCC_OscConfig+0x966>
 8000f62:	4b13      	ldr	r3, [pc, #76]	@ (8000fb0 <HAL_RCC_OscConfig+0x99c>)
 8000f64:	6a1b      	ldr	r3, [r3, #32]
 8000f66:	4a12      	ldr	r2, [pc, #72]	@ (8000fb0 <HAL_RCC_OscConfig+0x99c>)
 8000f68:	f023 0301 	bic.w	r3, r3, #1
 8000f6c:	6213      	str	r3, [r2, #32]
 8000f6e:	4b10      	ldr	r3, [pc, #64]	@ (8000fb0 <HAL_RCC_OscConfig+0x99c>)
 8000f70:	6a1b      	ldr	r3, [r3, #32]
 8000f72:	4a0f      	ldr	r2, [pc, #60]	@ (8000fb0 <HAL_RCC_OscConfig+0x99c>)
 8000f74:	f023 0304 	bic.w	r3, r3, #4
 8000f78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f000 8087 	beq.w	800109a <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f8c:	f7ff fa50 	bl	8000430 <HAL_GetTick>
 8000f90:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f94:	e012      	b.n	8000fbc <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f96:	f7ff fa4b 	bl	8000430 <HAL_GetTick>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d908      	bls.n	8000fbc <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e339      	b.n	8001622 <HAL_RCC_OscConfig+0x100e>
 8000fae:	bf00      	nop
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	10908120 	.word	0x10908120
 8000fb8:	40007000 	.word	0x40007000
 8000fbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000fc0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000fcc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	fa93 f2a3 	rbit	r2, r3
 8000fd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000fda:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000fe4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8000fe8:	2202      	movs	r2, #2
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ff0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	fa93 f2a3 	rbit	r2, r3
 8000ffa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ffe:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001002:	601a      	str	r2, [r3, #0]
  return result;
 8001004:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001008:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800100c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800100e:	fab3 f383 	clz	r3, r3
 8001012:	b2db      	uxtb	r3, r3
 8001014:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	d102      	bne.n	8001024 <HAL_RCC_OscConfig+0xa10>
 800101e:	4b98      	ldr	r3, [pc, #608]	@ (8001280 <HAL_RCC_OscConfig+0xc6c>)
 8001020:	6a1b      	ldr	r3, [r3, #32]
 8001022:	e013      	b.n	800104c <HAL_RCC_OscConfig+0xa38>
 8001024:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001028:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800102c:	2202      	movs	r2, #2
 800102e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001034:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	fa93 f2a3 	rbit	r2, r3
 800103e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001042:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	4b8d      	ldr	r3, [pc, #564]	@ (8001280 <HAL_RCC_OscConfig+0xc6c>)
 800104a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800104c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001050:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001054:	2102      	movs	r1, #2
 8001056:	6011      	str	r1, [r2, #0]
 8001058:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800105c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001060:	6812      	ldr	r2, [r2, #0]
 8001062:	fa92 f1a2 	rbit	r1, r2
 8001066:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800106a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800106e:	6011      	str	r1, [r2, #0]
  return result;
 8001070:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001074:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001078:	6812      	ldr	r2, [r2, #0]
 800107a:	fab2 f282 	clz	r2, r2
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	f002 021f 	and.w	r2, r2, #31
 800108a:	2101      	movs	r1, #1
 800108c:	fa01 f202 	lsl.w	r2, r1, r2
 8001090:	4013      	ands	r3, r2
 8001092:	2b00      	cmp	r3, #0
 8001094:	f43f af7f 	beq.w	8000f96 <HAL_RCC_OscConfig+0x982>
 8001098:	e07d      	b.n	8001196 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800109a:	f7ff f9c9 	bl	8000430 <HAL_GetTick>
 800109e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010a2:	e00b      	b.n	80010bc <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010a4:	f7ff f9c4 	bl	8000430 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e2b2      	b.n	8001622 <HAL_RCC_OscConfig+0x100e>
 80010bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010c0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80010c4:	2202      	movs	r2, #2
 80010c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010cc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	fa93 f2a3 	rbit	r2, r3
 80010d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010da:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010e4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80010e8:	2202      	movs	r2, #2
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010f0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	fa93 f2a3 	rbit	r2, r3
 80010fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010fe:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001102:	601a      	str	r2, [r3, #0]
  return result;
 8001104:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001108:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800110c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800110e:	fab3 f383 	clz	r3, r3
 8001112:	b2db      	uxtb	r3, r3
 8001114:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d102      	bne.n	8001124 <HAL_RCC_OscConfig+0xb10>
 800111e:	4b58      	ldr	r3, [pc, #352]	@ (8001280 <HAL_RCC_OscConfig+0xc6c>)
 8001120:	6a1b      	ldr	r3, [r3, #32]
 8001122:	e013      	b.n	800114c <HAL_RCC_OscConfig+0xb38>
 8001124:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001128:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800112c:	2202      	movs	r2, #2
 800112e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001130:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001134:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	fa93 f2a3 	rbit	r2, r3
 800113e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001142:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	4b4d      	ldr	r3, [pc, #308]	@ (8001280 <HAL_RCC_OscConfig+0xc6c>)
 800114a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800114c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001150:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001154:	2102      	movs	r1, #2
 8001156:	6011      	str	r1, [r2, #0]
 8001158:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800115c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001160:	6812      	ldr	r2, [r2, #0]
 8001162:	fa92 f1a2 	rbit	r1, r2
 8001166:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800116a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800116e:	6011      	str	r1, [r2, #0]
  return result;
 8001170:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001174:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001178:	6812      	ldr	r2, [r2, #0]
 800117a:	fab2 f282 	clz	r2, r2
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	f002 021f 	and.w	r2, r2, #31
 800118a:	2101      	movs	r1, #1
 800118c:	fa01 f202 	lsl.w	r2, r1, r2
 8001190:	4013      	ands	r3, r2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d186      	bne.n	80010a4 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001196:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800119a:	2b01      	cmp	r3, #1
 800119c:	d105      	bne.n	80011aa <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800119e:	4b38      	ldr	r3, [pc, #224]	@ (8001280 <HAL_RCC_OscConfig+0xc6c>)
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	4a37      	ldr	r2, [pc, #220]	@ (8001280 <HAL_RCC_OscConfig+0xc6c>)
 80011a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011a8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f000 8232 	beq.w	8001620 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011bc:	4b30      	ldr	r3, [pc, #192]	@ (8001280 <HAL_RCC_OscConfig+0xc6c>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 030c 	and.w	r3, r3, #12
 80011c4:	2b08      	cmp	r3, #8
 80011c6:	f000 8201 	beq.w	80015cc <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	f040 8157 	bne.w	800148a <HAL_RCC_OscConfig+0xe76>
 80011dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011e0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80011e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80011e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011ee:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	fa93 f2a3 	rbit	r2, r3
 80011f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011fc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001200:	601a      	str	r2, [r3, #0]
  return result;
 8001202:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001206:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800120a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800120c:	fab3 f383 	clz	r3, r3
 8001210:	b2db      	uxtb	r3, r3
 8001212:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001216:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	461a      	mov	r2, r3
 800121e:	2300      	movs	r3, #0
 8001220:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001222:	f7ff f905 	bl	8000430 <HAL_GetTick>
 8001226:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800122a:	e009      	b.n	8001240 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800122c:	f7ff f900 	bl	8000430 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e1f0      	b.n	8001622 <HAL_RCC_OscConfig+0x100e>
 8001240:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001244:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001248:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800124c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001252:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	fa93 f2a3 	rbit	r2, r3
 800125c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001260:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001264:	601a      	str	r2, [r3, #0]
  return result;
 8001266:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800126a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800126e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001270:	fab3 f383 	clz	r3, r3
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b3f      	cmp	r3, #63	@ 0x3f
 8001278:	d804      	bhi.n	8001284 <HAL_RCC_OscConfig+0xc70>
 800127a:	4b01      	ldr	r3, [pc, #4]	@ (8001280 <HAL_RCC_OscConfig+0xc6c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	e029      	b.n	80012d4 <HAL_RCC_OscConfig+0xcc0>
 8001280:	40021000 	.word	0x40021000
 8001284:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001288:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800128c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001290:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001292:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001296:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	fa93 f2a3 	rbit	r2, r3
 80012a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012a4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012ae:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80012b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012bc:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	fa93 f2a3 	rbit	r2, r3
 80012c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012ca:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	4bc3      	ldr	r3, [pc, #780]	@ (80015e0 <HAL_RCC_OscConfig+0xfcc>)
 80012d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80012d8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80012dc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80012e0:	6011      	str	r1, [r2, #0]
 80012e2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80012e6:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80012ea:	6812      	ldr	r2, [r2, #0]
 80012ec:	fa92 f1a2 	rbit	r1, r2
 80012f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80012f4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80012f8:	6011      	str	r1, [r2, #0]
  return result;
 80012fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80012fe:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001302:	6812      	ldr	r2, [r2, #0]
 8001304:	fab2 f282 	clz	r2, r2
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	f042 0220 	orr.w	r2, r2, #32
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	f002 021f 	and.w	r2, r2, #31
 8001314:	2101      	movs	r1, #1
 8001316:	fa01 f202 	lsl.w	r2, r1, r2
 800131a:	4013      	ands	r3, r2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d185      	bne.n	800122c <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001320:	4baf      	ldr	r3, [pc, #700]	@ (80015e0 <HAL_RCC_OscConfig+0xfcc>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001328:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800132c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001334:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001338:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	430b      	orrs	r3, r1
 8001342:	49a7      	ldr	r1, [pc, #668]	@ (80015e0 <HAL_RCC_OscConfig+0xfcc>)
 8001344:	4313      	orrs	r3, r2
 8001346:	604b      	str	r3, [r1, #4]
 8001348:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800134c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001350:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001354:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001356:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800135a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	fa93 f2a3 	rbit	r2, r3
 8001364:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001368:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800136c:	601a      	str	r2, [r3, #0]
  return result;
 800136e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001372:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001376:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001378:	fab3 f383 	clz	r3, r3
 800137c:	b2db      	uxtb	r3, r3
 800137e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001382:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	461a      	mov	r2, r3
 800138a:	2301      	movs	r3, #1
 800138c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138e:	f7ff f84f 	bl	8000430 <HAL_GetTick>
 8001392:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001396:	e009      	b.n	80013ac <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001398:	f7ff f84a 	bl	8000430 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e13a      	b.n	8001622 <HAL_RCC_OscConfig+0x100e>
 80013ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013b0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80013b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80013b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013be:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	fa93 f2a3 	rbit	r2, r3
 80013c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013cc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80013d0:	601a      	str	r2, [r3, #0]
  return result;
 80013d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013d6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80013da:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013dc:	fab3 f383 	clz	r3, r3
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80013e4:	d802      	bhi.n	80013ec <HAL_RCC_OscConfig+0xdd8>
 80013e6:	4b7e      	ldr	r3, [pc, #504]	@ (80015e0 <HAL_RCC_OscConfig+0xfcc>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	e027      	b.n	800143c <HAL_RCC_OscConfig+0xe28>
 80013ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013f0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80013f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80013f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013fe:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	fa93 f2a3 	rbit	r2, r3
 8001408:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800140c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001416:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800141a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001424:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	fa93 f2a3 	rbit	r2, r3
 800142e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001432:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	4b69      	ldr	r3, [pc, #420]	@ (80015e0 <HAL_RCC_OscConfig+0xfcc>)
 800143a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800143c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001440:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001444:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001448:	6011      	str	r1, [r2, #0]
 800144a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800144e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	fa92 f1a2 	rbit	r1, r2
 8001458:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800145c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001460:	6011      	str	r1, [r2, #0]
  return result;
 8001462:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001466:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800146a:	6812      	ldr	r2, [r2, #0]
 800146c:	fab2 f282 	clz	r2, r2
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	f042 0220 	orr.w	r2, r2, #32
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	f002 021f 	and.w	r2, r2, #31
 800147c:	2101      	movs	r1, #1
 800147e:	fa01 f202 	lsl.w	r2, r1, r2
 8001482:	4013      	ands	r3, r2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d087      	beq.n	8001398 <HAL_RCC_OscConfig+0xd84>
 8001488:	e0ca      	b.n	8001620 <HAL_RCC_OscConfig+0x100c>
 800148a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800148e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001492:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001496:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001498:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800149c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	fa93 f2a3 	rbit	r2, r3
 80014a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014aa:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80014ae:	601a      	str	r2, [r3, #0]
  return result;
 80014b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014b4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80014b8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ba:	fab3 f383 	clz	r3, r3
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80014c4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	461a      	mov	r2, r3
 80014cc:	2300      	movs	r3, #0
 80014ce:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d0:	f7fe ffae 	bl	8000430 <HAL_GetTick>
 80014d4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014d8:	e009      	b.n	80014ee <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014da:	f7fe ffa9 	bl	8000430 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e099      	b.n	8001622 <HAL_RCC_OscConfig+0x100e>
 80014ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014f2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80014f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001500:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	fa93 f2a3 	rbit	r2, r3
 800150a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800150e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001512:	601a      	str	r2, [r3, #0]
  return result;
 8001514:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001518:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800151c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800151e:	fab3 f383 	clz	r3, r3
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b3f      	cmp	r3, #63	@ 0x3f
 8001526:	d802      	bhi.n	800152e <HAL_RCC_OscConfig+0xf1a>
 8001528:	4b2d      	ldr	r3, [pc, #180]	@ (80015e0 <HAL_RCC_OscConfig+0xfcc>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	e027      	b.n	800157e <HAL_RCC_OscConfig+0xf6a>
 800152e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001532:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001536:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800153a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001540:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	fa93 f2a3 	rbit	r2, r3
 800154a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800154e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001558:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800155c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001566:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	fa93 f2a3 	rbit	r2, r3
 8001570:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001574:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	4b19      	ldr	r3, [pc, #100]	@ (80015e0 <HAL_RCC_OscConfig+0xfcc>)
 800157c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001582:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001586:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800158a:	6011      	str	r1, [r2, #0]
 800158c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001590:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001594:	6812      	ldr	r2, [r2, #0]
 8001596:	fa92 f1a2 	rbit	r1, r2
 800159a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800159e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80015a2:	6011      	str	r1, [r2, #0]
  return result;
 80015a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80015a8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80015ac:	6812      	ldr	r2, [r2, #0]
 80015ae:	fab2 f282 	clz	r2, r2
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	f042 0220 	orr.w	r2, r2, #32
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	f002 021f 	and.w	r2, r2, #31
 80015be:	2101      	movs	r1, #1
 80015c0:	fa01 f202 	lsl.w	r2, r1, r2
 80015c4:	4013      	ands	r3, r2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d187      	bne.n	80014da <HAL_RCC_OscConfig+0xec6>
 80015ca:	e029      	b.n	8001620 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	69db      	ldr	r3, [r3, #28]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d103      	bne.n	80015e4 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e020      	b.n	8001622 <HAL_RCC_OscConfig+0x100e>
 80015e0:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015e4:	4b11      	ldr	r3, [pc, #68]	@ (800162c <HAL_RCC_OscConfig+0x1018>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80015ec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80015f0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80015f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	429a      	cmp	r2, r3
 8001602:	d10b      	bne.n	800161c <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001604:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001608:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800160c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001610:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001618:	429a      	cmp	r2, r3
 800161a:	d001      	beq.n	8001620 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e000      	b.n	8001622 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40021000 	.word	0x40021000

08001630 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b09e      	sub	sp, #120	@ 0x78
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800163a:	2300      	movs	r3, #0
 800163c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e154      	b.n	80018f2 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001648:	4b89      	ldr	r3, [pc, #548]	@ (8001870 <HAL_RCC_ClockConfig+0x240>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0307 	and.w	r3, r3, #7
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	d910      	bls.n	8001678 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001656:	4b86      	ldr	r3, [pc, #536]	@ (8001870 <HAL_RCC_ClockConfig+0x240>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f023 0207 	bic.w	r2, r3, #7
 800165e:	4984      	ldr	r1, [pc, #528]	@ (8001870 <HAL_RCC_ClockConfig+0x240>)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	4313      	orrs	r3, r2
 8001664:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001666:	4b82      	ldr	r3, [pc, #520]	@ (8001870 <HAL_RCC_ClockConfig+0x240>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	429a      	cmp	r2, r3
 8001672:	d001      	beq.n	8001678 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e13c      	b.n	80018f2 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d008      	beq.n	8001696 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001684:	4b7b      	ldr	r3, [pc, #492]	@ (8001874 <HAL_RCC_ClockConfig+0x244>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	4978      	ldr	r1, [pc, #480]	@ (8001874 <HAL_RCC_ClockConfig+0x244>)
 8001692:	4313      	orrs	r3, r2
 8001694:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 80cd 	beq.w	800183e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d137      	bne.n	800171c <HAL_RCC_ClockConfig+0xec>
 80016ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80016b4:	fa93 f3a3 	rbit	r3, r3
 80016b8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80016ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016bc:	fab3 f383 	clz	r3, r3
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b3f      	cmp	r3, #63	@ 0x3f
 80016c4:	d802      	bhi.n	80016cc <HAL_RCC_ClockConfig+0x9c>
 80016c6:	4b6b      	ldr	r3, [pc, #428]	@ (8001874 <HAL_RCC_ClockConfig+0x244>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	e00f      	b.n	80016ec <HAL_RCC_ClockConfig+0xbc>
 80016cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80016d4:	fa93 f3a3 	rbit	r3, r3
 80016d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80016da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016de:	663b      	str	r3, [r7, #96]	@ 0x60
 80016e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80016e2:	fa93 f3a3 	rbit	r3, r3
 80016e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80016e8:	4b62      	ldr	r3, [pc, #392]	@ (8001874 <HAL_RCC_ClockConfig+0x244>)
 80016ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016f0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80016f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80016f4:	fa92 f2a2 	rbit	r2, r2
 80016f8:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80016fa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80016fc:	fab2 f282 	clz	r2, r2
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	f042 0220 	orr.w	r2, r2, #32
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	f002 021f 	and.w	r2, r2, #31
 800170c:	2101      	movs	r1, #1
 800170e:	fa01 f202 	lsl.w	r2, r1, r2
 8001712:	4013      	ands	r3, r2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d171      	bne.n	80017fc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e0ea      	b.n	80018f2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b02      	cmp	r3, #2
 8001722:	d137      	bne.n	8001794 <HAL_RCC_ClockConfig+0x164>
 8001724:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001728:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800172c:	fa93 f3a3 	rbit	r3, r3
 8001730:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001732:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001734:	fab3 f383 	clz	r3, r3
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b3f      	cmp	r3, #63	@ 0x3f
 800173c:	d802      	bhi.n	8001744 <HAL_RCC_ClockConfig+0x114>
 800173e:	4b4d      	ldr	r3, [pc, #308]	@ (8001874 <HAL_RCC_ClockConfig+0x244>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	e00f      	b.n	8001764 <HAL_RCC_ClockConfig+0x134>
 8001744:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001748:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800174c:	fa93 f3a3 	rbit	r3, r3
 8001750:	647b      	str	r3, [r7, #68]	@ 0x44
 8001752:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001756:	643b      	str	r3, [r7, #64]	@ 0x40
 8001758:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800175a:	fa93 f3a3 	rbit	r3, r3
 800175e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001760:	4b44      	ldr	r3, [pc, #272]	@ (8001874 <HAL_RCC_ClockConfig+0x244>)
 8001762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001764:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001768:	63ba      	str	r2, [r7, #56]	@ 0x38
 800176a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800176c:	fa92 f2a2 	rbit	r2, r2
 8001770:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001772:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001774:	fab2 f282 	clz	r2, r2
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	f042 0220 	orr.w	r2, r2, #32
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	f002 021f 	and.w	r2, r2, #31
 8001784:	2101      	movs	r1, #1
 8001786:	fa01 f202 	lsl.w	r2, r1, r2
 800178a:	4013      	ands	r3, r2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d135      	bne.n	80017fc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e0ae      	b.n	80018f2 <HAL_RCC_ClockConfig+0x2c2>
 8001794:	2302      	movs	r3, #2
 8001796:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800179a:	fa93 f3a3 	rbit	r3, r3
 800179e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80017a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a2:	fab3 f383 	clz	r3, r3
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b3f      	cmp	r3, #63	@ 0x3f
 80017aa:	d802      	bhi.n	80017b2 <HAL_RCC_ClockConfig+0x182>
 80017ac:	4b31      	ldr	r3, [pc, #196]	@ (8001874 <HAL_RCC_ClockConfig+0x244>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	e00d      	b.n	80017ce <HAL_RCC_ClockConfig+0x19e>
 80017b2:	2302      	movs	r3, #2
 80017b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017b8:	fa93 f3a3 	rbit	r3, r3
 80017bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80017be:	2302      	movs	r3, #2
 80017c0:	623b      	str	r3, [r7, #32]
 80017c2:	6a3b      	ldr	r3, [r7, #32]
 80017c4:	fa93 f3a3 	rbit	r3, r3
 80017c8:	61fb      	str	r3, [r7, #28]
 80017ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001874 <HAL_RCC_ClockConfig+0x244>)
 80017cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ce:	2202      	movs	r2, #2
 80017d0:	61ba      	str	r2, [r7, #24]
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	fa92 f2a2 	rbit	r2, r2
 80017d8:	617a      	str	r2, [r7, #20]
  return result;
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	fab2 f282 	clz	r2, r2
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	f042 0220 	orr.w	r2, r2, #32
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	f002 021f 	and.w	r2, r2, #31
 80017ec:	2101      	movs	r1, #1
 80017ee:	fa01 f202 	lsl.w	r2, r1, r2
 80017f2:	4013      	ands	r3, r2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e07a      	b.n	80018f2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001874 <HAL_RCC_ClockConfig+0x244>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f023 0203 	bic.w	r2, r3, #3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	491a      	ldr	r1, [pc, #104]	@ (8001874 <HAL_RCC_ClockConfig+0x244>)
 800180a:	4313      	orrs	r3, r2
 800180c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800180e:	f7fe fe0f 	bl	8000430 <HAL_GetTick>
 8001812:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001814:	e00a      	b.n	800182c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001816:	f7fe fe0b 	bl	8000430 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001824:	4293      	cmp	r3, r2
 8001826:	d901      	bls.n	800182c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e062      	b.n	80018f2 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182c:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <HAL_RCC_ClockConfig+0x244>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 020c 	and.w	r2, r3, #12
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	429a      	cmp	r2, r3
 800183c:	d1eb      	bne.n	8001816 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800183e:	4b0c      	ldr	r3, [pc, #48]	@ (8001870 <HAL_RCC_ClockConfig+0x240>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	d215      	bcs.n	8001878 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184c:	4b08      	ldr	r3, [pc, #32]	@ (8001870 <HAL_RCC_ClockConfig+0x240>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f023 0207 	bic.w	r2, r3, #7
 8001854:	4906      	ldr	r1, [pc, #24]	@ (8001870 <HAL_RCC_ClockConfig+0x240>)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	4313      	orrs	r3, r2
 800185a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800185c:	4b04      	ldr	r3, [pc, #16]	@ (8001870 <HAL_RCC_ClockConfig+0x240>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d006      	beq.n	8001878 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e041      	b.n	80018f2 <HAL_RCC_ClockConfig+0x2c2>
 800186e:	bf00      	nop
 8001870:	40022000 	.word	0x40022000
 8001874:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b00      	cmp	r3, #0
 8001882:	d008      	beq.n	8001896 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001884:	4b1d      	ldr	r3, [pc, #116]	@ (80018fc <HAL_RCC_ClockConfig+0x2cc>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	491a      	ldr	r1, [pc, #104]	@ (80018fc <HAL_RCC_ClockConfig+0x2cc>)
 8001892:	4313      	orrs	r3, r2
 8001894:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d009      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018a2:	4b16      	ldr	r3, [pc, #88]	@ (80018fc <HAL_RCC_ClockConfig+0x2cc>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	4912      	ldr	r1, [pc, #72]	@ (80018fc <HAL_RCC_ClockConfig+0x2cc>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018b6:	f000 f829 	bl	800190c <HAL_RCC_GetSysClockFreq>
 80018ba:	4601      	mov	r1, r0
 80018bc:	4b0f      	ldr	r3, [pc, #60]	@ (80018fc <HAL_RCC_ClockConfig+0x2cc>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018c4:	22f0      	movs	r2, #240	@ 0xf0
 80018c6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	fa92 f2a2 	rbit	r2, r2
 80018ce:	60fa      	str	r2, [r7, #12]
  return result;
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	fab2 f282 	clz	r2, r2
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	40d3      	lsrs	r3, r2
 80018da:	4a09      	ldr	r2, [pc, #36]	@ (8001900 <HAL_RCC_ClockConfig+0x2d0>)
 80018dc:	5cd3      	ldrb	r3, [r2, r3]
 80018de:	fa21 f303 	lsr.w	r3, r1, r3
 80018e2:	4a08      	ldr	r2, [pc, #32]	@ (8001904 <HAL_RCC_ClockConfig+0x2d4>)
 80018e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80018e6:	4b08      	ldr	r3, [pc, #32]	@ (8001908 <HAL_RCC_ClockConfig+0x2d8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fd5c 	bl	80003a8 <HAL_InitTick>
  
  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3778      	adds	r7, #120	@ 0x78
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40021000 	.word	0x40021000
 8001900:	08001a24 	.word	0x08001a24
 8001904:	20000000 	.word	0x20000000
 8001908:	20000004 	.word	0x20000004

0800190c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800190c:	b480      	push	{r7}
 800190e:	b087      	sub	sp, #28
 8001910:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	2300      	movs	r3, #0
 8001920:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001926:	4b1e      	ldr	r3, [pc, #120]	@ (80019a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f003 030c 	and.w	r3, r3, #12
 8001932:	2b04      	cmp	r3, #4
 8001934:	d002      	beq.n	800193c <HAL_RCC_GetSysClockFreq+0x30>
 8001936:	2b08      	cmp	r3, #8
 8001938:	d003      	beq.n	8001942 <HAL_RCC_GetSysClockFreq+0x36>
 800193a:	e026      	b.n	800198a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800193c:	4b19      	ldr	r3, [pc, #100]	@ (80019a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800193e:	613b      	str	r3, [r7, #16]
      break;
 8001940:	e026      	b.n	8001990 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	0c9b      	lsrs	r3, r3, #18
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	4a17      	ldr	r2, [pc, #92]	@ (80019a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800194c:	5cd3      	ldrb	r3, [r2, r3]
 800194e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8001950:	4b13      	ldr	r3, [pc, #76]	@ (80019a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001954:	f003 030f 	and.w	r3, r3, #15
 8001958:	4a14      	ldr	r2, [pc, #80]	@ (80019ac <HAL_RCC_GetSysClockFreq+0xa0>)
 800195a:	5cd3      	ldrb	r3, [r2, r3]
 800195c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d008      	beq.n	800197a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001968:	4a0e      	ldr	r2, [pc, #56]	@ (80019a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	fb02 f303 	mul.w	r3, r2, r3
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	e004      	b.n	8001984 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a0c      	ldr	r2, [pc, #48]	@ (80019b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800197e:	fb02 f303 	mul.w	r3, r2, r3
 8001982:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	613b      	str	r3, [r7, #16]
      break;
 8001988:	e002      	b.n	8001990 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800198a:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800198c:	613b      	str	r3, [r7, #16]
      break;
 800198e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001990:	693b      	ldr	r3, [r7, #16]
}
 8001992:	4618      	mov	r0, r3
 8001994:	371c      	adds	r7, #28
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40021000 	.word	0x40021000
 80019a4:	007a1200 	.word	0x007a1200
 80019a8:	08001a34 	.word	0x08001a34
 80019ac:	08001a44 	.word	0x08001a44
 80019b0:	003d0900 	.word	0x003d0900

080019b4 <memset>:
 80019b4:	4402      	add	r2, r0
 80019b6:	4603      	mov	r3, r0
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d100      	bne.n	80019be <memset+0xa>
 80019bc:	4770      	bx	lr
 80019be:	f803 1b01 	strb.w	r1, [r3], #1
 80019c2:	e7f9      	b.n	80019b8 <memset+0x4>

080019c4 <__libc_init_array>:
 80019c4:	b570      	push	{r4, r5, r6, lr}
 80019c6:	4d0d      	ldr	r5, [pc, #52]	@ (80019fc <__libc_init_array+0x38>)
 80019c8:	4c0d      	ldr	r4, [pc, #52]	@ (8001a00 <__libc_init_array+0x3c>)
 80019ca:	1b64      	subs	r4, r4, r5
 80019cc:	10a4      	asrs	r4, r4, #2
 80019ce:	2600      	movs	r6, #0
 80019d0:	42a6      	cmp	r6, r4
 80019d2:	d109      	bne.n	80019e8 <__libc_init_array+0x24>
 80019d4:	4d0b      	ldr	r5, [pc, #44]	@ (8001a04 <__libc_init_array+0x40>)
 80019d6:	4c0c      	ldr	r4, [pc, #48]	@ (8001a08 <__libc_init_array+0x44>)
 80019d8:	f000 f818 	bl	8001a0c <_init>
 80019dc:	1b64      	subs	r4, r4, r5
 80019de:	10a4      	asrs	r4, r4, #2
 80019e0:	2600      	movs	r6, #0
 80019e2:	42a6      	cmp	r6, r4
 80019e4:	d105      	bne.n	80019f2 <__libc_init_array+0x2e>
 80019e6:	bd70      	pop	{r4, r5, r6, pc}
 80019e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80019ec:	4798      	blx	r3
 80019ee:	3601      	adds	r6, #1
 80019f0:	e7ee      	b.n	80019d0 <__libc_init_array+0xc>
 80019f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80019f6:	4798      	blx	r3
 80019f8:	3601      	adds	r6, #1
 80019fa:	e7f2      	b.n	80019e2 <__libc_init_array+0x1e>
 80019fc:	08001a54 	.word	0x08001a54
 8001a00:	08001a54 	.word	0x08001a54
 8001a04:	08001a54 	.word	0x08001a54
 8001a08:	08001a58 	.word	0x08001a58

08001a0c <_init>:
 8001a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a0e:	bf00      	nop
 8001a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a12:	bc08      	pop	{r3}
 8001a14:	469e      	mov	lr, r3
 8001a16:	4770      	bx	lr

08001a18 <_fini>:
 8001a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a1a:	bf00      	nop
 8001a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a1e:	bc08      	pop	{r3}
 8001a20:	469e      	mov	lr, r3
 8001a22:	4770      	bx	lr
