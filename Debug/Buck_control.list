
Buck_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e28  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004fbc  08004fbc  00005fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fec  08004fec  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004fec  08004fec  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004fec  08004fec  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fec  08004fec  00005fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ff0  08004ff0  00005ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004ff4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          00000150  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000015c  2000015c  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ca6d  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f28  00000000  00000000  00012aa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c90  00000000  00000000  000149d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ba  00000000  00000000  00015668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020524  00000000  00000000  00016022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000101b2  00000000  00000000  00036546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cac1f  00000000  00000000  000466f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00111317  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000034bc  00000000  00000000  0011135c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  00114818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004fa4 	.word	0x08004fa4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004fa4 	.word	0x08004fa4

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	Buck.setPoint = BUCK_SETPOINT;
 80001d8:	4b21      	ldr	r3, [pc, #132]	@ (8000260 <main+0x8c>)
 80001da:	4a22      	ldr	r2, [pc, #136]	@ (8000264 <main+0x90>)
 80001dc:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001de:	f000 fc95 	bl	8000b0c <HAL_Init>

  /* USER CODE BEGIN Init */

  // Calibrate The ADC On Power-Up For Better Accuracy
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80001e2:	2100      	movs	r1, #0
 80001e4:	4820      	ldr	r0, [pc, #128]	@ (8000268 <main+0x94>)
 80001e6:	f001 f845 	bl	8001274 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) internalAdcRawData, 4);
 80001ea:	2204      	movs	r2, #4
 80001ec:	491f      	ldr	r1, [pc, #124]	@ (800026c <main+0x98>)
 80001ee:	481e      	ldr	r0, [pc, #120]	@ (8000268 <main+0x94>)
 80001f0:	f000 ff24 	bl	800103c <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80001f4:	210c      	movs	r1, #12
 80001f6:	481e      	ldr	r0, [pc, #120]	@ (8000270 <main+0x9c>)
 80001f8:	f003 fec2 	bl	8003f80 <HAL_TIM_PWM_Start>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001fc:	f000 f840 	bl	8000280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000200:	f000 f9d0 	bl	80005a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000204:	f000 f9b0 	bl	8000568 <MX_DMA_Init>
  MX_ADC1_Init();
 8000208:	f000 f89c 	bl	8000344 <MX_ADC1_Init>
  MX_TIM3_Init();
 800020c:	f000 f934 	bl	8000478 <MX_TIM3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  dutyCycle = PID_run(&pid, Buck.Vout, Buck.setPoint);
 8000210:	4b13      	ldr	r3, [pc, #76]	@ (8000260 <main+0x8c>)
 8000212:	edd3 7a01 	vldr	s15, [r3, #4]
 8000216:	4b12      	ldr	r3, [pc, #72]	@ (8000260 <main+0x8c>)
 8000218:	ed93 7a02 	vldr	s14, [r3, #8]
 800021c:	eef0 0a47 	vmov.f32	s1, s14
 8000220:	eeb0 0a67 	vmov.f32	s0, s15
 8000224:	4813      	ldr	r0, [pc, #76]	@ (8000274 <main+0xa0>)
 8000226:	f000 fa0f 	bl	8000648 <PID_run>
 800022a:	eef0 7a40 	vmov.f32	s15, s0
 800022e:	4b12      	ldr	r3, [pc, #72]	@ (8000278 <main+0xa4>)
 8000230:	edc3 7a00 	vstr	s15, [r3]
	  TIM3->CCR1 = (uint32_t) (htim3.Init.Period * dutyCycle);
 8000234:	4b0e      	ldr	r3, [pc, #56]	@ (8000270 <main+0x9c>)
 8000236:	68db      	ldr	r3, [r3, #12]
 8000238:	ee07 3a90 	vmov	s15, r3
 800023c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000240:	4b0d      	ldr	r3, [pc, #52]	@ (8000278 <main+0xa4>)
 8000242:	edd3 7a00 	vldr	s15, [r3]
 8000246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800024a:	4b0c      	ldr	r3, [pc, #48]	@ (800027c <main+0xa8>)
 800024c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000250:	ee17 2a90 	vmov	r2, s15
 8000254:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_Delay(100);
 8000256:	2064      	movs	r0, #100	@ 0x64
 8000258:	f000 fcbe 	bl	8000bd8 <HAL_Delay>
	  dutyCycle = PID_run(&pid, Buck.Vout, Buck.setPoint);
 800025c:	bf00      	nop
 800025e:	e7d7      	b.n	8000210 <main+0x3c>
 8000260:	20000140 	.word	0x20000140
 8000264:	40a00000 	.word	0x40a00000
 8000268:	20000028 	.word	0x20000028
 800026c:	2000014c 	.word	0x2000014c
 8000270:	200000bc 	.word	0x200000bc
 8000274:	20000108 	.word	0x20000108
 8000278:	20000154 	.word	0x20000154
 800027c:	40000400 	.word	0x40000400

08000280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b0a6      	sub	sp, #152	@ 0x98
 8000284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000286:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800028a:	2228      	movs	r2, #40	@ 0x28
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f004 fe5c 	bl	8004f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000294:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000298:	2200      	movs	r2, #0
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	605a      	str	r2, [r3, #4]
 800029e:	609a      	str	r2, [r3, #8]
 80002a0:	60da      	str	r2, [r3, #12]
 80002a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	2258      	movs	r2, #88	@ 0x58
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f004 fe4e 	bl	8004f4c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b0:	2302      	movs	r3, #2
 80002b2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b4:	2301      	movs	r3, #1
 80002b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b8:	2310      	movs	r3, #16
 80002ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002be:	2302      	movs	r3, #2
 80002c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80002c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80002cc:	2300      	movs	r3, #0
 80002ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80002dc:	4618      	mov	r0, r3
 80002de:	f002 f995 	bl	800260c <HAL_RCC_OscConfig>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80002e8:	f000 fa95 	bl	8000816 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ec:	230f      	movs	r3, #15
 80002ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002f0:	2300      	movs	r3, #0
 80002f2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f4:	2300      	movs	r3, #0
 80002f6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000300:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f003 f9a4 	bl	8003654 <HAL_RCC_ClockConfig>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000312:	f000 fa80 	bl	8000816 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM34;
 8000316:	4b0a      	ldr	r3, [pc, #40]	@ (8000340 <SystemClock_Config+0xc0>)
 8000318:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800031a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800031e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000320:	2300      	movs	r3, #0
 8000322:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	4618      	mov	r0, r3
 8000328:	f003 fb56 	bl	80039d8 <HAL_RCCEx_PeriphCLKConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000332:	f000 fa70 	bl	8000816 <Error_Handler>
  }
}
 8000336:	bf00      	nop
 8000338:	3798      	adds	r7, #152	@ 0x98
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	00200080 	.word	0x00200080

08000344 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b08a      	sub	sp, #40	@ 0x28
 8000348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800034a:	f107 031c 	add.w	r3, r7, #28
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	2200      	movs	r2, #0
 800035a:	601a      	str	r2, [r3, #0]
 800035c:	605a      	str	r2, [r3, #4]
 800035e:	609a      	str	r2, [r3, #8]
 8000360:	60da      	str	r2, [r3, #12]
 8000362:	611a      	str	r2, [r3, #16]
 8000364:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000366:	4b43      	ldr	r3, [pc, #268]	@ (8000474 <MX_ADC1_Init+0x130>)
 8000368:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800036c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800036e:	4b41      	ldr	r3, [pc, #260]	@ (8000474 <MX_ADC1_Init+0x130>)
 8000370:	2200      	movs	r2, #0
 8000372:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000374:	4b3f      	ldr	r3, [pc, #252]	@ (8000474 <MX_ADC1_Init+0x130>)
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800037a:	4b3e      	ldr	r3, [pc, #248]	@ (8000474 <MX_ADC1_Init+0x130>)
 800037c:	2201      	movs	r2, #1
 800037e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000380:	4b3c      	ldr	r3, [pc, #240]	@ (8000474 <MX_ADC1_Init+0x130>)
 8000382:	2201      	movs	r2, #1
 8000384:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000386:	4b3b      	ldr	r3, [pc, #236]	@ (8000474 <MX_ADC1_Init+0x130>)
 8000388:	2200      	movs	r2, #0
 800038a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800038e:	4b39      	ldr	r3, [pc, #228]	@ (8000474 <MX_ADC1_Init+0x130>)
 8000390:	2200      	movs	r2, #0
 8000392:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000394:	4b37      	ldr	r3, [pc, #220]	@ (8000474 <MX_ADC1_Init+0x130>)
 8000396:	2201      	movs	r2, #1
 8000398:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800039a:	4b36      	ldr	r3, [pc, #216]	@ (8000474 <MX_ADC1_Init+0x130>)
 800039c:	2200      	movs	r2, #0
 800039e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80003a0:	4b34      	ldr	r3, [pc, #208]	@ (8000474 <MX_ADC1_Init+0x130>)
 80003a2:	2204      	movs	r2, #4
 80003a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003a6:	4b33      	ldr	r3, [pc, #204]	@ (8000474 <MX_ADC1_Init+0x130>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003ae:	4b31      	ldr	r3, [pc, #196]	@ (8000474 <MX_ADC1_Init+0x130>)
 80003b0:	2204      	movs	r2, #4
 80003b2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003b4:	4b2f      	ldr	r3, [pc, #188]	@ (8000474 <MX_ADC1_Init+0x130>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003ba:	4b2e      	ldr	r3, [pc, #184]	@ (8000474 <MX_ADC1_Init+0x130>)
 80003bc:	2200      	movs	r2, #0
 80003be:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003c0:	482c      	ldr	r0, [pc, #176]	@ (8000474 <MX_ADC1_Init+0x130>)
 80003c2:	f000 fc41 	bl	8000c48 <HAL_ADC_Init>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80003cc:	f000 fa23 	bl	8000816 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003d0:	2300      	movs	r3, #0
 80003d2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003d4:	f107 031c 	add.w	r3, r7, #28
 80003d8:	4619      	mov	r1, r3
 80003da:	4826      	ldr	r0, [pc, #152]	@ (8000474 <MX_ADC1_Init+0x130>)
 80003dc:	f001 faa6 	bl	800192c <HAL_ADCEx_MultiModeConfigChannel>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80003e6:	f000 fa16 	bl	8000816 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003ea:	2301      	movs	r3, #1
 80003ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003ee:	2301      	movs	r3, #1
 80003f0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003f2:	2300      	movs	r3, #0
 80003f4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003f6:	2300      	movs	r3, #0
 80003f8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003fa:	2300      	movs	r3, #0
 80003fc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003fe:	2300      	movs	r3, #0
 8000400:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	4619      	mov	r1, r3
 8000406:	481b      	ldr	r0, [pc, #108]	@ (8000474 <MX_ADC1_Init+0x130>)
 8000408:	f000 ffa6 	bl	8001358 <HAL_ADC_ConfigChannel>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000412:	f000 fa00 	bl	8000816 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000416:	2302      	movs	r3, #2
 8000418:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800041a:	2302      	movs	r3, #2
 800041c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	4619      	mov	r1, r3
 8000422:	4814      	ldr	r0, [pc, #80]	@ (8000474 <MX_ADC1_Init+0x130>)
 8000424:	f000 ff98 	bl	8001358 <HAL_ADC_ConfigChannel>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800042e:	f000 f9f2 	bl	8000816 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000432:	2306      	movs	r3, #6
 8000434:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000436:	2303      	movs	r3, #3
 8000438:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	4619      	mov	r1, r3
 800043e:	480d      	ldr	r0, [pc, #52]	@ (8000474 <MX_ADC1_Init+0x130>)
 8000440:	f000 ff8a 	bl	8001358 <HAL_ADC_ConfigChannel>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 800044a:	f000 f9e4 	bl	8000816 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800044e:	2307      	movs	r3, #7
 8000450:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000452:	2304      	movs	r3, #4
 8000454:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	4619      	mov	r1, r3
 800045a:	4806      	ldr	r0, [pc, #24]	@ (8000474 <MX_ADC1_Init+0x130>)
 800045c:	f000 ff7c 	bl	8001358 <HAL_ADC_ConfigChannel>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8000466:	f000 f9d6 	bl	8000816 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800046a:	bf00      	nop
 800046c:	3728      	adds	r7, #40	@ 0x28
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	20000028 	.word	0x20000028

08000478 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b08e      	sub	sp, #56	@ 0x38
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800047e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800048c:	f107 031c 	add.w	r3, r7, #28
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
 8000494:	605a      	str	r2, [r3, #4]
 8000496:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000498:	463b      	mov	r3, r7
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	60da      	str	r2, [r3, #12]
 80004a4:	611a      	str	r2, [r3, #16]
 80004a6:	615a      	str	r2, [r3, #20]
 80004a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000560 <MX_TIM3_Init+0xe8>)
 80004ac:	4a2d      	ldr	r2, [pc, #180]	@ (8000564 <MX_TIM3_Init+0xec>)
 80004ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80004b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000560 <MX_TIM3_Init+0xe8>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004b6:	4b2a      	ldr	r3, [pc, #168]	@ (8000560 <MX_TIM3_Init+0xe8>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80004bc:	4b28      	ldr	r3, [pc, #160]	@ (8000560 <MX_TIM3_Init+0xe8>)
 80004be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80004c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004c4:	4b26      	ldr	r3, [pc, #152]	@ (8000560 <MX_TIM3_Init+0xe8>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ca:	4b25      	ldr	r3, [pc, #148]	@ (8000560 <MX_TIM3_Init+0xe8>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80004d0:	4823      	ldr	r0, [pc, #140]	@ (8000560 <MX_TIM3_Init+0xe8>)
 80004d2:	f003 fc9d 	bl	8003e10 <HAL_TIM_Base_Init>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80004dc:	f000 f99b 	bl	8000816 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80004e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004ea:	4619      	mov	r1, r3
 80004ec:	481c      	ldr	r0, [pc, #112]	@ (8000560 <MX_TIM3_Init+0xe8>)
 80004ee:	f003 ff67 	bl	80043c0 <HAL_TIM_ConfigClockSource>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80004f8:	f000 f98d 	bl	8000816 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80004fc:	4818      	ldr	r0, [pc, #96]	@ (8000560 <MX_TIM3_Init+0xe8>)
 80004fe:	f003 fcde 	bl	8003ebe <HAL_TIM_PWM_Init>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000508:	f000 f985 	bl	8000816 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800050c:	2300      	movs	r3, #0
 800050e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000510:	2300      	movs	r3, #0
 8000512:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000514:	f107 031c 	add.w	r3, r7, #28
 8000518:	4619      	mov	r1, r3
 800051a:	4811      	ldr	r0, [pc, #68]	@ (8000560 <MX_TIM3_Init+0xe8>)
 800051c:	f004 fc8a 	bl	8004e34 <HAL_TIMEx_MasterConfigSynchronization>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000526:	f000 f976 	bl	8000816 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800052a:	2360      	movs	r3, #96	@ 0x60
 800052c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800052e:	2300      	movs	r3, #0
 8000530:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000532:	2300      	movs	r3, #0
 8000534:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000536:	2300      	movs	r3, #0
 8000538:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800053a:	463b      	mov	r3, r7
 800053c:	220c      	movs	r2, #12
 800053e:	4619      	mov	r1, r3
 8000540:	4807      	ldr	r0, [pc, #28]	@ (8000560 <MX_TIM3_Init+0xe8>)
 8000542:	f003 fe29 	bl	8004198 <HAL_TIM_PWM_ConfigChannel>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800054c:	f000 f963 	bl	8000816 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000550:	4803      	ldr	r0, [pc, #12]	@ (8000560 <MX_TIM3_Init+0xe8>)
 8000552:	f000 fa2d 	bl	80009b0 <HAL_TIM_MspPostInit>

}
 8000556:	bf00      	nop
 8000558:	3738      	adds	r7, #56	@ 0x38
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	200000bc 	.word	0x200000bc
 8000564:	40000400 	.word	0x40000400

08000568 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800056e:	4b0c      	ldr	r3, [pc, #48]	@ (80005a0 <MX_DMA_Init+0x38>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	4a0b      	ldr	r2, [pc, #44]	@ (80005a0 <MX_DMA_Init+0x38>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6153      	str	r3, [r2, #20]
 800057a:	4b09      	ldr	r3, [pc, #36]	@ (80005a0 <MX_DMA_Init+0x38>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000586:	2200      	movs	r2, #0
 8000588:	2100      	movs	r1, #0
 800058a:	200b      	movs	r0, #11
 800058c:	f001 fccb 	bl	8001f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000590:	200b      	movs	r0, #11
 8000592:	f001 fce4 	bl	8001f5e <HAL_NVIC_EnableIRQ>

}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40021000 	.word	0x40021000

080005a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005aa:	4b0f      	ldr	r3, [pc, #60]	@ (80005e8 <MX_GPIO_Init+0x44>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	4a0e      	ldr	r2, [pc, #56]	@ (80005e8 <MX_GPIO_Init+0x44>)
 80005b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80005b4:	6153      	str	r3, [r2, #20]
 80005b6:	4b0c      	ldr	r3, [pc, #48]	@ (80005e8 <MX_GPIO_Init+0x44>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	4b09      	ldr	r3, [pc, #36]	@ (80005e8 <MX_GPIO_Init+0x44>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	4a08      	ldr	r2, [pc, #32]	@ (80005e8 <MX_GPIO_Init+0x44>)
 80005c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005cc:	6153      	str	r3, [r2, #20]
 80005ce:	4b06      	ldr	r3, [pc, #24]	@ (80005e8 <MX_GPIO_Init+0x44>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	40021000 	.word	0x40021000

080005ec <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN 4 */
/**
 * @brief Internal ADC Conversion Complete callback
 * @retval None
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	Buck.Vin = internalAdcRawData[0] * VIN_SCALE;
 80005f4:	4b11      	ldr	r3, [pc, #68]	@ (800063c <HAL_ADC_ConvCpltCallback+0x50>)
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	4a11      	ldr	r2, [pc, #68]	@ (8000640 <HAL_ADC_ConvCpltCallback+0x54>)
 80005fa:	fb82 1203 	smull	r1, r2, r2, r3
 80005fe:	1092      	asrs	r2, r2, #2
 8000600:	17db      	asrs	r3, r3, #31
 8000602:	1ad3      	subs	r3, r2, r3
 8000604:	ee07 3a90 	vmov	s15, r3
 8000608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800060c:	4b0d      	ldr	r3, [pc, #52]	@ (8000644 <HAL_ADC_ConvCpltCallback+0x58>)
 800060e:	edc3 7a00 	vstr	s15, [r3]
	Buck.Vout = internalAdcRawData[1] * VOUT_SCALE;
 8000612:	4b0a      	ldr	r3, [pc, #40]	@ (800063c <HAL_ADC_ConvCpltCallback+0x50>)
 8000614:	885b      	ldrh	r3, [r3, #2]
 8000616:	4a0a      	ldr	r2, [pc, #40]	@ (8000640 <HAL_ADC_ConvCpltCallback+0x54>)
 8000618:	fb82 1203 	smull	r1, r2, r2, r3
 800061c:	1092      	asrs	r2, r2, #2
 800061e:	17db      	asrs	r3, r3, #31
 8000620:	1ad3      	subs	r3, r2, r3
 8000622:	ee07 3a90 	vmov	s15, r3
 8000626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800062a:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <HAL_ADC_ConvCpltCallback+0x58>)
 800062c:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	2000014c 	.word	0x2000014c
 8000640:	66666667 	.word	0x66666667
 8000644:	20000140 	.word	0x20000140

08000648 <PID_run>:

float PID_run(PID *pid, float measurement, float setpoint)
{
 8000648:	b480      	push	{r7}
 800064a:	b089      	sub	sp, #36	@ 0x24
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	ed87 0a02 	vstr	s0, [r7, #8]
 8000654:	edc7 0a01 	vstr	s1, [r7, #4]
    float command;
    float command_sat;
    float deriv_filt;

    /* Error calculation */
    err = setpoint - measurement;
 8000658:	ed97 7a01 	vldr	s14, [r7, #4]
 800065c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000660:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000664:	edc7 7a06 	vstr	s15, [r7, #24]

    /* Integral term calculation - including anti-windup */
    pid->integral += pid->Ki*err*pid->T + pid->Kaw*(pid->command_sat_prev - pid->command_prev)*pid->T;
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	edd3 6a01 	vldr	s13, [r3, #4]
 8000674:	edd7 7a06 	vldr	s15, [r7, #24]
 8000678:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000682:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	ed93 6a03 	vldr	s12, [r3, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	edd3 5a0c 	vldr	s11, [r3, #48]	@ 0x30
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8000698:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800069c:	ee26 6a27 	vmul.f32	s12, s12, s15
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	edd3 7a05 	vldr	s15, [r3, #20]
 80006a6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80006aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80006ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    /* Derivative term calculation using filtered derivative method */
    deriv_filt = (err - pid->err_prev + pid->T_C*pid->deriv_prev)/(pid->T + pid->T_C);
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80006be:	ed97 7a06 	vldr	s14, [r7, #24]
 80006c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	edd3 6a04 	vldr	s13, [r3, #16]
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80006d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80006d6:	ee77 6a27 	vadd.f32	s13, s14, s15
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	ed93 7a05 	vldr	s14, [r3, #20]
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	edd3 7a04 	vldr	s15, [r3, #16]
 80006e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80006ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006ee:	edc7 7a05 	vstr	s15, [r7, #20]
    pid->err_prev = err;
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	69ba      	ldr	r2, [r7, #24]
 80006f6:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->deriv_prev = deriv_filt;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	697a      	ldr	r2, [r7, #20]
 80006fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Summing the 3 terms */
    command = pid->Kp*err + pid->integral + pid->Kd*deriv_filt;
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	ed93 7a00 	vldr	s14, [r3]
 8000704:	edd7 7a06 	vldr	s15, [r7, #24]
 8000708:	ee27 7a27 	vmul.f32	s14, s14, s15
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000712:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	edd3 6a02 	vldr	s13, [r3, #8]
 800071c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000720:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000724:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000728:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Remember command at previous step */
    pid->command_prev = command;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	693a      	ldr	r2, [r7, #16]
 8000730:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Saturate command */
    if (command > pid->max)
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	edd3 7a06 	vldr	s15, [r3, #24]
 8000738:	ed97 7a04 	vldr	s14, [r7, #16]
 800073c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000744:	dd03      	ble.n	800074e <PID_run+0x106>
    {
        command_sat = pid->max;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	61fb      	str	r3, [r7, #28]
 800074c:	e00f      	b.n	800076e <PID_run+0x126>
    }
    else if (command < pid->min)
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	edd3 7a07 	vldr	s15, [r3, #28]
 8000754:	ed97 7a04 	vldr	s14, [r7, #16]
 8000758:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800075c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000760:	d503      	bpl.n	800076a <PID_run+0x122>
    {
        command_sat = pid->min;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	61fb      	str	r3, [r7, #28]
 8000768:	e001      	b.n	800076e <PID_run+0x126>
    }
    else
    {
        command_sat = command;
 800076a:	693b      	ldr	r3, [r7, #16]
 800076c:	61fb      	str	r3, [r7, #28]
    }

    /* Apply rate limiter */
    if (command_sat > pid->command_sat_prev + pid->max_rate*pid->T)
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	edd3 6a08 	vldr	s13, [r3, #32]
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	edd3 7a05 	vldr	s15, [r3, #20]
 8000780:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000784:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000788:	ed97 7a07 	vldr	s14, [r7, #28]
 800078c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000794:	dd0f      	ble.n	80007b6 <PID_run+0x16e>
    {
        command_sat = pid->command_sat_prev + pid->max_rate*pid->T;
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	edd3 6a08 	vldr	s13, [r3, #32]
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	edd3 7a05 	vldr	s15, [r3, #20]
 80007a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007b0:	edc7 7a07 	vstr	s15, [r7, #28]
 80007b4:	e022      	b.n	80007fc <PID_run+0x1b4>
    }
    else if (command_sat < pid->command_sat_prev - pid->max_rate*pid->T)
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	edd3 6a08 	vldr	s13, [r3, #32]
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	edd3 7a05 	vldr	s15, [r3, #20]
 80007c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007d0:	ed97 7a07 	vldr	s14, [r7, #28]
 80007d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007dc:	d50e      	bpl.n	80007fc <PID_run+0x1b4>
    {
        command_sat = pid->command_sat_prev - pid->max_rate*pid->T;
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	edd3 6a08 	vldr	s13, [r3, #32]
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	edd3 7a05 	vldr	s15, [r3, #20]
 80007f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007f8:	edc7 7a07 	vstr	s15, [r7, #28]
    {
        /* No action */
    }

    /* Remember saturated command at previous step */
    pid->command_sat_prev = command_sat;
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	69fa      	ldr	r2, [r7, #28]
 8000800:	631a      	str	r2, [r3, #48]	@ 0x30

    return command_sat;
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	ee07 3a90 	vmov	s15, r3
}
 8000808:	eeb0 0a67 	vmov.f32	s0, s15
 800080c:	3724      	adds	r7, #36	@ 0x24
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr

08000816 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081a:	b672      	cpsid	i
}
 800081c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800081e:	bf00      	nop
 8000820:	e7fd      	b.n	800081e <Error_Handler+0x8>
	...

08000824 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <HAL_MspInit+0x44>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	4a0e      	ldr	r2, [pc, #56]	@ (8000868 <HAL_MspInit+0x44>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6193      	str	r3, [r2, #24]
 8000836:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <HAL_MspInit+0x44>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <HAL_MspInit+0x44>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	4a08      	ldr	r2, [pc, #32]	@ (8000868 <HAL_MspInit+0x44>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800084c:	61d3      	str	r3, [r2, #28]
 800084e:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <HAL_MspInit+0x44>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000

0800086c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	@ 0x28
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800088c:	d164      	bne.n	8000958 <HAL_ADC_MspInit+0xec>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800088e:	4b34      	ldr	r3, [pc, #208]	@ (8000960 <HAL_ADC_MspInit+0xf4>)
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	4a33      	ldr	r2, [pc, #204]	@ (8000960 <HAL_ADC_MspInit+0xf4>)
 8000894:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000898:	6153      	str	r3, [r2, #20]
 800089a:	4b31      	ldr	r3, [pc, #196]	@ (8000960 <HAL_ADC_MspInit+0xf4>)
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a6:	4b2e      	ldr	r3, [pc, #184]	@ (8000960 <HAL_ADC_MspInit+0xf4>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	4a2d      	ldr	r2, [pc, #180]	@ (8000960 <HAL_ADC_MspInit+0xf4>)
 80008ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80008b0:	6153      	str	r3, [r2, #20]
 80008b2:	4b2b      	ldr	r3, [pc, #172]	@ (8000960 <HAL_ADC_MspInit+0xf4>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b28      	ldr	r3, [pc, #160]	@ (8000960 <HAL_ADC_MspInit+0xf4>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	4a27      	ldr	r2, [pc, #156]	@ (8000960 <HAL_ADC_MspInit+0xf4>)
 80008c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008c8:	6153      	str	r3, [r2, #20]
 80008ca:	4b25      	ldr	r3, [pc, #148]	@ (8000960 <HAL_ADC_MspInit+0xf4>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008d6:	2303      	movs	r3, #3
 80008d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008da:	2303      	movs	r3, #3
 80008dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4619      	mov	r1, r3
 80008e8:	481e      	ldr	r0, [pc, #120]	@ (8000964 <HAL_ADC_MspInit+0xf8>)
 80008ea:	f001 fd05 	bl	80022f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008ee:	2303      	movs	r3, #3
 80008f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008f2:	2303      	movs	r3, #3
 80008f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000904:	f001 fcf8 	bl	80022f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000908:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <HAL_ADC_MspInit+0xfc>)
 800090a:	4a18      	ldr	r2, [pc, #96]	@ (800096c <HAL_ADC_MspInit+0x100>)
 800090c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800090e:	4b16      	ldr	r3, [pc, #88]	@ (8000968 <HAL_ADC_MspInit+0xfc>)
 8000910:	2200      	movs	r2, #0
 8000912:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000914:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <HAL_ADC_MspInit+0xfc>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800091a:	4b13      	ldr	r3, [pc, #76]	@ (8000968 <HAL_ADC_MspInit+0xfc>)
 800091c:	2280      	movs	r2, #128	@ 0x80
 800091e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000920:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <HAL_ADC_MspInit+0xfc>)
 8000922:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000926:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000928:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <HAL_ADC_MspInit+0xfc>)
 800092a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800092e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000930:	4b0d      	ldr	r3, [pc, #52]	@ (8000968 <HAL_ADC_MspInit+0xfc>)
 8000932:	2200      	movs	r2, #0
 8000934:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000936:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <HAL_ADC_MspInit+0xfc>)
 8000938:	2200      	movs	r2, #0
 800093a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800093c:	480a      	ldr	r0, [pc, #40]	@ (8000968 <HAL_ADC_MspInit+0xfc>)
 800093e:	f001 fb28 	bl	8001f92 <HAL_DMA_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <HAL_ADC_MspInit+0xe0>
    {
      Error_Handler();
 8000948:	f7ff ff65 	bl	8000816 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a06      	ldr	r2, [pc, #24]	@ (8000968 <HAL_ADC_MspInit+0xfc>)
 8000950:	639a      	str	r2, [r3, #56]	@ 0x38
 8000952:	4a05      	ldr	r2, [pc, #20]	@ (8000968 <HAL_ADC_MspInit+0xfc>)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000958:	bf00      	nop
 800095a:	3728      	adds	r7, #40	@ 0x28
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40021000 	.word	0x40021000
 8000964:	48000800 	.word	0x48000800
 8000968:	20000078 	.word	0x20000078
 800096c:	40020008 	.word	0x40020008

08000970 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a0a      	ldr	r2, [pc, #40]	@ (80009a8 <HAL_TIM_Base_MspInit+0x38>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d10b      	bne.n	800099a <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000982:	4b0a      	ldr	r3, [pc, #40]	@ (80009ac <HAL_TIM_Base_MspInit+0x3c>)
 8000984:	69db      	ldr	r3, [r3, #28]
 8000986:	4a09      	ldr	r2, [pc, #36]	@ (80009ac <HAL_TIM_Base_MspInit+0x3c>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	61d3      	str	r3, [r2, #28]
 800098e:	4b07      	ldr	r3, [pc, #28]	@ (80009ac <HAL_TIM_Base_MspInit+0x3c>)
 8000990:	69db      	ldr	r3, [r3, #28]
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 800099a:	bf00      	nop
 800099c:	3714      	adds	r7, #20
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	40000400 	.word	0x40000400
 80009ac:	40021000 	.word	0x40021000

080009b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a11      	ldr	r2, [pc, #68]	@ (8000a14 <HAL_TIM_MspPostInit+0x64>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d11c      	bne.n	8000a0c <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <HAL_TIM_MspPostInit+0x68>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	4a10      	ldr	r2, [pc, #64]	@ (8000a18 <HAL_TIM_MspPostInit+0x68>)
 80009d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80009dc:	6153      	str	r3, [r2, #20]
 80009de:	4b0e      	ldr	r3, [pc, #56]	@ (8000a18 <HAL_TIM_MspPostInit+0x68>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80009fc:	2302      	movs	r3, #2
 80009fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	4619      	mov	r1, r3
 8000a06:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <HAL_TIM_MspPostInit+0x6c>)
 8000a08:	f001 fc76 	bl	80022f8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000a0c:	bf00      	nop
 8000a0e:	3720      	adds	r7, #32
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40000400 	.word	0x40000400
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	48000800 	.word	0x48000800

08000a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <NMI_Handler+0x4>

08000a28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <HardFault_Handler+0x4>

08000a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <MemManage_Handler+0x4>

08000a38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <BusFault_Handler+0x4>

08000a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <UsageFault_Handler+0x4>

08000a48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a76:	f000 f88f 	bl	8000b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
	...

08000a80 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a84:	4802      	ldr	r0, [pc, #8]	@ (8000a90 <DMA1_Channel1_IRQHandler+0x10>)
 8000a86:	f001 fb2a 	bl	80020de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000078 	.word	0x20000078

08000a94 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a98:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <SystemInit+0x20>)
 8000a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a9e:	4a05      	ldr	r2, [pc, #20]	@ (8000ab4 <SystemInit+0x20>)
 8000aa0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aa4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ab8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000af0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000abc:	f7ff ffea 	bl	8000a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac0:	480c      	ldr	r0, [pc, #48]	@ (8000af4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ac2:	490d      	ldr	r1, [pc, #52]	@ (8000af8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8000afc <LoopForever+0xe>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac8:	e002      	b.n	8000ad0 <LoopCopyDataInit>

08000aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ace:	3304      	adds	r3, #4

08000ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad4:	d3f9      	bcc.n	8000aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ad8:	4c0a      	ldr	r4, [pc, #40]	@ (8000b04 <LoopForever+0x16>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000adc:	e001      	b.n	8000ae2 <LoopFillZerobss>

08000ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae0:	3204      	adds	r2, #4

08000ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae4:	d3fb      	bcc.n	8000ade <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ae6:	f004 fa39 	bl	8004f5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aea:	f7ff fb73 	bl	80001d4 <main>

08000aee <LoopForever>:

LoopForever:
    b LoopForever
 8000aee:	e7fe      	b.n	8000aee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000af0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000afc:	08004ff4 	.word	0x08004ff4
  ldr r2, =_sbss
 8000b00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b04:	2000015c 	.word	0x2000015c

08000b08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b08:	e7fe      	b.n	8000b08 <ADC1_2_IRQHandler>
	...

08000b0c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b10:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <HAL_Init+0x28>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a07      	ldr	r2, [pc, #28]	@ (8000b34 <HAL_Init+0x28>)
 8000b16:	f043 0310 	orr.w	r3, r3, #16
 8000b1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	f001 f9f7 	bl	8001f10 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b22:	200f      	movs	r0, #15
 8000b24:	f000 f808 	bl	8000b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b28:	f7ff fe7c 	bl	8000824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40022000 	.word	0x40022000

08000b38 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b40:	4b12      	ldr	r3, [pc, #72]	@ (8000b8c <HAL_InitTick+0x54>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4b12      	ldr	r3, [pc, #72]	@ (8000b90 <HAL_InitTick+0x58>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b56:	4618      	mov	r0, r3
 8000b58:	f001 fa0f 	bl	8001f7a <HAL_SYSTICK_Config>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e00e      	b.n	8000b84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b0f      	cmp	r3, #15
 8000b6a:	d80a      	bhi.n	8000b82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	f001 f9d7 	bl	8001f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b78:	4a06      	ldr	r2, [pc, #24]	@ (8000b94 <HAL_InitTick+0x5c>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	e000      	b.n	8000b84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000000 	.word	0x20000000
 8000b90:	20000008 	.word	0x20000008
 8000b94:	20000004 	.word	0x20000004

08000b98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <HAL_IncTick+0x20>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <HAL_IncTick+0x24>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	4a04      	ldr	r2, [pc, #16]	@ (8000bbc <HAL_IncTick+0x24>)
 8000baa:	6013      	str	r3, [r2, #0]
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	20000008 	.word	0x20000008
 8000bbc:	20000158 	.word	0x20000158

08000bc0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000bc4:	4b03      	ldr	r3, [pc, #12]	@ (8000bd4 <HAL_GetTick+0x14>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	20000158 	.word	0x20000158

08000bd8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be0:	f7ff ffee 	bl	8000bc0 <HAL_GetTick>
 8000be4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf0:	d005      	beq.n	8000bfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8000c1c <HAL_Delay+0x44>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000bfe:	bf00      	nop
 8000c00:	f7ff ffde 	bl	8000bc0 <HAL_GetTick>
 8000c04:	4602      	mov	r2, r0
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	68fa      	ldr	r2, [r7, #12]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d8f7      	bhi.n	8000c00 <HAL_Delay+0x28>
  {
  }
}
 8000c10:	bf00      	nop
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000008 	.word	0x20000008

08000c20 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b09a      	sub	sp, #104	@ 0x68
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c50:	2300      	movs	r3, #0
 8000c52:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000c56:	2300      	movs	r3, #0
 8000c58:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d101      	bne.n	8000c68 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	e1e3      	b.n	8001030 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	691b      	ldr	r3, [r3, #16]
 8000c6c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c72:	f003 0310 	and.w	r3, r3, #16
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d176      	bne.n	8000d68 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d152      	bne.n	8000d28 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2200      	movs	r2, #0
 8000c86:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2200      	movs	r2, #0
 8000c92:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2200      	movs	r2, #0
 8000c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff fde5 	bl	800086c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d13b      	bne.n	8000d28 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f000 fff7 	bl	8001ca4 <ADC_Disable>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc0:	f003 0310 	and.w	r3, r3, #16
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d12f      	bne.n	8000d28 <HAL_ADC_Init+0xe0>
 8000cc8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d12b      	bne.n	8000d28 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000cd8:	f023 0302 	bic.w	r3, r3, #2
 8000cdc:	f043 0202 	orr.w	r2, r3, #2
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	689a      	ldr	r2, [r3, #8]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000cf2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	689a      	ldr	r2, [r3, #8]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000d02:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d04:	4b92      	ldr	r3, [pc, #584]	@ (8000f50 <HAL_ADC_Init+0x308>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a92      	ldr	r2, [pc, #584]	@ (8000f54 <HAL_ADC_Init+0x30c>)
 8000d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d0e:	0c9a      	lsrs	r2, r3, #18
 8000d10:	4613      	mov	r3, r2
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	4413      	add	r3, r2
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d1a:	e002      	b.n	8000d22 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d1f9      	bne.n	8000d1c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d007      	beq.n	8000d46 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000d40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000d44:	d110      	bne.n	8000d68 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4a:	f023 0312 	bic.w	r3, r3, #18
 8000d4e:	f043 0210 	orr.w	r2, r3, #16
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5a:	f043 0201 	orr.w	r2, r3, #1
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6c:	f003 0310 	and.w	r3, r3, #16
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	f040 8150 	bne.w	8001016 <HAL_ADC_Init+0x3ce>
 8000d76:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f040 814b 	bne.w	8001016 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f040 8143 	bne.w	8001016 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d94:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000d98:	f043 0202 	orr.w	r2, r3, #2
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000da8:	d004      	beq.n	8000db4 <HAL_ADC_Init+0x16c>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a6a      	ldr	r2, [pc, #424]	@ (8000f58 <HAL_ADC_Init+0x310>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d101      	bne.n	8000db8 <HAL_ADC_Init+0x170>
 8000db4:	4b69      	ldr	r3, [pc, #420]	@ (8000f5c <HAL_ADC_Init+0x314>)
 8000db6:	e000      	b.n	8000dba <HAL_ADC_Init+0x172>
 8000db8:	4b69      	ldr	r3, [pc, #420]	@ (8000f60 <HAL_ADC_Init+0x318>)
 8000dba:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000dc4:	d102      	bne.n	8000dcc <HAL_ADC_Init+0x184>
 8000dc6:	4b64      	ldr	r3, [pc, #400]	@ (8000f58 <HAL_ADC_Init+0x310>)
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	e01a      	b.n	8000e02 <HAL_ADC_Init+0x1ba>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a61      	ldr	r2, [pc, #388]	@ (8000f58 <HAL_ADC_Init+0x310>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d103      	bne.n	8000dde <HAL_ADC_Init+0x196>
 8000dd6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	e011      	b.n	8000e02 <HAL_ADC_Init+0x1ba>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a60      	ldr	r2, [pc, #384]	@ (8000f64 <HAL_ADC_Init+0x31c>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d102      	bne.n	8000dee <HAL_ADC_Init+0x1a6>
 8000de8:	4b5f      	ldr	r3, [pc, #380]	@ (8000f68 <HAL_ADC_Init+0x320>)
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	e009      	b.n	8000e02 <HAL_ADC_Init+0x1ba>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a5d      	ldr	r2, [pc, #372]	@ (8000f68 <HAL_ADC_Init+0x320>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d102      	bne.n	8000dfe <HAL_ADC_Init+0x1b6>
 8000df8:	4b5a      	ldr	r3, [pc, #360]	@ (8000f64 <HAL_ADC_Init+0x31c>)
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	e001      	b.n	8000e02 <HAL_ADC_Init+0x1ba>
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	f003 0303 	and.w	r3, r3, #3
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d108      	bne.n	8000e22 <HAL_ADC_Init+0x1da>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d101      	bne.n	8000e22 <HAL_ADC_Init+0x1da>
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e000      	b.n	8000e24 <HAL_ADC_Init+0x1dc>
 8000e22:	2300      	movs	r3, #0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d11c      	bne.n	8000e62 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e28:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d010      	beq.n	8000e50 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	f003 0303 	and.w	r3, r3, #3
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d107      	bne.n	8000e4a <HAL_ADC_Init+0x202>
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d101      	bne.n	8000e4a <HAL_ADC_Init+0x202>
 8000e46:	2301      	movs	r3, #1
 8000e48:	e000      	b.n	8000e4c <HAL_ADC_Init+0x204>
 8000e4a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d108      	bne.n	8000e62 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000e50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000e60:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	7e5b      	ldrb	r3, [r3, #25]
 8000e66:	035b      	lsls	r3, r3, #13
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000e6c:	2a01      	cmp	r2, #1
 8000e6e:	d002      	beq.n	8000e76 <HAL_ADC_Init+0x22e>
 8000e70:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e74:	e000      	b.n	8000e78 <HAL_ADC_Init+0x230>
 8000e76:	2200      	movs	r2, #0
 8000e78:	431a      	orrs	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	431a      	orrs	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d11b      	bne.n	8000ece <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	7e5b      	ldrb	r3, [r3, #25]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d109      	bne.n	8000eb2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	045a      	lsls	r2, r3, #17
 8000ea6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000eae:	663b      	str	r3, [r7, #96]	@ 0x60
 8000eb0:	e00d      	b.n	8000ece <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000eba:	f043 0220 	orr.w	r2, r3, #32
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec6:	f043 0201 	orr.w	r2, r3, #1
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d054      	beq.n	8000f80 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a22      	ldr	r2, [pc, #136]	@ (8000f64 <HAL_ADC_Init+0x31c>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d004      	beq.n	8000eea <HAL_ADC_Init+0x2a2>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a20      	ldr	r2, [pc, #128]	@ (8000f68 <HAL_ADC_Init+0x320>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d140      	bne.n	8000f6c <HAL_ADC_Init+0x324>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eee:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8000ef2:	d02a      	beq.n	8000f4a <HAL_ADC_Init+0x302>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ef8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000efc:	d022      	beq.n	8000f44 <HAL_ADC_Init+0x2fc>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f02:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8000f06:	d01a      	beq.n	8000f3e <HAL_ADC_Init+0x2f6>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f0c:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8000f10:	d012      	beq.n	8000f38 <HAL_ADC_Init+0x2f0>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f16:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8000f1a:	d00a      	beq.n	8000f32 <HAL_ADC_Init+0x2ea>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f20:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8000f24:	d002      	beq.n	8000f2c <HAL_ADC_Init+0x2e4>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f2a:	e023      	b.n	8000f74 <HAL_ADC_Init+0x32c>
 8000f2c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000f30:	e020      	b.n	8000f74 <HAL_ADC_Init+0x32c>
 8000f32:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000f36:	e01d      	b.n	8000f74 <HAL_ADC_Init+0x32c>
 8000f38:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000f3c:	e01a      	b.n	8000f74 <HAL_ADC_Init+0x32c>
 8000f3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f42:	e017      	b.n	8000f74 <HAL_ADC_Init+0x32c>
 8000f44:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8000f48:	e014      	b.n	8000f74 <HAL_ADC_Init+0x32c>
 8000f4a:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000f4e:	e011      	b.n	8000f74 <HAL_ADC_Init+0x32c>
 8000f50:	20000000 	.word	0x20000000
 8000f54:	431bde83 	.word	0x431bde83
 8000f58:	50000100 	.word	0x50000100
 8000f5c:	50000300 	.word	0x50000300
 8000f60:	50000700 	.word	0x50000700
 8000f64:	50000400 	.word	0x50000400
 8000f68:	50000500 	.word	0x50000500
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f003 030c 	and.w	r3, r3, #12
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d114      	bne.n	8000fb8 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	6812      	ldr	r2, [r2, #0]
 8000f98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000f9c:	f023 0302 	bic.w	r3, r3, #2
 8000fa0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	7e1b      	ldrb	r3, [r3, #24]
 8000fa6:	039a      	lsls	r2, r3, #14
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	68da      	ldr	r2, [r3, #12]
 8000fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8001038 <HAL_ADC_Init+0x3f0>)
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	6812      	ldr	r2, [r2, #0]
 8000fc6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000fc8:	430b      	orrs	r3, r1
 8000fca:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	691b      	ldr	r3, [r3, #16]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d10c      	bne.n	8000fee <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	f023 010f 	bic.w	r1, r3, #15
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	1e5a      	subs	r2, r3, #1
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	631a      	str	r2, [r3, #48]	@ 0x30
 8000fec:	e007      	b.n	8000ffe <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f022 020f 	bic.w	r2, r2, #15
 8000ffc:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001008:	f023 0303 	bic.w	r3, r3, #3
 800100c:	f043 0201 	orr.w	r2, r3, #1
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	641a      	str	r2, [r3, #64]	@ 0x40
 8001014:	e00a      	b.n	800102c <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101a:	f023 0312 	bic.w	r3, r3, #18
 800101e:	f043 0210 	orr.w	r2, r3, #16
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001026:	2301      	movs	r3, #1
 8001028:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800102c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001030:	4618      	mov	r0, r3
 8001032:	3768      	adds	r7, #104	@ 0x68
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	fff0c007 	.word	0xfff0c007

0800103c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001048:	2300      	movs	r3, #0
 800104a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	2b00      	cmp	r3, #0
 8001058:	f040 80f7 	bne.w	800124a <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001062:	2b01      	cmp	r3, #1
 8001064:	d101      	bne.n	800106a <HAL_ADC_Start_DMA+0x2e>
 8001066:	2302      	movs	r3, #2
 8001068:	e0f2      	b.n	8001250 <HAL_ADC_Start_DMA+0x214>
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2201      	movs	r2, #1
 800106e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800107a:	d004      	beq.n	8001086 <HAL_ADC_Start_DMA+0x4a>
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a75      	ldr	r2, [pc, #468]	@ (8001258 <HAL_ADC_Start_DMA+0x21c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d109      	bne.n	800109a <HAL_ADC_Start_DMA+0x5e>
 8001086:	4b75      	ldr	r3, [pc, #468]	@ (800125c <HAL_ADC_Start_DMA+0x220>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f003 031f 	and.w	r3, r3, #31
 800108e:	2b00      	cmp	r3, #0
 8001090:	bf0c      	ite	eq
 8001092:	2301      	moveq	r3, #1
 8001094:	2300      	movne	r3, #0
 8001096:	b2db      	uxtb	r3, r3
 8001098:	e008      	b.n	80010ac <HAL_ADC_Start_DMA+0x70>
 800109a:	4b71      	ldr	r3, [pc, #452]	@ (8001260 <HAL_ADC_Start_DMA+0x224>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f003 031f 	and.w	r3, r3, #31
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	bf0c      	ite	eq
 80010a6:	2301      	moveq	r3, #1
 80010a8:	2300      	movne	r3, #0
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	f000 80c5 	beq.w	800123c <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f000 fd92 	bl	8001bdc <ADC_Enable>
 80010b8:	4603      	mov	r3, r0
 80010ba:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80010bc:	7dfb      	ldrb	r3, [r7, #23]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f040 80b7 	bne.w	8001232 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80010cc:	f023 0301 	bic.w	r3, r3, #1
 80010d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010e0:	d004      	beq.n	80010ec <HAL_ADC_Start_DMA+0xb0>
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a5c      	ldr	r2, [pc, #368]	@ (8001258 <HAL_ADC_Start_DMA+0x21c>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d106      	bne.n	80010fa <HAL_ADC_Start_DMA+0xbe>
 80010ec:	4b5b      	ldr	r3, [pc, #364]	@ (800125c <HAL_ADC_Start_DMA+0x220>)
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f003 031f 	and.w	r3, r3, #31
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d010      	beq.n	800111a <HAL_ADC_Start_DMA+0xde>
 80010f8:	e005      	b.n	8001106 <HAL_ADC_Start_DMA+0xca>
 80010fa:	4b59      	ldr	r3, [pc, #356]	@ (8001260 <HAL_ADC_Start_DMA+0x224>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	f003 031f 	and.w	r3, r3, #31
 8001102:	2b00      	cmp	r3, #0
 8001104:	d009      	beq.n	800111a <HAL_ADC_Start_DMA+0xde>
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800110e:	d004      	beq.n	800111a <HAL_ADC_Start_DMA+0xde>
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a53      	ldr	r2, [pc, #332]	@ (8001264 <HAL_ADC_Start_DMA+0x228>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d115      	bne.n	8001146 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d036      	beq.n	80011a2 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001138:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800113c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001144:	e02d      	b.n	80011a2 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800115a:	d004      	beq.n	8001166 <HAL_ADC_Start_DMA+0x12a>
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a3d      	ldr	r2, [pc, #244]	@ (8001258 <HAL_ADC_Start_DMA+0x21c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d10a      	bne.n	800117c <HAL_ADC_Start_DMA+0x140>
 8001166:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001170:	2b00      	cmp	r3, #0
 8001172:	bf14      	ite	ne
 8001174:	2301      	movne	r3, #1
 8001176:	2300      	moveq	r3, #0
 8001178:	b2db      	uxtb	r3, r3
 800117a:	e008      	b.n	800118e <HAL_ADC_Start_DMA+0x152>
 800117c:	4b39      	ldr	r3, [pc, #228]	@ (8001264 <HAL_ADC_Start_DMA+0x228>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001184:	2b00      	cmp	r3, #0
 8001186:	bf14      	ite	ne
 8001188:	2301      	movne	r3, #1
 800118a:	2300      	moveq	r3, #0
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d007      	beq.n	80011a2 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001196:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800119a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80011ae:	d106      	bne.n	80011be <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b4:	f023 0206 	bic.w	r2, r3, #6
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	645a      	str	r2, [r3, #68]	@ 0x44
 80011bc:	e002      	b.n	80011c4 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2200      	movs	r2, #0
 80011c2:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2200      	movs	r2, #0
 80011c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011d0:	4a25      	ldr	r2, [pc, #148]	@ (8001268 <HAL_ADC_Start_DMA+0x22c>)
 80011d2:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011d8:	4a24      	ldr	r2, [pc, #144]	@ (800126c <HAL_ADC_Start_DMA+0x230>)
 80011da:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011e0:	4a23      	ldr	r2, [pc, #140]	@ (8001270 <HAL_ADC_Start_DMA+0x234>)
 80011e2:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	221c      	movs	r2, #28
 80011ea:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f042 0210 	orr.w	r2, r2, #16
 80011fa:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	68da      	ldr	r2, [r3, #12]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f042 0201 	orr.w	r2, r2, #1
 800120a:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	3340      	adds	r3, #64	@ 0x40
 8001216:	4619      	mov	r1, r3
 8001218:	68ba      	ldr	r2, [r7, #8]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f000 ff00 	bl	8002020 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f042 0204 	orr.w	r2, r2, #4
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	e00d      	b.n	800124e <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800123a:	e008      	b.n	800124e <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2200      	movs	r2, #0
 8001244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001248:	e001      	b.n	800124e <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800124a:	2302      	movs	r3, #2
 800124c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800124e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	50000100 	.word	0x50000100
 800125c:	50000300 	.word	0x50000300
 8001260:	50000700 	.word	0x50000700
 8001264:	50000400 	.word	0x50000400
 8001268:	08001b11 	.word	0x08001b11
 800126c:	08001b8b 	.word	0x08001b8b
 8001270:	08001ba7 	.word	0x08001ba7

08001274 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001288:	2b01      	cmp	r3, #1
 800128a:	d101      	bne.n	8001290 <HAL_ADCEx_Calibration_Start+0x1c>
 800128c:	2302      	movs	r3, #2
 800128e:	e05f      	b.n	8001350 <HAL_ADCEx_Calibration_Start+0xdc>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2201      	movs	r2, #1
 8001294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 fd03 	bl	8001ca4 <ADC_Disable>
 800129e:	4603      	mov	r3, r0
 80012a0:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d14e      	bne.n	8001346 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 80012bc:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d107      	bne.n	80012d4 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80012d2:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80012e2:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80012e4:	f7ff fc6c 	bl	8000bc0 <HAL_GetTick>
 80012e8:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80012ea:	e01c      	b.n	8001326 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80012ec:	f7ff fc68 	bl	8000bc0 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b0a      	cmp	r3, #10
 80012f8:	d915      	bls.n	8001326 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001304:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001308:	d10d      	bne.n	8001326 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130e:	f023 0312 	bic.w	r3, r3, #18
 8001312:	f043 0210 	orr.w	r2, r3, #16
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e014      	b.n	8001350 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001330:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001334:	d0da      	beq.n	80012ec <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133a:	f023 0303 	bic.w	r3, r3, #3
 800133e:	f043 0201 	orr.w	r2, r3, #1
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800134e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001358:	b480      	push	{r7}
 800135a:	b09b      	sub	sp, #108	@ 0x6c
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001362:	2300      	movs	r3, #0
 8001364:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001372:	2b01      	cmp	r3, #1
 8001374:	d101      	bne.n	800137a <HAL_ADC_ConfigChannel+0x22>
 8001376:	2302      	movs	r3, #2
 8001378:	e2c8      	b.n	800190c <HAL_ADC_ConfigChannel+0x5b4>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f003 0304 	and.w	r3, r3, #4
 800138c:	2b00      	cmp	r3, #0
 800138e:	f040 82ac 	bne.w	80018ea <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2b04      	cmp	r3, #4
 8001398:	d81c      	bhi.n	80013d4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	4613      	mov	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	4413      	add	r3, r2
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	461a      	mov	r2, r3
 80013ae:	231f      	movs	r3, #31
 80013b0:	4093      	lsls	r3, r2
 80013b2:	43db      	mvns	r3, r3
 80013b4:	4019      	ands	r1, r3
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	6818      	ldr	r0, [r3, #0]
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	4613      	mov	r3, r2
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	4413      	add	r3, r2
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	fa00 f203 	lsl.w	r2, r0, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	430a      	orrs	r2, r1
 80013d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80013d2:	e063      	b.n	800149c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	2b09      	cmp	r3, #9
 80013da:	d81e      	bhi.n	800141a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	4613      	mov	r3, r2
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	4413      	add	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	3b1e      	subs	r3, #30
 80013f0:	221f      	movs	r2, #31
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	4019      	ands	r1, r3
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	6818      	ldr	r0, [r3, #0]
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	4613      	mov	r3, r2
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	4413      	add	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	3b1e      	subs	r3, #30
 800140c:	fa00 f203 	lsl.w	r2, r0, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	430a      	orrs	r2, r1
 8001416:	635a      	str	r2, [r3, #52]	@ 0x34
 8001418:	e040      	b.n	800149c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2b0e      	cmp	r3, #14
 8001420:	d81e      	bhi.n	8001460 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	4613      	mov	r3, r2
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	4413      	add	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	3b3c      	subs	r3, #60	@ 0x3c
 8001436:	221f      	movs	r2, #31
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	4019      	ands	r1, r3
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	6818      	ldr	r0, [r3, #0]
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	4613      	mov	r3, r2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4413      	add	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	3b3c      	subs	r3, #60	@ 0x3c
 8001452:	fa00 f203 	lsl.w	r2, r0, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	430a      	orrs	r2, r1
 800145c:	639a      	str	r2, [r3, #56]	@ 0x38
 800145e:	e01d      	b.n	800149c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	4613      	mov	r3, r2
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	4413      	add	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	3b5a      	subs	r3, #90	@ 0x5a
 8001474:	221f      	movs	r2, #31
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	4019      	ands	r1, r3
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	6818      	ldr	r0, [r3, #0]
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	4613      	mov	r3, r2
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	4413      	add	r3, r2
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	3b5a      	subs	r3, #90	@ 0x5a
 8001490:	fa00 f203 	lsl.w	r2, r0, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	430a      	orrs	r2, r1
 800149a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 030c 	and.w	r3, r3, #12
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f040 80e5 	bne.w	8001676 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b09      	cmp	r3, #9
 80014b2:	d91c      	bls.n	80014ee <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6999      	ldr	r1, [r3, #24]
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	4613      	mov	r3, r2
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	4413      	add	r3, r2
 80014c4:	3b1e      	subs	r3, #30
 80014c6:	2207      	movs	r2, #7
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	4019      	ands	r1, r3
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	6898      	ldr	r0, [r3, #8]
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4613      	mov	r3, r2
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	4413      	add	r3, r2
 80014de:	3b1e      	subs	r3, #30
 80014e0:	fa00 f203 	lsl.w	r2, r0, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	619a      	str	r2, [r3, #24]
 80014ec:	e019      	b.n	8001522 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6959      	ldr	r1, [r3, #20]
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4613      	mov	r3, r2
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4413      	add	r3, r2
 80014fe:	2207      	movs	r2, #7
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	4019      	ands	r1, r3
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	6898      	ldr	r0, [r3, #8]
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4613      	mov	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4413      	add	r3, r2
 8001516:	fa00 f203 	lsl.w	r2, r0, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	430a      	orrs	r2, r1
 8001520:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	695a      	ldr	r2, [r3, #20]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	08db      	lsrs	r3, r3, #3
 800152e:	f003 0303 	and.w	r3, r3, #3
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	3b01      	subs	r3, #1
 8001540:	2b03      	cmp	r3, #3
 8001542:	d84f      	bhi.n	80015e4 <HAL_ADC_ConfigChannel+0x28c>
 8001544:	a201      	add	r2, pc, #4	@ (adr r2, 800154c <HAL_ADC_ConfigChannel+0x1f4>)
 8001546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154a:	bf00      	nop
 800154c:	0800155d 	.word	0x0800155d
 8001550:	0800157f 	.word	0x0800157f
 8001554:	080015a1 	.word	0x080015a1
 8001558:	080015c3 	.word	0x080015c3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001562:	4b99      	ldr	r3, [pc, #612]	@ (80017c8 <HAL_ADC_ConfigChannel+0x470>)
 8001564:	4013      	ands	r3, r2
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	6812      	ldr	r2, [r2, #0]
 800156a:	0691      	lsls	r1, r2, #26
 800156c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800156e:	430a      	orrs	r2, r1
 8001570:	431a      	orrs	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800157a:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800157c:	e07b      	b.n	8001676 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001584:	4b90      	ldr	r3, [pc, #576]	@ (80017c8 <HAL_ADC_ConfigChannel+0x470>)
 8001586:	4013      	ands	r3, r2
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	6812      	ldr	r2, [r2, #0]
 800158c:	0691      	lsls	r1, r2, #26
 800158e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001590:	430a      	orrs	r2, r1
 8001592:	431a      	orrs	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800159c:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800159e:	e06a      	b.n	8001676 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80015a6:	4b88      	ldr	r3, [pc, #544]	@ (80017c8 <HAL_ADC_ConfigChannel+0x470>)
 80015a8:	4013      	ands	r3, r2
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	6812      	ldr	r2, [r2, #0]
 80015ae:	0691      	lsls	r1, r2, #26
 80015b0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80015b2:	430a      	orrs	r2, r1
 80015b4:	431a      	orrs	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80015be:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015c0:	e059      	b.n	8001676 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80015c8:	4b7f      	ldr	r3, [pc, #508]	@ (80017c8 <HAL_ADC_ConfigChannel+0x470>)
 80015ca:	4013      	ands	r3, r2
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	0691      	lsls	r1, r2, #26
 80015d2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80015d4:	430a      	orrs	r2, r1
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80015e0:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015e2:	e048      	b.n	8001676 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	069b      	lsls	r3, r3, #26
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d107      	bne.n	8001608 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001606:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800160e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	069b      	lsls	r3, r3, #26
 8001618:	429a      	cmp	r2, r3
 800161a:	d107      	bne.n	800162c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800162a:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001632:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	069b      	lsls	r3, r3, #26
 800163c:	429a      	cmp	r2, r3
 800163e:	d107      	bne.n	8001650 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800164e:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001656:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	069b      	lsls	r3, r3, #26
 8001660:	429a      	cmp	r2, r3
 8001662:	d107      	bne.n	8001674 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001672:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001674:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	2b01      	cmp	r3, #1
 8001682:	d108      	bne.n	8001696 <HAL_ADC_ConfigChannel+0x33e>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b01      	cmp	r3, #1
 8001690:	d101      	bne.n	8001696 <HAL_ADC_ConfigChannel+0x33e>
 8001692:	2301      	movs	r3, #1
 8001694:	e000      	b.n	8001698 <HAL_ADC_ConfigChannel+0x340>
 8001696:	2300      	movs	r3, #0
 8001698:	2b00      	cmp	r3, #0
 800169a:	f040 8131 	bne.w	8001900 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d00f      	beq.n	80016c6 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2201      	movs	r2, #1
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43da      	mvns	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	400a      	ands	r2, r1
 80016c0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80016c4:	e049      	b.n	800175a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2201      	movs	r2, #1
 80016d4:	409a      	lsls	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b09      	cmp	r3, #9
 80016e6:	d91c      	bls.n	8001722 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6999      	ldr	r1, [r3, #24]
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	4613      	mov	r3, r2
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	4413      	add	r3, r2
 80016f8:	3b1b      	subs	r3, #27
 80016fa:	2207      	movs	r2, #7
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	4019      	ands	r1, r3
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	6898      	ldr	r0, [r3, #8]
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4613      	mov	r3, r2
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	4413      	add	r3, r2
 8001712:	3b1b      	subs	r3, #27
 8001714:	fa00 f203 	lsl.w	r2, r0, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	619a      	str	r2, [r3, #24]
 8001720:	e01b      	b.n	800175a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6959      	ldr	r1, [r3, #20]
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	1c5a      	adds	r2, r3, #1
 800172e:	4613      	mov	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	2207      	movs	r2, #7
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	4019      	ands	r1, r3
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	6898      	ldr	r0, [r3, #8]
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	1c5a      	adds	r2, r3, #1
 8001748:	4613      	mov	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4413      	add	r3, r2
 800174e:	fa00 f203 	lsl.w	r2, r0, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	430a      	orrs	r2, r1
 8001758:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001762:	d004      	beq.n	800176e <HAL_ADC_ConfigChannel+0x416>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a18      	ldr	r2, [pc, #96]	@ (80017cc <HAL_ADC_ConfigChannel+0x474>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d101      	bne.n	8001772 <HAL_ADC_ConfigChannel+0x41a>
 800176e:	4b18      	ldr	r3, [pc, #96]	@ (80017d0 <HAL_ADC_ConfigChannel+0x478>)
 8001770:	e000      	b.n	8001774 <HAL_ADC_ConfigChannel+0x41c>
 8001772:	4b18      	ldr	r3, [pc, #96]	@ (80017d4 <HAL_ADC_ConfigChannel+0x47c>)
 8001774:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b10      	cmp	r3, #16
 800177c:	d105      	bne.n	800178a <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800177e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001786:	2b00      	cmp	r3, #0
 8001788:	d015      	beq.n	80017b6 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800178e:	2b11      	cmp	r3, #17
 8001790:	d105      	bne.n	800179e <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001792:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00b      	beq.n	80017b6 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80017a2:	2b12      	cmp	r3, #18
 80017a4:	f040 80ac 	bne.w	8001900 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80017a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f040 80a5 	bne.w	8001900 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017be:	d10b      	bne.n	80017d8 <HAL_ADC_ConfigChannel+0x480>
 80017c0:	4b02      	ldr	r3, [pc, #8]	@ (80017cc <HAL_ADC_ConfigChannel+0x474>)
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	e023      	b.n	800180e <HAL_ADC_ConfigChannel+0x4b6>
 80017c6:	bf00      	nop
 80017c8:	83fff000 	.word	0x83fff000
 80017cc:	50000100 	.word	0x50000100
 80017d0:	50000300 	.word	0x50000300
 80017d4:	50000700 	.word	0x50000700
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a4e      	ldr	r2, [pc, #312]	@ (8001918 <HAL_ADC_ConfigChannel+0x5c0>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d103      	bne.n	80017ea <HAL_ADC_ConfigChannel+0x492>
 80017e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	e011      	b.n	800180e <HAL_ADC_ConfigChannel+0x4b6>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a4b      	ldr	r2, [pc, #300]	@ (800191c <HAL_ADC_ConfigChannel+0x5c4>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d102      	bne.n	80017fa <HAL_ADC_ConfigChannel+0x4a2>
 80017f4:	4b4a      	ldr	r3, [pc, #296]	@ (8001920 <HAL_ADC_ConfigChannel+0x5c8>)
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	e009      	b.n	800180e <HAL_ADC_ConfigChannel+0x4b6>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a48      	ldr	r2, [pc, #288]	@ (8001920 <HAL_ADC_ConfigChannel+0x5c8>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d102      	bne.n	800180a <HAL_ADC_ConfigChannel+0x4b2>
 8001804:	4b45      	ldr	r3, [pc, #276]	@ (800191c <HAL_ADC_ConfigChannel+0x5c4>)
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	e001      	b.n	800180e <HAL_ADC_ConfigChannel+0x4b6>
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	2b01      	cmp	r3, #1
 800181a:	d108      	bne.n	800182e <HAL_ADC_ConfigChannel+0x4d6>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b01      	cmp	r3, #1
 8001828:	d101      	bne.n	800182e <HAL_ADC_ConfigChannel+0x4d6>
 800182a:	2301      	movs	r3, #1
 800182c:	e000      	b.n	8001830 <HAL_ADC_ConfigChannel+0x4d8>
 800182e:	2300      	movs	r3, #0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d150      	bne.n	80018d6 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001834:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001836:	2b00      	cmp	r3, #0
 8001838:	d010      	beq.n	800185c <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	2b01      	cmp	r3, #1
 8001844:	d107      	bne.n	8001856 <HAL_ADC_ConfigChannel+0x4fe>
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b01      	cmp	r3, #1
 8001850:	d101      	bne.n	8001856 <HAL_ADC_ConfigChannel+0x4fe>
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <HAL_ADC_ConfigChannel+0x500>
 8001856:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001858:	2b00      	cmp	r3, #0
 800185a:	d13c      	bne.n	80018d6 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b10      	cmp	r3, #16
 8001862:	d11d      	bne.n	80018a0 <HAL_ADC_ConfigChannel+0x548>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800186c:	d118      	bne.n	80018a0 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800186e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001876:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001878:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800187a:	4b2a      	ldr	r3, [pc, #168]	@ (8001924 <HAL_ADC_ConfigChannel+0x5cc>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a2a      	ldr	r2, [pc, #168]	@ (8001928 <HAL_ADC_ConfigChannel+0x5d0>)
 8001880:	fba2 2303 	umull	r2, r3, r2, r3
 8001884:	0c9a      	lsrs	r2, r3, #18
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001890:	e002      	b.n	8001898 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	3b01      	subs	r3, #1
 8001896:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f9      	bne.n	8001892 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800189e:	e02e      	b.n	80018fe <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b11      	cmp	r3, #17
 80018a6:	d10b      	bne.n	80018c0 <HAL_ADC_ConfigChannel+0x568>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018b0:	d106      	bne.n	80018c0 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80018b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80018ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018bc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018be:	e01e      	b.n	80018fe <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b12      	cmp	r3, #18
 80018c6:	d11a      	bne.n	80018fe <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80018c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80018d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018d2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018d4:	e013      	b.n	80018fe <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018da:	f043 0220 	orr.w	r2, r3, #32
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80018e8:	e00a      	b.n	8001900 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ee:	f043 0220 	orr.w	r2, r3, #32
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80018fc:	e000      	b.n	8001900 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018fe:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001908:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800190c:	4618      	mov	r0, r3
 800190e:	376c      	adds	r7, #108	@ 0x6c
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	50000100 	.word	0x50000100
 800191c:	50000400 	.word	0x50000400
 8001920:	50000500 	.word	0x50000500
 8001924:	20000000 	.word	0x20000000
 8001928:	431bde83 	.word	0x431bde83

0800192c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800192c:	b480      	push	{r7}
 800192e:	b099      	sub	sp, #100	@ 0x64
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001936:	2300      	movs	r3, #0
 8001938:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001944:	d102      	bne.n	800194c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001946:	4b6d      	ldr	r3, [pc, #436]	@ (8001afc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	e01a      	b.n	8001982 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a6a      	ldr	r2, [pc, #424]	@ (8001afc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d103      	bne.n	800195e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001956:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	e011      	b.n	8001982 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a67      	ldr	r2, [pc, #412]	@ (8001b00 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d102      	bne.n	800196e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001968:	4b66      	ldr	r3, [pc, #408]	@ (8001b04 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	e009      	b.n	8001982 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a64      	ldr	r2, [pc, #400]	@ (8001b04 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d102      	bne.n	800197e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001978:	4b61      	ldr	r3, [pc, #388]	@ (8001b00 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	e001      	b.n	8001982 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e0b0      	b.n	8001aee <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001992:	2b01      	cmp	r3, #1
 8001994:	d101      	bne.n	800199a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001996:	2302      	movs	r3, #2
 8001998:	e0a9      	b.n	8001aee <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f040 808d 	bne.w	8001acc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 0304 	and.w	r3, r3, #4
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f040 8086 	bne.w	8001acc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019c8:	d004      	beq.n	80019d4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a4b      	ldr	r2, [pc, #300]	@ (8001afc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d101      	bne.n	80019d8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80019d4:	4b4c      	ldr	r3, [pc, #304]	@ (8001b08 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80019d6:	e000      	b.n	80019da <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80019d8:	4b4c      	ldr	r3, [pc, #304]	@ (8001b0c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80019da:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d040      	beq.n	8001a66 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80019e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	6859      	ldr	r1, [r3, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019f6:	035b      	lsls	r3, r3, #13
 80019f8:	430b      	orrs	r3, r1
 80019fa:	431a      	orrs	r2, r3
 80019fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80019fe:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d108      	bne.n	8001a20 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d101      	bne.n	8001a20 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e000      	b.n	8001a22 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001a20:	2300      	movs	r3, #0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d15c      	bne.n	8001ae0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d107      	bne.n	8001a42 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d101      	bne.n	8001a42 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001a42:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d14b      	bne.n	8001ae0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001a48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001a50:	f023 030f 	bic.w	r3, r3, #15
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	6811      	ldr	r1, [r2, #0]
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	6892      	ldr	r2, [r2, #8]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a62:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a64:	e03c      	b.n	8001ae0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001a66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a70:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d108      	bne.n	8001a92 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d101      	bne.n	8001a92 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001a92:	2300      	movs	r3, #0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d123      	bne.n	8001ae0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d107      	bne.n	8001ab4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d101      	bne.n	8001ab4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001ab4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d112      	bne.n	8001ae0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001aba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001ac2:	f023 030f 	bic.w	r3, r3, #15
 8001ac6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001ac8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001aca:	e009      	b.n	8001ae0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad0:	f043 0220 	orr.w	r2, r3, #32
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001ade:	e000      	b.n	8001ae2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ae0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001aea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8001aee:	4618      	mov	r0, r3
 8001af0:	3764      	adds	r7, #100	@ 0x64
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	50000100 	.word	0x50000100
 8001b00:	50000400 	.word	0x50000400
 8001b04:	50000500 	.word	0x50000500
 8001b08:	50000300 	.word	0x50000300
 8001b0c:	50000700 	.word	0x50000700

08001b10 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d126      	bne.n	8001b78 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d115      	bne.n	8001b70 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d111      	bne.n	8001b70 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d105      	bne.n	8001b70 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b68:	f043 0201 	orr.w	r2, r3, #1
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f7fe fd3b 	bl	80005ec <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001b76:	e004      	b.n	8001b82 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	4798      	blx	r3
}
 8001b82:	bf00      	nop
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b084      	sub	sp, #16
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b96:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f7ff f841 	bl	8000c20 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001b9e:	bf00      	nop
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b084      	sub	sp, #16
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc4:	f043 0204 	orr.w	r2, r3, #4
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f7ff f831 	bl	8000c34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d108      	bne.n	8001c08 <ADC_Enable+0x2c>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <ADC_Enable+0x2c>
 8001c04:	2301      	movs	r3, #1
 8001c06:	e000      	b.n	8001c0a <ADC_Enable+0x2e>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d143      	bne.n	8001c96 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	4b22      	ldr	r3, [pc, #136]	@ (8001ca0 <ADC_Enable+0xc4>)
 8001c16:	4013      	ands	r3, r2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00d      	beq.n	8001c38 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c20:	f043 0210 	orr.w	r2, r3, #16
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2c:	f043 0201 	orr.w	r2, r3, #1
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e02f      	b.n	8001c98 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 0201 	orr.w	r2, r2, #1
 8001c46:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001c48:	f7fe ffba 	bl	8000bc0 <HAL_GetTick>
 8001c4c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c4e:	e01b      	b.n	8001c88 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c50:	f7fe ffb6 	bl	8000bc0 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d914      	bls.n	8001c88 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d00d      	beq.n	8001c88 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c70:	f043 0210 	orr.w	r2, r3, #16
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7c:	f043 0201 	orr.w	r2, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e007      	b.n	8001c98 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d1dc      	bne.n	8001c50 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	8000003f 	.word	0x8000003f

08001ca4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d108      	bne.n	8001cd0 <ADC_Disable+0x2c>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d101      	bne.n	8001cd0 <ADC_Disable+0x2c>
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e000      	b.n	8001cd2 <ADC_Disable+0x2e>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d047      	beq.n	8001d66 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 030d 	and.w	r3, r3, #13
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d10f      	bne.n	8001d04 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0202 	orr.w	r2, r2, #2
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001cfc:	f7fe ff60 	bl	8000bc0 <HAL_GetTick>
 8001d00:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d02:	e029      	b.n	8001d58 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d08:	f043 0210 	orr.w	r2, r3, #16
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d14:	f043 0201 	orr.w	r2, r3, #1
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e023      	b.n	8001d68 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d20:	f7fe ff4e 	bl	8000bc0 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d914      	bls.n	8001d58 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d10d      	bne.n	8001d58 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d40:	f043 0210 	orr.w	r2, r3, #16
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d4c:	f043 0201 	orr.w	r2, r3, #1
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e007      	b.n	8001d68 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d0dc      	beq.n	8001d20 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d80:	4b0c      	ldr	r3, [pc, #48]	@ (8001db4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001da2:	4a04      	ldr	r2, [pc, #16]	@ (8001db4 <__NVIC_SetPriorityGrouping+0x44>)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	60d3      	str	r3, [r2, #12]
}
 8001da8:	bf00      	nop
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dbc:	4b04      	ldr	r3, [pc, #16]	@ (8001dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	0a1b      	lsrs	r3, r3, #8
 8001dc2:	f003 0307 	and.w	r3, r3, #7
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	db0b      	blt.n	8001dfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	f003 021f 	and.w	r2, r3, #31
 8001dec:	4907      	ldr	r1, [pc, #28]	@ (8001e0c <__NVIC_EnableIRQ+0x38>)
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	095b      	lsrs	r3, r3, #5
 8001df4:	2001      	movs	r0, #1
 8001df6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	e000e100 	.word	0xe000e100

08001e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	6039      	str	r1, [r7, #0]
 8001e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	db0a      	blt.n	8001e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	490c      	ldr	r1, [pc, #48]	@ (8001e5c <__NVIC_SetPriority+0x4c>)
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	0112      	lsls	r2, r2, #4
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	440b      	add	r3, r1
 8001e34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e38:	e00a      	b.n	8001e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	4908      	ldr	r1, [pc, #32]	@ (8001e60 <__NVIC_SetPriority+0x50>)
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	3b04      	subs	r3, #4
 8001e48:	0112      	lsls	r2, r2, #4
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	761a      	strb	r2, [r3, #24]
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	e000e100 	.word	0xe000e100
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b089      	sub	sp, #36	@ 0x24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f1c3 0307 	rsb	r3, r3, #7
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	bf28      	it	cs
 8001e82:	2304      	movcs	r3, #4
 8001e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3304      	adds	r3, #4
 8001e8a:	2b06      	cmp	r3, #6
 8001e8c:	d902      	bls.n	8001e94 <NVIC_EncodePriority+0x30>
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	3b03      	subs	r3, #3
 8001e92:	e000      	b.n	8001e96 <NVIC_EncodePriority+0x32>
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e98:	f04f 32ff 	mov.w	r2, #4294967295
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43da      	mvns	r2, r3
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	401a      	ands	r2, r3
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eac:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb6:	43d9      	mvns	r1, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ebc:	4313      	orrs	r3, r2
         );
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3724      	adds	r7, #36	@ 0x24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
	...

08001ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001edc:	d301      	bcc.n	8001ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e00f      	b.n	8001f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8001f0c <SysTick_Config+0x40>)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eea:	210f      	movs	r1, #15
 8001eec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef0:	f7ff ff8e 	bl	8001e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ef4:	4b05      	ldr	r3, [pc, #20]	@ (8001f0c <SysTick_Config+0x40>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001efa:	4b04      	ldr	r3, [pc, #16]	@ (8001f0c <SysTick_Config+0x40>)
 8001efc:	2207      	movs	r2, #7
 8001efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	e000e010 	.word	0xe000e010

08001f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff ff29 	bl	8001d70 <__NVIC_SetPriorityGrouping>
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b086      	sub	sp, #24
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	60b9      	str	r1, [r7, #8]
 8001f30:	607a      	str	r2, [r7, #4]
 8001f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f38:	f7ff ff3e 	bl	8001db8 <__NVIC_GetPriorityGrouping>
 8001f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	68b9      	ldr	r1, [r7, #8]
 8001f42:	6978      	ldr	r0, [r7, #20]
 8001f44:	f7ff ff8e 	bl	8001e64 <NVIC_EncodePriority>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff ff5d 	bl	8001e10 <__NVIC_SetPriority>
}
 8001f56:	bf00      	nop
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	4603      	mov	r3, r0
 8001f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ff31 	bl	8001dd4 <__NVIC_EnableIRQ>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff ffa2 	bl	8001ecc <SysTick_Config>
 8001f88:	4603      	mov	r3, r0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b084      	sub	sp, #16
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e037      	b.n	8002018 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2202      	movs	r2, #2
 8001fac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001fbe:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001fc2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fe4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f940 	bl	8002280 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d101      	bne.n	8002040 <HAL_DMA_Start_IT+0x20>
 800203c:	2302      	movs	r3, #2
 800203e:	e04a      	b.n	80020d6 <HAL_DMA_Start_IT+0xb6>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800204e:	2b01      	cmp	r3, #1
 8002050:	d13a      	bne.n	80020c8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2202      	movs	r2, #2
 8002056:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 0201 	bic.w	r2, r2, #1
 800206e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	68b9      	ldr	r1, [r7, #8]
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 f8d4 	bl	8002224 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002080:	2b00      	cmp	r3, #0
 8002082:	d008      	beq.n	8002096 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 020e 	orr.w	r2, r2, #14
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	e00f      	b.n	80020b6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f042 020a 	orr.w	r2, r2, #10
 80020a4:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 0204 	bic.w	r2, r2, #4
 80020b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f042 0201 	orr.w	r2, r2, #1
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	e005      	b.n	80020d4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80020d0:	2302      	movs	r3, #2
 80020d2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80020d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b084      	sub	sp, #16
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fa:	2204      	movs	r2, #4
 80020fc:	409a      	lsls	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	4013      	ands	r3, r2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d024      	beq.n	8002150 <HAL_DMA_IRQHandler+0x72>
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	d01f      	beq.n	8002150 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0320 	and.w	r3, r3, #32
 800211a:	2b00      	cmp	r3, #0
 800211c:	d107      	bne.n	800212e <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0204 	bic.w	r2, r2, #4
 800212c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002136:	2104      	movs	r1, #4
 8002138:	fa01 f202 	lsl.w	r2, r1, r2
 800213c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002142:	2b00      	cmp	r3, #0
 8002144:	d06a      	beq.n	800221c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800214e:	e065      	b.n	800221c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002154:	2202      	movs	r2, #2
 8002156:	409a      	lsls	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4013      	ands	r3, r2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d02c      	beq.n	80021ba <HAL_DMA_IRQHandler+0xdc>
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d027      	beq.n	80021ba <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0320 	and.w	r3, r3, #32
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10b      	bne.n	8002190 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 020a 	bic.w	r2, r2, #10
 8002186:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002198:	2102      	movs	r1, #2
 800219a:	fa01 f202 	lsl.w	r2, r1, r2
 800219e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d035      	beq.n	800221c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80021b8:	e030      	b.n	800221c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021be:	2208      	movs	r2, #8
 80021c0:	409a      	lsls	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	4013      	ands	r3, r2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d028      	beq.n	800221c <HAL_DMA_IRQHandler+0x13e>
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	f003 0308 	and.w	r3, r3, #8
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d023      	beq.n	800221c <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 020e 	bic.w	r2, r2, #14
 80021e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ec:	2101      	movs	r1, #1
 80021ee:	fa01 f202 	lsl.w	r2, r1, r2
 80021f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220e:	2b00      	cmp	r3, #0
 8002210:	d004      	beq.n	800221c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	4798      	blx	r3
    }
  }
}
 800221a:	e7ff      	b.n	800221c <HAL_DMA_IRQHandler+0x13e>
 800221c:	bf00      	nop
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800223a:	2101      	movs	r1, #1
 800223c:	fa01 f202 	lsl.w	r2, r1, r2
 8002240:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b10      	cmp	r3, #16
 8002250:	d108      	bne.n	8002264 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002262:	e007      	b.n	8002274 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	60da      	str	r2, [r3, #12]
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	461a      	mov	r2, r3
 800228e:	4b14      	ldr	r3, [pc, #80]	@ (80022e0 <DMA_CalcBaseAndBitshift+0x60>)
 8002290:	429a      	cmp	r2, r3
 8002292:	d80f      	bhi.n	80022b4 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	461a      	mov	r2, r3
 800229a:	4b12      	ldr	r3, [pc, #72]	@ (80022e4 <DMA_CalcBaseAndBitshift+0x64>)
 800229c:	4413      	add	r3, r2
 800229e:	4a12      	ldr	r2, [pc, #72]	@ (80022e8 <DMA_CalcBaseAndBitshift+0x68>)
 80022a0:	fba2 2303 	umull	r2, r3, r2, r3
 80022a4:	091b      	lsrs	r3, r3, #4
 80022a6:	009a      	lsls	r2, r3, #2
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a0f      	ldr	r2, [pc, #60]	@ (80022ec <DMA_CalcBaseAndBitshift+0x6c>)
 80022b0:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80022b2:	e00e      	b.n	80022d2 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	4b0d      	ldr	r3, [pc, #52]	@ (80022f0 <DMA_CalcBaseAndBitshift+0x70>)
 80022bc:	4413      	add	r3, r2
 80022be:	4a0a      	ldr	r2, [pc, #40]	@ (80022e8 <DMA_CalcBaseAndBitshift+0x68>)
 80022c0:	fba2 2303 	umull	r2, r3, r2, r3
 80022c4:	091b      	lsrs	r3, r3, #4
 80022c6:	009a      	lsls	r2, r3, #2
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a09      	ldr	r2, [pc, #36]	@ (80022f4 <DMA_CalcBaseAndBitshift+0x74>)
 80022d0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40020407 	.word	0x40020407
 80022e4:	bffdfff8 	.word	0xbffdfff8
 80022e8:	cccccccd 	.word	0xcccccccd
 80022ec:	40020000 	.word	0x40020000
 80022f0:	bffdfbf8 	.word	0xbffdfbf8
 80022f4:	40020400 	.word	0x40020400

080022f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002306:	e160      	b.n	80025ca <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	2101      	movs	r1, #1
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	fa01 f303 	lsl.w	r3, r1, r3
 8002314:	4013      	ands	r3, r2
 8002316:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 8152 	beq.w	80025c4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	2b01      	cmp	r3, #1
 800232a:	d005      	beq.n	8002338 <HAL_GPIO_Init+0x40>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 0303 	and.w	r3, r3, #3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d130      	bne.n	800239a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	2203      	movs	r2, #3
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4013      	ands	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4313      	orrs	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800236e:	2201      	movs	r2, #1
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	4013      	ands	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	091b      	lsrs	r3, r3, #4
 8002384:	f003 0201 	and.w	r2, r3, #1
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4313      	orrs	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d017      	beq.n	80023d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	2203      	movs	r2, #3
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	4013      	ands	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d123      	bne.n	800242a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	08da      	lsrs	r2, r3, #3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3208      	adds	r2, #8
 80023ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	220f      	movs	r2, #15
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43db      	mvns	r3, r3
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	4013      	ands	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	691a      	ldr	r2, [r3, #16]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4313      	orrs	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	08da      	lsrs	r2, r3, #3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3208      	adds	r2, #8
 8002424:	6939      	ldr	r1, [r7, #16]
 8002426:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	2203      	movs	r2, #3
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43db      	mvns	r3, r3
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	4013      	ands	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 0203 	and.w	r2, r3, #3
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002466:	2b00      	cmp	r3, #0
 8002468:	f000 80ac 	beq.w	80025c4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246c:	4b5e      	ldr	r3, [pc, #376]	@ (80025e8 <HAL_GPIO_Init+0x2f0>)
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	4a5d      	ldr	r2, [pc, #372]	@ (80025e8 <HAL_GPIO_Init+0x2f0>)
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	6193      	str	r3, [r2, #24]
 8002478:	4b5b      	ldr	r3, [pc, #364]	@ (80025e8 <HAL_GPIO_Init+0x2f0>)
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002484:	4a59      	ldr	r2, [pc, #356]	@ (80025ec <HAL_GPIO_Init+0x2f4>)
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	089b      	lsrs	r3, r3, #2
 800248a:	3302      	adds	r3, #2
 800248c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002490:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f003 0303 	and.w	r3, r3, #3
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	220f      	movs	r2, #15
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4013      	ands	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80024ae:	d025      	beq.n	80024fc <HAL_GPIO_Init+0x204>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a4f      	ldr	r2, [pc, #316]	@ (80025f0 <HAL_GPIO_Init+0x2f8>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d01f      	beq.n	80024f8 <HAL_GPIO_Init+0x200>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a4e      	ldr	r2, [pc, #312]	@ (80025f4 <HAL_GPIO_Init+0x2fc>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d019      	beq.n	80024f4 <HAL_GPIO_Init+0x1fc>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a4d      	ldr	r2, [pc, #308]	@ (80025f8 <HAL_GPIO_Init+0x300>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d013      	beq.n	80024f0 <HAL_GPIO_Init+0x1f8>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a4c      	ldr	r2, [pc, #304]	@ (80025fc <HAL_GPIO_Init+0x304>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d00d      	beq.n	80024ec <HAL_GPIO_Init+0x1f4>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a4b      	ldr	r2, [pc, #300]	@ (8002600 <HAL_GPIO_Init+0x308>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d007      	beq.n	80024e8 <HAL_GPIO_Init+0x1f0>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a4a      	ldr	r2, [pc, #296]	@ (8002604 <HAL_GPIO_Init+0x30c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d101      	bne.n	80024e4 <HAL_GPIO_Init+0x1ec>
 80024e0:	2306      	movs	r3, #6
 80024e2:	e00c      	b.n	80024fe <HAL_GPIO_Init+0x206>
 80024e4:	2307      	movs	r3, #7
 80024e6:	e00a      	b.n	80024fe <HAL_GPIO_Init+0x206>
 80024e8:	2305      	movs	r3, #5
 80024ea:	e008      	b.n	80024fe <HAL_GPIO_Init+0x206>
 80024ec:	2304      	movs	r3, #4
 80024ee:	e006      	b.n	80024fe <HAL_GPIO_Init+0x206>
 80024f0:	2303      	movs	r3, #3
 80024f2:	e004      	b.n	80024fe <HAL_GPIO_Init+0x206>
 80024f4:	2302      	movs	r3, #2
 80024f6:	e002      	b.n	80024fe <HAL_GPIO_Init+0x206>
 80024f8:	2301      	movs	r3, #1
 80024fa:	e000      	b.n	80024fe <HAL_GPIO_Init+0x206>
 80024fc:	2300      	movs	r3, #0
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	f002 0203 	and.w	r2, r2, #3
 8002504:	0092      	lsls	r2, r2, #2
 8002506:	4093      	lsls	r3, r2
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4313      	orrs	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800250e:	4937      	ldr	r1, [pc, #220]	@ (80025ec <HAL_GPIO_Init+0x2f4>)
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	089b      	lsrs	r3, r3, #2
 8002514:	3302      	adds	r3, #2
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800251c:	4b3a      	ldr	r3, [pc, #232]	@ (8002608 <HAL_GPIO_Init+0x310>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	43db      	mvns	r3, r3
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4013      	ands	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002540:	4a31      	ldr	r2, [pc, #196]	@ (8002608 <HAL_GPIO_Init+0x310>)
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002546:	4b30      	ldr	r3, [pc, #192]	@ (8002608 <HAL_GPIO_Init+0x310>)
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	43db      	mvns	r3, r3
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4013      	ands	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4313      	orrs	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800256a:	4a27      	ldr	r2, [pc, #156]	@ (8002608 <HAL_GPIO_Init+0x310>)
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002570:	4b25      	ldr	r3, [pc, #148]	@ (8002608 <HAL_GPIO_Init+0x310>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	43db      	mvns	r3, r3
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	4013      	ands	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	4313      	orrs	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002594:	4a1c      	ldr	r2, [pc, #112]	@ (8002608 <HAL_GPIO_Init+0x310>)
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800259a:	4b1b      	ldr	r3, [pc, #108]	@ (8002608 <HAL_GPIO_Init+0x310>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	43db      	mvns	r3, r3
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	4013      	ands	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80025be:	4a12      	ldr	r2, [pc, #72]	@ (8002608 <HAL_GPIO_Init+0x310>)
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	3301      	adds	r3, #1
 80025c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	fa22 f303 	lsr.w	r3, r2, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f47f ae97 	bne.w	8002308 <HAL_GPIO_Init+0x10>
  }
}
 80025da:	bf00      	nop
 80025dc:	bf00      	nop
 80025de:	371c      	adds	r7, #28
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40010000 	.word	0x40010000
 80025f0:	48000400 	.word	0x48000400
 80025f4:	48000800 	.word	0x48000800
 80025f8:	48000c00 	.word	0x48000c00
 80025fc:	48001000 	.word	0x48001000
 8002600:	48001400 	.word	0x48001400
 8002604:	48001800 	.word	0x48001800
 8002608:	40010400 	.word	0x40010400

0800260c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8002612:	af00      	add	r7, sp, #0
 8002614:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002618:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800261c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800261e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002622:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d102      	bne.n	8002632 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	f001 b80a 	b.w	8003646 <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002632:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002636:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 8161 	beq.w	800290a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002648:	4bae      	ldr	r3, [pc, #696]	@ (8002904 <HAL_RCC_OscConfig+0x2f8>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 030c 	and.w	r3, r3, #12
 8002650:	2b04      	cmp	r3, #4
 8002652:	d00c      	beq.n	800266e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002654:	4bab      	ldr	r3, [pc, #684]	@ (8002904 <HAL_RCC_OscConfig+0x2f8>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 030c 	and.w	r3, r3, #12
 800265c:	2b08      	cmp	r3, #8
 800265e:	d157      	bne.n	8002710 <HAL_RCC_OscConfig+0x104>
 8002660:	4ba8      	ldr	r3, [pc, #672]	@ (8002904 <HAL_RCC_OscConfig+0x2f8>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800266c:	d150      	bne.n	8002710 <HAL_RCC_OscConfig+0x104>
 800266e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002672:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002676:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800267a:	fa93 f3a3 	rbit	r3, r3
 800267e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002682:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002686:	fab3 f383 	clz	r3, r3
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b3f      	cmp	r3, #63	@ 0x3f
 800268e:	d802      	bhi.n	8002696 <HAL_RCC_OscConfig+0x8a>
 8002690:	4b9c      	ldr	r3, [pc, #624]	@ (8002904 <HAL_RCC_OscConfig+0x2f8>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	e015      	b.n	80026c2 <HAL_RCC_OscConfig+0xb6>
 8002696:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800269a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80026a2:	fa93 f3a3 	rbit	r3, r3
 80026a6:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80026aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026ae:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80026b2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80026b6:	fa93 f3a3 	rbit	r3, r3
 80026ba:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80026be:	4b91      	ldr	r3, [pc, #580]	@ (8002904 <HAL_RCC_OscConfig+0x2f8>)
 80026c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80026c6:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80026ca:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80026ce:	fa92 f2a2 	rbit	r2, r2
 80026d2:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80026d6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80026da:	fab2 f282 	clz	r2, r2
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	f042 0220 	orr.w	r2, r2, #32
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	f002 021f 	and.w	r2, r2, #31
 80026ea:	2101      	movs	r1, #1
 80026ec:	fa01 f202 	lsl.w	r2, r1, r2
 80026f0:	4013      	ands	r3, r2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 8108 	beq.w	8002908 <HAL_RCC_OscConfig+0x2fc>
 80026f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026fc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	f040 80ff 	bne.w	8002908 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	f000 bf9b 	b.w	8003646 <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002710:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002714:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002720:	d106      	bne.n	8002730 <HAL_RCC_OscConfig+0x124>
 8002722:	4b78      	ldr	r3, [pc, #480]	@ (8002904 <HAL_RCC_OscConfig+0x2f8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a77      	ldr	r2, [pc, #476]	@ (8002904 <HAL_RCC_OscConfig+0x2f8>)
 8002728:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800272c:	6013      	str	r3, [r2, #0]
 800272e:	e036      	b.n	800279e <HAL_RCC_OscConfig+0x192>
 8002730:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002734:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10c      	bne.n	800275a <HAL_RCC_OscConfig+0x14e>
 8002740:	4b70      	ldr	r3, [pc, #448]	@ (8002904 <HAL_RCC_OscConfig+0x2f8>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a6f      	ldr	r2, [pc, #444]	@ (8002904 <HAL_RCC_OscConfig+0x2f8>)
 8002746:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800274a:	6013      	str	r3, [r2, #0]
 800274c:	4b6d      	ldr	r3, [pc, #436]	@ (8002904 <HAL_RCC_OscConfig+0x2f8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a6c      	ldr	r2, [pc, #432]	@ (8002904 <HAL_RCC_OscConfig+0x2f8>)
 8002752:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	e021      	b.n	800279e <HAL_RCC_OscConfig+0x192>
 800275a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800275e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800276a:	d10c      	bne.n	8002786 <HAL_RCC_OscConfig+0x17a>
 800276c:	4b65      	ldr	r3, [pc, #404]	@ (8002904 <HAL_RCC_OscConfig+0x2f8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a64      	ldr	r2, [pc, #400]	@ (8002904 <HAL_RCC_OscConfig+0x2f8>)
 8002772:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002776:	6013      	str	r3, [r2, #0]
 8002778:	4b62      	ldr	r3, [pc, #392]	@ (8002904 <HAL_RCC_OscConfig+0x2f8>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a61      	ldr	r2, [pc, #388]	@ (8002904 <HAL_RCC_OscConfig+0x2f8>)
 800277e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	e00b      	b.n	800279e <HAL_RCC_OscConfig+0x192>
 8002786:	4b5f      	ldr	r3, [pc, #380]	@ (8002904 <HAL_RCC_OscConfig+0x2f8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a5e      	ldr	r2, [pc, #376]	@ (8002904 <HAL_RCC_OscConfig+0x2f8>)
 800278c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	4b5c      	ldr	r3, [pc, #368]	@ (8002904 <HAL_RCC_OscConfig+0x2f8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a5b      	ldr	r2, [pc, #364]	@ (8002904 <HAL_RCC_OscConfig+0x2f8>)
 8002798:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800279c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800279e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027a2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d054      	beq.n	8002858 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ae:	f7fe fa07 	bl	8000bc0 <HAL_GetTick>
 80027b2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b6:	e00a      	b.n	80027ce <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027b8:	f7fe fa02 	bl	8000bc0 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b64      	cmp	r3, #100	@ 0x64
 80027c6:	d902      	bls.n	80027ce <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	f000 bf3c 	b.w	8003646 <HAL_RCC_OscConfig+0x103a>
 80027ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027d2:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d6:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80027da:	fa93 f3a3 	rbit	r3, r3
 80027de:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80027e2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e6:	fab3 f383 	clz	r3, r3
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b3f      	cmp	r3, #63	@ 0x3f
 80027ee:	d802      	bhi.n	80027f6 <HAL_RCC_OscConfig+0x1ea>
 80027f0:	4b44      	ldr	r3, [pc, #272]	@ (8002904 <HAL_RCC_OscConfig+0x2f8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	e015      	b.n	8002822 <HAL_RCC_OscConfig+0x216>
 80027f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027fa:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800280a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800280e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002812:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8002816:	fa93 f3a3 	rbit	r3, r3
 800281a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800281e:	4b39      	ldr	r3, [pc, #228]	@ (8002904 <HAL_RCC_OscConfig+0x2f8>)
 8002820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002822:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002826:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800282a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800282e:	fa92 f2a2 	rbit	r2, r2
 8002832:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8002836:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800283a:	fab2 f282 	clz	r2, r2
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	f042 0220 	orr.w	r2, r2, #32
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	f002 021f 	and.w	r2, r2, #31
 800284a:	2101      	movs	r1, #1
 800284c:	fa01 f202 	lsl.w	r2, r1, r2
 8002850:	4013      	ands	r3, r2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0b0      	beq.n	80027b8 <HAL_RCC_OscConfig+0x1ac>
 8002856:	e058      	b.n	800290a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002858:	f7fe f9b2 	bl	8000bc0 <HAL_GetTick>
 800285c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002860:	e00a      	b.n	8002878 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002862:	f7fe f9ad 	bl	8000bc0 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b64      	cmp	r3, #100	@ 0x64
 8002870:	d902      	bls.n	8002878 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	f000 bee7 	b.w	8003646 <HAL_RCC_OscConfig+0x103a>
 8002878:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800287c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002884:	fa93 f3a3 	rbit	r3, r3
 8002888:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 800288c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002890:	fab3 f383 	clz	r3, r3
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b3f      	cmp	r3, #63	@ 0x3f
 8002898:	d802      	bhi.n	80028a0 <HAL_RCC_OscConfig+0x294>
 800289a:	4b1a      	ldr	r3, [pc, #104]	@ (8002904 <HAL_RCC_OscConfig+0x2f8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	e015      	b.n	80028cc <HAL_RCC_OscConfig+0x2c0>
 80028a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028a4:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80028ac:	fa93 f3a3 	rbit	r3, r3
 80028b0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80028b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028b8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80028bc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80028c0:	fa93 f3a3 	rbit	r3, r3
 80028c4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80028c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002904 <HAL_RCC_OscConfig+0x2f8>)
 80028ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028cc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80028d0:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80028d4:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80028d8:	fa92 f2a2 	rbit	r2, r2
 80028dc:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80028e0:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80028e4:	fab2 f282 	clz	r2, r2
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	f042 0220 	orr.w	r2, r2, #32
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	f002 021f 	and.w	r2, r2, #31
 80028f4:	2101      	movs	r1, #1
 80028f6:	fa01 f202 	lsl.w	r2, r1, r2
 80028fa:	4013      	ands	r3, r2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1b0      	bne.n	8002862 <HAL_RCC_OscConfig+0x256>
 8002900:	e003      	b.n	800290a <HAL_RCC_OscConfig+0x2fe>
 8002902:	bf00      	nop
 8002904:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800290a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800290e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 816d 	beq.w	8002bfa <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002920:	4bcd      	ldr	r3, [pc, #820]	@ (8002c58 <HAL_RCC_OscConfig+0x64c>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f003 030c 	and.w	r3, r3, #12
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00c      	beq.n	8002946 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800292c:	4bca      	ldr	r3, [pc, #808]	@ (8002c58 <HAL_RCC_OscConfig+0x64c>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 030c 	and.w	r3, r3, #12
 8002934:	2b08      	cmp	r3, #8
 8002936:	d16e      	bne.n	8002a16 <HAL_RCC_OscConfig+0x40a>
 8002938:	4bc7      	ldr	r3, [pc, #796]	@ (8002c58 <HAL_RCC_OscConfig+0x64c>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002940:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002944:	d167      	bne.n	8002a16 <HAL_RCC_OscConfig+0x40a>
 8002946:	2302      	movs	r3, #2
 8002948:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002950:	fa93 f3a3 	rbit	r3, r3
 8002954:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002958:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800295c:	fab3 f383 	clz	r3, r3
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b3f      	cmp	r3, #63	@ 0x3f
 8002964:	d802      	bhi.n	800296c <HAL_RCC_OscConfig+0x360>
 8002966:	4bbc      	ldr	r3, [pc, #752]	@ (8002c58 <HAL_RCC_OscConfig+0x64c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	e013      	b.n	8002994 <HAL_RCC_OscConfig+0x388>
 800296c:	2302      	movs	r3, #2
 800296e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002972:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002976:	fa93 f3a3 	rbit	r3, r3
 800297a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800297e:	2302      	movs	r3, #2
 8002980:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002984:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002988:	fa93 f3a3 	rbit	r3, r3
 800298c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002990:	4bb1      	ldr	r3, [pc, #708]	@ (8002c58 <HAL_RCC_OscConfig+0x64c>)
 8002992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002994:	2202      	movs	r2, #2
 8002996:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800299a:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800299e:	fa92 f2a2 	rbit	r2, r2
 80029a2:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80029a6:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80029aa:	fab2 f282 	clz	r2, r2
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	f042 0220 	orr.w	r2, r2, #32
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	f002 021f 	and.w	r2, r2, #31
 80029ba:	2101      	movs	r1, #1
 80029bc:	fa01 f202 	lsl.w	r2, r1, r2
 80029c0:	4013      	ands	r3, r2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00a      	beq.n	80029dc <HAL_RCC_OscConfig+0x3d0>
 80029c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d002      	beq.n	80029dc <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	f000 be35 	b.w	8003646 <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029dc:	4b9e      	ldr	r3, [pc, #632]	@ (8002c58 <HAL_RCC_OscConfig+0x64c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	21f8      	movs	r1, #248	@ 0xf8
 80029f2:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f6:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80029fa:	fa91 f1a1 	rbit	r1, r1
 80029fe:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8002a02:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002a06:	fab1 f181 	clz	r1, r1
 8002a0a:	b2c9      	uxtb	r1, r1
 8002a0c:	408b      	lsls	r3, r1
 8002a0e:	4992      	ldr	r1, [pc, #584]	@ (8002c58 <HAL_RCC_OscConfig+0x64c>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a14:	e0f1      	b.n	8002bfa <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a1a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 8083 	beq.w	8002b2e <HAL_RCC_OscConfig+0x522>
 8002a28:	2301      	movs	r3, #1
 8002a2a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002a32:	fa93 f3a3 	rbit	r3, r3
 8002a36:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8002a3a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a3e:	fab3 f383 	clz	r3, r3
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a48:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	461a      	mov	r2, r3
 8002a50:	2301      	movs	r3, #1
 8002a52:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a54:	f7fe f8b4 	bl	8000bc0 <HAL_GetTick>
 8002a58:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5c:	e00a      	b.n	8002a74 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a5e:	f7fe f8af 	bl	8000bc0 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d902      	bls.n	8002a74 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	f000 bde9 	b.w	8003646 <HAL_RCC_OscConfig+0x103a>
 8002a74:	2302      	movs	r3, #2
 8002a76:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002a7e:	fa93 f3a3 	rbit	r3, r3
 8002a82:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8002a86:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8a:	fab3 f383 	clz	r3, r3
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a92:	d802      	bhi.n	8002a9a <HAL_RCC_OscConfig+0x48e>
 8002a94:	4b70      	ldr	r3, [pc, #448]	@ (8002c58 <HAL_RCC_OscConfig+0x64c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	e013      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4b6>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002aa4:	fa93 f3a3 	rbit	r3, r3
 8002aa8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002aac:	2302      	movs	r3, #2
 8002aae:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002ab2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002ab6:	fa93 f3a3 	rbit	r3, r3
 8002aba:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002abe:	4b66      	ldr	r3, [pc, #408]	@ (8002c58 <HAL_RCC_OscConfig+0x64c>)
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002ac8:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002acc:	fa92 f2a2 	rbit	r2, r2
 8002ad0:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8002ad4:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002ad8:	fab2 f282 	clz	r2, r2
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	f042 0220 	orr.w	r2, r2, #32
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	f002 021f 	and.w	r2, r2, #31
 8002ae8:	2101      	movs	r1, #1
 8002aea:	fa01 f202 	lsl.w	r2, r1, r2
 8002aee:	4013      	ands	r3, r2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0b4      	beq.n	8002a5e <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af4:	4b58      	ldr	r3, [pc, #352]	@ (8002c58 <HAL_RCC_OscConfig+0x64c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002afc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b00:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	21f8      	movs	r1, #248	@ 0xf8
 8002b0a:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8002b12:	fa91 f1a1 	rbit	r1, r1
 8002b16:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8002b1a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002b1e:	fab1 f181 	clz	r1, r1
 8002b22:	b2c9      	uxtb	r1, r1
 8002b24:	408b      	lsls	r3, r1
 8002b26:	494c      	ldr	r1, [pc, #304]	@ (8002c58 <HAL_RCC_OscConfig+0x64c>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	600b      	str	r3, [r1, #0]
 8002b2c:	e065      	b.n	8002bfa <HAL_RCC_OscConfig+0x5ee>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b34:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002b38:	fa93 f3a3 	rbit	r3, r3
 8002b3c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8002b40:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b44:	fab3 f383 	clz	r3, r3
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b4e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	461a      	mov	r2, r3
 8002b56:	2300      	movs	r3, #0
 8002b58:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5a:	f7fe f831 	bl	8000bc0 <HAL_GetTick>
 8002b5e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b62:	e00a      	b.n	8002b7a <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b64:	f7fe f82c 	bl	8000bc0 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d902      	bls.n	8002b7a <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	f000 bd66 	b.w	8003646 <HAL_RCC_OscConfig+0x103a>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b80:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002b84:	fa93 f3a3 	rbit	r3, r3
 8002b88:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002b8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b90:	fab3 f383 	clz	r3, r3
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b98:	d802      	bhi.n	8002ba0 <HAL_RCC_OscConfig+0x594>
 8002b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8002c58 <HAL_RCC_OscConfig+0x64c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	e013      	b.n	8002bc8 <HAL_RCC_OscConfig+0x5bc>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002baa:	fa93 f3a3 	rbit	r3, r3
 8002bae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002bb8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002bbc:	fa93 f3a3 	rbit	r3, r3
 8002bc0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002bc4:	4b24      	ldr	r3, [pc, #144]	@ (8002c58 <HAL_RCC_OscConfig+0x64c>)
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc8:	2202      	movs	r2, #2
 8002bca:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002bce:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002bd2:	fa92 f2a2 	rbit	r2, r2
 8002bd6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8002bda:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002bde:	fab2 f282 	clz	r2, r2
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	f042 0220 	orr.w	r2, r2, #32
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	f002 021f 	and.w	r2, r2, #31
 8002bee:	2101      	movs	r1, #1
 8002bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1b4      	bne.n	8002b64 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bfe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 8119 	beq.w	8002e42 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c14:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 8082 	beq.w	8002d26 <HAL_RCC_OscConfig+0x71a>
 8002c22:	2301      	movs	r3, #1
 8002c24:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c2c:	fa93 f3a3 	rbit	r3, r3
 8002c30:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8002c34:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c38:	fab3 f383 	clz	r3, r3
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	461a      	mov	r2, r3
 8002c40:	4b06      	ldr	r3, [pc, #24]	@ (8002c5c <HAL_RCC_OscConfig+0x650>)
 8002c42:	4413      	add	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	461a      	mov	r2, r3
 8002c48:	2301      	movs	r3, #1
 8002c4a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c4c:	f7fd ffb8 	bl	8000bc0 <HAL_GetTick>
 8002c50:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c54:	e00f      	b.n	8002c76 <HAL_RCC_OscConfig+0x66a>
 8002c56:	bf00      	nop
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c60:	f7fd ffae 	bl	8000bc0 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d902      	bls.n	8002c76 <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	f000 bce8 	b.w	8003646 <HAL_RCC_OscConfig+0x103a>
 8002c76:	2302      	movs	r3, #2
 8002c78:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c80:	fa93 f2a3 	rbit	r2, r3
 8002c84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c88:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002c96:	2202      	movs	r2, #2
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	fa93 f2a3 	rbit	r2, r3
 8002ca8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cb6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002cba:	2202      	movs	r2, #2
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cc2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	fa93 f2a3 	rbit	r2, r3
 8002ccc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cd0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002cd4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd6:	4bb0      	ldr	r3, [pc, #704]	@ (8002f98 <HAL_RCC_OscConfig+0x98c>)
 8002cd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cde:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002ce2:	2102      	movs	r1, #2
 8002ce4:	6019      	str	r1, [r3, #0]
 8002ce6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cea:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	fa93 f1a3 	rbit	r1, r3
 8002cf4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cf8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002cfc:	6019      	str	r1, [r3, #0]
  return result;
 8002cfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d02:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	fab3 f383 	clz	r3, r3
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	f003 031f 	and.w	r3, r3, #31
 8002d18:	2101      	movs	r1, #1
 8002d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1e:	4013      	ands	r3, r2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d09d      	beq.n	8002c60 <HAL_RCC_OscConfig+0x654>
 8002d24:	e08d      	b.n	8002e42 <HAL_RCC_OscConfig+0x836>
 8002d26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d2a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002d2e:	2201      	movs	r2, #1
 8002d30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d36:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	fa93 f2a3 	rbit	r2, r3
 8002d40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d44:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002d48:	601a      	str	r2, [r3, #0]
  return result;
 8002d4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d4e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002d52:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d54:	fab3 f383 	clz	r3, r3
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	4b8f      	ldr	r3, [pc, #572]	@ (8002f9c <HAL_RCC_OscConfig+0x990>)
 8002d5e:	4413      	add	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	461a      	mov	r2, r3
 8002d64:	2300      	movs	r3, #0
 8002d66:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d68:	f7fd ff2a 	bl	8000bc0 <HAL_GetTick>
 8002d6c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d70:	e00a      	b.n	8002d88 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d72:	f7fd ff25 	bl	8000bc0 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d902      	bls.n	8002d88 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	f000 bc5f 	b.w	8003646 <HAL_RCC_OscConfig+0x103a>
 8002d88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d8c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002d90:	2202      	movs	r2, #2
 8002d92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d98:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	fa93 f2a3 	rbit	r2, r3
 8002da2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002da6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002db0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002db4:	2202      	movs	r2, #2
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dbc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	fa93 f2a3 	rbit	r2, r3
 8002dc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dd4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002dd8:	2202      	movs	r2, #2
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002de0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	fa93 f2a3 	rbit	r2, r3
 8002dea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dee:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002df2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df4:	4b68      	ldr	r3, [pc, #416]	@ (8002f98 <HAL_RCC_OscConfig+0x98c>)
 8002df6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002df8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dfc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e00:	2102      	movs	r1, #2
 8002e02:	6019      	str	r1, [r3, #0]
 8002e04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e08:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	fa93 f1a3 	rbit	r1, r3
 8002e12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e16:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002e1a:	6019      	str	r1, [r3, #0]
  return result;
 8002e1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e20:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	fab3 f383 	clz	r3, r3
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	f003 031f 	and.w	r3, r3, #31
 8002e36:	2101      	movs	r1, #1
 8002e38:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d197      	bne.n	8002d72 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e46:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 819c 	beq.w	8003190 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e5e:	4b4e      	ldr	r3, [pc, #312]	@ (8002f98 <HAL_RCC_OscConfig+0x98c>)
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d116      	bne.n	8002e98 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e6a:	4b4b      	ldr	r3, [pc, #300]	@ (8002f98 <HAL_RCC_OscConfig+0x98c>)
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	4a4a      	ldr	r2, [pc, #296]	@ (8002f98 <HAL_RCC_OscConfig+0x98c>)
 8002e70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e74:	61d3      	str	r3, [r2, #28]
 8002e76:	4b48      	ldr	r3, [pc, #288]	@ (8002f98 <HAL_RCC_OscConfig+0x98c>)
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002e7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e8c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e90:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e92:	2301      	movs	r3, #1
 8002e94:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e98:	4b41      	ldr	r3, [pc, #260]	@ (8002fa0 <HAL_RCC_OscConfig+0x994>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d11a      	bne.n	8002eda <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ea4:	4b3e      	ldr	r3, [pc, #248]	@ (8002fa0 <HAL_RCC_OscConfig+0x994>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a3d      	ldr	r2, [pc, #244]	@ (8002fa0 <HAL_RCC_OscConfig+0x994>)
 8002eaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eae:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eb0:	f7fd fe86 	bl	8000bc0 <HAL_GetTick>
 8002eb4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb8:	e009      	b.n	8002ece <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eba:	f7fd fe81 	bl	8000bc0 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b64      	cmp	r3, #100	@ 0x64
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e3bb      	b.n	8003646 <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ece:	4b34      	ldr	r3, [pc, #208]	@ (8002fa0 <HAL_RCC_OscConfig+0x994>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0ef      	beq.n	8002eba <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ede:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d106      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x8ec>
 8002eea:	4b2b      	ldr	r3, [pc, #172]	@ (8002f98 <HAL_RCC_OscConfig+0x98c>)
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	4a2a      	ldr	r2, [pc, #168]	@ (8002f98 <HAL_RCC_OscConfig+0x98c>)
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	6213      	str	r3, [r2, #32]
 8002ef6:	e035      	b.n	8002f64 <HAL_RCC_OscConfig+0x958>
 8002ef8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002efc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10c      	bne.n	8002f22 <HAL_RCC_OscConfig+0x916>
 8002f08:	4b23      	ldr	r3, [pc, #140]	@ (8002f98 <HAL_RCC_OscConfig+0x98c>)
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	4a22      	ldr	r2, [pc, #136]	@ (8002f98 <HAL_RCC_OscConfig+0x98c>)
 8002f0e:	f023 0301 	bic.w	r3, r3, #1
 8002f12:	6213      	str	r3, [r2, #32]
 8002f14:	4b20      	ldr	r3, [pc, #128]	@ (8002f98 <HAL_RCC_OscConfig+0x98c>)
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	4a1f      	ldr	r2, [pc, #124]	@ (8002f98 <HAL_RCC_OscConfig+0x98c>)
 8002f1a:	f023 0304 	bic.w	r3, r3, #4
 8002f1e:	6213      	str	r3, [r2, #32]
 8002f20:	e020      	b.n	8002f64 <HAL_RCC_OscConfig+0x958>
 8002f22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f26:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2b05      	cmp	r3, #5
 8002f30:	d10c      	bne.n	8002f4c <HAL_RCC_OscConfig+0x940>
 8002f32:	4b19      	ldr	r3, [pc, #100]	@ (8002f98 <HAL_RCC_OscConfig+0x98c>)
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	4a18      	ldr	r2, [pc, #96]	@ (8002f98 <HAL_RCC_OscConfig+0x98c>)
 8002f38:	f043 0304 	orr.w	r3, r3, #4
 8002f3c:	6213      	str	r3, [r2, #32]
 8002f3e:	4b16      	ldr	r3, [pc, #88]	@ (8002f98 <HAL_RCC_OscConfig+0x98c>)
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	4a15      	ldr	r2, [pc, #84]	@ (8002f98 <HAL_RCC_OscConfig+0x98c>)
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	6213      	str	r3, [r2, #32]
 8002f4a:	e00b      	b.n	8002f64 <HAL_RCC_OscConfig+0x958>
 8002f4c:	4b12      	ldr	r3, [pc, #72]	@ (8002f98 <HAL_RCC_OscConfig+0x98c>)
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	4a11      	ldr	r2, [pc, #68]	@ (8002f98 <HAL_RCC_OscConfig+0x98c>)
 8002f52:	f023 0301 	bic.w	r3, r3, #1
 8002f56:	6213      	str	r3, [r2, #32]
 8002f58:	4b0f      	ldr	r3, [pc, #60]	@ (8002f98 <HAL_RCC_OscConfig+0x98c>)
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	4a0e      	ldr	r2, [pc, #56]	@ (8002f98 <HAL_RCC_OscConfig+0x98c>)
 8002f5e:	f023 0304 	bic.w	r3, r3, #4
 8002f62:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f68:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 8085 	beq.w	8003080 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f76:	f7fd fe23 	bl	8000bc0 <HAL_GetTick>
 8002f7a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f7e:	e011      	b.n	8002fa4 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f80:	f7fd fe1e 	bl	8000bc0 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d907      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e356      	b.n	8003646 <HAL_RCC_OscConfig+0x103a>
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	10908120 	.word	0x10908120
 8002fa0:	40007000 	.word	0x40007000
 8002fa4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fa8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002fac:	2202      	movs	r2, #2
 8002fae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fb4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	fa93 f2a3 	rbit	r2, r3
 8002fbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fc2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fcc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fd8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	fa93 f2a3 	rbit	r2, r3
 8002fe2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fe6:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002fea:	601a      	str	r2, [r3, #0]
  return result;
 8002fec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ff0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002ff4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff6:	fab3 f383 	clz	r3, r3
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d102      	bne.n	800300c <HAL_RCC_OscConfig+0xa00>
 8003006:	4b98      	ldr	r3, [pc, #608]	@ (8003268 <HAL_RCC_OscConfig+0xc5c>)
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	e013      	b.n	8003034 <HAL_RCC_OscConfig+0xa28>
 800300c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003010:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003014:	2202      	movs	r2, #2
 8003016:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003018:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800301c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	fa93 f2a3 	rbit	r2, r3
 8003026:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800302a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	4b8d      	ldr	r3, [pc, #564]	@ (8003268 <HAL_RCC_OscConfig+0xc5c>)
 8003032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003034:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003038:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800303c:	2102      	movs	r1, #2
 800303e:	6011      	str	r1, [r2, #0]
 8003040:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003044:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003048:	6812      	ldr	r2, [r2, #0]
 800304a:	fa92 f1a2 	rbit	r1, r2
 800304e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003052:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003056:	6011      	str	r1, [r2, #0]
  return result;
 8003058:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800305c:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003060:	6812      	ldr	r2, [r2, #0]
 8003062:	fab2 f282 	clz	r2, r2
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	f002 021f 	and.w	r2, r2, #31
 8003072:	2101      	movs	r1, #1
 8003074:	fa01 f202 	lsl.w	r2, r1, r2
 8003078:	4013      	ands	r3, r2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d080      	beq.n	8002f80 <HAL_RCC_OscConfig+0x974>
 800307e:	e07d      	b.n	800317c <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003080:	f7fd fd9e 	bl	8000bc0 <HAL_GetTick>
 8003084:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003088:	e00b      	b.n	80030a2 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800308a:	f7fd fd99 	bl	8000bc0 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	f241 3288 	movw	r2, #5000	@ 0x1388
 800309a:	4293      	cmp	r3, r2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e2d1      	b.n	8003646 <HAL_RCC_OscConfig+0x103a>
 80030a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030a6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80030aa:	2202      	movs	r2, #2
 80030ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030b2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	fa93 f2a3 	rbit	r2, r3
 80030bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030c0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030ca:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80030ce:	2202      	movs	r2, #2
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030d6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	fa93 f2a3 	rbit	r2, r3
 80030e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030e4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80030e8:	601a      	str	r2, [r3, #0]
  return result;
 80030ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030ee:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80030f2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030f4:	fab3 f383 	clz	r3, r3
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	d102      	bne.n	800310a <HAL_RCC_OscConfig+0xafe>
 8003104:	4b58      	ldr	r3, [pc, #352]	@ (8003268 <HAL_RCC_OscConfig+0xc5c>)
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	e013      	b.n	8003132 <HAL_RCC_OscConfig+0xb26>
 800310a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800310e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003112:	2202      	movs	r2, #2
 8003114:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003116:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800311a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	fa93 f2a3 	rbit	r2, r3
 8003124:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003128:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	4b4e      	ldr	r3, [pc, #312]	@ (8003268 <HAL_RCC_OscConfig+0xc5c>)
 8003130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003132:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003136:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800313a:	2102      	movs	r1, #2
 800313c:	6011      	str	r1, [r2, #0]
 800313e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003142:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003146:	6812      	ldr	r2, [r2, #0]
 8003148:	fa92 f1a2 	rbit	r1, r2
 800314c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003150:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003154:	6011      	str	r1, [r2, #0]
  return result;
 8003156:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800315a:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800315e:	6812      	ldr	r2, [r2, #0]
 8003160:	fab2 f282 	clz	r2, r2
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	f002 021f 	and.w	r2, r2, #31
 8003170:	2101      	movs	r1, #1
 8003172:	fa01 f202 	lsl.w	r2, r1, r2
 8003176:	4013      	ands	r3, r2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d186      	bne.n	800308a <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800317c:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8003180:	2b01      	cmp	r3, #1
 8003182:	d105      	bne.n	8003190 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003184:	4b38      	ldr	r3, [pc, #224]	@ (8003268 <HAL_RCC_OscConfig+0xc5c>)
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	4a37      	ldr	r2, [pc, #220]	@ (8003268 <HAL_RCC_OscConfig+0xc5c>)
 800318a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800318e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003190:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003194:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 8251 	beq.w	8003644 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031a2:	4b31      	ldr	r3, [pc, #196]	@ (8003268 <HAL_RCC_OscConfig+0xc5c>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f003 030c 	and.w	r3, r3, #12
 80031aa:	2b08      	cmp	r3, #8
 80031ac:	f000 820f 	beq.w	80035ce <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031b4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	2b02      	cmp	r3, #2
 80031be:	f040 8165 	bne.w	800348c <HAL_RCC_OscConfig+0xe80>
 80031c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031c6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80031ca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80031ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031d4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	fa93 f2a3 	rbit	r2, r3
 80031de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031e2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80031e6:	601a      	str	r2, [r3, #0]
  return result;
 80031e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031ec:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80031f0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f2:	fab3 f383 	clz	r3, r3
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80031fc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	461a      	mov	r2, r3
 8003204:	2300      	movs	r3, #0
 8003206:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003208:	f7fd fcda 	bl	8000bc0 <HAL_GetTick>
 800320c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003210:	e009      	b.n	8003226 <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003212:	f7fd fcd5 	bl	8000bc0 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e20f      	b.n	8003646 <HAL_RCC_OscConfig+0x103a>
 8003226:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800322a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800322e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003232:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003234:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003238:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	fa93 f2a3 	rbit	r2, r3
 8003242:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003246:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800324a:	601a      	str	r2, [r3, #0]
  return result;
 800324c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003250:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003254:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003256:	fab3 f383 	clz	r3, r3
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b3f      	cmp	r3, #63	@ 0x3f
 800325e:	d805      	bhi.n	800326c <HAL_RCC_OscConfig+0xc60>
 8003260:	4b01      	ldr	r3, [pc, #4]	@ (8003268 <HAL_RCC_OscConfig+0xc5c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	e02a      	b.n	80032bc <HAL_RCC_OscConfig+0xcb0>
 8003266:	bf00      	nop
 8003268:	40021000 	.word	0x40021000
 800326c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003270:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003274:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003278:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800327e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	fa93 f2a3 	rbit	r2, r3
 8003288:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800328c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003296:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800329a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032a4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	fa93 f2a3 	rbit	r2, r3
 80032ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032b2:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	4bca      	ldr	r3, [pc, #808]	@ (80035e4 <HAL_RCC_OscConfig+0xfd8>)
 80032ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032bc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80032c0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80032c4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80032c8:	6011      	str	r1, [r2, #0]
 80032ca:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80032ce:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80032d2:	6812      	ldr	r2, [r2, #0]
 80032d4:	fa92 f1a2 	rbit	r1, r2
 80032d8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80032dc:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80032e0:	6011      	str	r1, [r2, #0]
  return result;
 80032e2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80032e6:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	fab2 f282 	clz	r2, r2
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	f042 0220 	orr.w	r2, r2, #32
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	f002 021f 	and.w	r2, r2, #31
 80032fc:	2101      	movs	r1, #1
 80032fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003302:	4013      	ands	r3, r2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d184      	bne.n	8003212 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003308:	4bb6      	ldr	r3, [pc, #728]	@ (80035e4 <HAL_RCC_OscConfig+0xfd8>)
 800330a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330c:	f023 020f 	bic.w	r2, r3, #15
 8003310:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003314:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331c:	49b1      	ldr	r1, [pc, #708]	@ (80035e4 <HAL_RCC_OscConfig+0xfd8>)
 800331e:	4313      	orrs	r3, r2
 8003320:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8003322:	4bb0      	ldr	r3, [pc, #704]	@ (80035e4 <HAL_RCC_OscConfig+0xfd8>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 800332a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800332e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6a19      	ldr	r1, [r3, #32]
 8003336:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800333a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	430b      	orrs	r3, r1
 8003344:	49a7      	ldr	r1, [pc, #668]	@ (80035e4 <HAL_RCC_OscConfig+0xfd8>)
 8003346:	4313      	orrs	r3, r2
 8003348:	604b      	str	r3, [r1, #4]
 800334a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800334e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003352:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003356:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003358:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800335c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	fa93 f2a3 	rbit	r2, r3
 8003366:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800336a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800336e:	601a      	str	r2, [r3, #0]
  return result;
 8003370:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003374:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003378:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800337a:	fab3 f383 	clz	r3, r3
 800337e:	b2db      	uxtb	r3, r3
 8003380:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003384:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	461a      	mov	r2, r3
 800338c:	2301      	movs	r3, #1
 800338e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003390:	f7fd fc16 	bl	8000bc0 <HAL_GetTick>
 8003394:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003398:	e009      	b.n	80033ae <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800339a:	f7fd fc11 	bl	8000bc0 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e14b      	b.n	8003646 <HAL_RCC_OscConfig+0x103a>
 80033ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033b2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80033b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033c0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	fa93 f2a3 	rbit	r2, r3
 80033ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033ce:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80033d2:	601a      	str	r2, [r3, #0]
  return result;
 80033d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033d8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80033dc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033de:	fab3 f383 	clz	r3, r3
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b3f      	cmp	r3, #63	@ 0x3f
 80033e6:	d802      	bhi.n	80033ee <HAL_RCC_OscConfig+0xde2>
 80033e8:	4b7e      	ldr	r3, [pc, #504]	@ (80035e4 <HAL_RCC_OscConfig+0xfd8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	e027      	b.n	800343e <HAL_RCC_OscConfig+0xe32>
 80033ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033f2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80033f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003400:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	fa93 f2a3 	rbit	r2, r3
 800340a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800340e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003418:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800341c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003426:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	fa93 f2a3 	rbit	r2, r3
 8003430:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003434:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	4b6a      	ldr	r3, [pc, #424]	@ (80035e4 <HAL_RCC_OscConfig+0xfd8>)
 800343c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003442:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003446:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800344a:	6011      	str	r1, [r2, #0]
 800344c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003450:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003454:	6812      	ldr	r2, [r2, #0]
 8003456:	fa92 f1a2 	rbit	r1, r2
 800345a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800345e:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003462:	6011      	str	r1, [r2, #0]
  return result;
 8003464:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003468:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800346c:	6812      	ldr	r2, [r2, #0]
 800346e:	fab2 f282 	clz	r2, r2
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	f042 0220 	orr.w	r2, r2, #32
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	f002 021f 	and.w	r2, r2, #31
 800347e:	2101      	movs	r1, #1
 8003480:	fa01 f202 	lsl.w	r2, r1, r2
 8003484:	4013      	ands	r3, r2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d087      	beq.n	800339a <HAL_RCC_OscConfig+0xd8e>
 800348a:	e0db      	b.n	8003644 <HAL_RCC_OscConfig+0x1038>
 800348c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003490:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003494:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003498:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800349e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	fa93 f2a3 	rbit	r2, r3
 80034a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034ac:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80034b0:	601a      	str	r2, [r3, #0]
  return result;
 80034b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034b6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80034ba:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034bc:	fab3 f383 	clz	r3, r3
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80034c6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	461a      	mov	r2, r3
 80034ce:	2300      	movs	r3, #0
 80034d0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d2:	f7fd fb75 	bl	8000bc0 <HAL_GetTick>
 80034d6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034da:	e009      	b.n	80034f0 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034dc:	f7fd fb70 	bl	8000bc0 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e0aa      	b.n	8003646 <HAL_RCC_OscConfig+0x103a>
 80034f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034f4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80034f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003502:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	fa93 f2a3 	rbit	r2, r3
 800350c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003510:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003514:	601a      	str	r2, [r3, #0]
  return result;
 8003516:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800351a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800351e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003520:	fab3 f383 	clz	r3, r3
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b3f      	cmp	r3, #63	@ 0x3f
 8003528:	d802      	bhi.n	8003530 <HAL_RCC_OscConfig+0xf24>
 800352a:	4b2e      	ldr	r3, [pc, #184]	@ (80035e4 <HAL_RCC_OscConfig+0xfd8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	e027      	b.n	8003580 <HAL_RCC_OscConfig+0xf74>
 8003530:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003534:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003538:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800353c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003542:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	fa93 f2a3 	rbit	r2, r3
 800354c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003550:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800355a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800355e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003568:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	fa93 f2a3 	rbit	r2, r3
 8003572:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003576:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	4b19      	ldr	r3, [pc, #100]	@ (80035e4 <HAL_RCC_OscConfig+0xfd8>)
 800357e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003580:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003584:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003588:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800358c:	6011      	str	r1, [r2, #0]
 800358e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003592:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003596:	6812      	ldr	r2, [r2, #0]
 8003598:	fa92 f1a2 	rbit	r1, r2
 800359c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80035a0:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80035a4:	6011      	str	r1, [r2, #0]
  return result;
 80035a6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80035aa:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80035ae:	6812      	ldr	r2, [r2, #0]
 80035b0:	fab2 f282 	clz	r2, r2
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	f042 0220 	orr.w	r2, r2, #32
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	f002 021f 	and.w	r2, r2, #31
 80035c0:	2101      	movs	r1, #1
 80035c2:	fa01 f202 	lsl.w	r2, r1, r2
 80035c6:	4013      	ands	r3, r2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d187      	bne.n	80034dc <HAL_RCC_OscConfig+0xed0>
 80035cc:	e03a      	b.n	8003644 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035d2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d104      	bne.n	80035e8 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e031      	b.n	8003646 <HAL_RCC_OscConfig+0x103a>
 80035e2:	bf00      	nop
 80035e4:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035e8:	4b19      	ldr	r3, [pc, #100]	@ (8003650 <HAL_RCC_OscConfig+0x1044>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80035f0:	4b17      	ldr	r3, [pc, #92]	@ (8003650 <HAL_RCC_OscConfig+0x1044>)
 80035f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f4:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035f8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80035fc:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003600:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003604:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	429a      	cmp	r2, r3
 800360e:	d117      	bne.n	8003640 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003610:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003614:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003618:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800361c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003624:	429a      	cmp	r2, r3
 8003626:	d10b      	bne.n	8003640 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003628:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800362c:	f003 020f 	and.w	r2, r3, #15
 8003630:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003634:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800363c:	429a      	cmp	r2, r3
 800363e:	d001      	beq.n	8003644 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e000      	b.n	8003646 <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40021000 	.word	0x40021000

08003654 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b09e      	sub	sp, #120	@ 0x78
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800365e:	2300      	movs	r3, #0
 8003660:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e154      	b.n	8003916 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800366c:	4b89      	ldr	r3, [pc, #548]	@ (8003894 <HAL_RCC_ClockConfig+0x240>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	429a      	cmp	r2, r3
 8003678:	d910      	bls.n	800369c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800367a:	4b86      	ldr	r3, [pc, #536]	@ (8003894 <HAL_RCC_ClockConfig+0x240>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f023 0207 	bic.w	r2, r3, #7
 8003682:	4984      	ldr	r1, [pc, #528]	@ (8003894 <HAL_RCC_ClockConfig+0x240>)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	4313      	orrs	r3, r2
 8003688:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800368a:	4b82      	ldr	r3, [pc, #520]	@ (8003894 <HAL_RCC_ClockConfig+0x240>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0307 	and.w	r3, r3, #7
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	429a      	cmp	r2, r3
 8003696:	d001      	beq.n	800369c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e13c      	b.n	8003916 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d008      	beq.n	80036ba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a8:	4b7b      	ldr	r3, [pc, #492]	@ (8003898 <HAL_RCC_ClockConfig+0x244>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	4978      	ldr	r1, [pc, #480]	@ (8003898 <HAL_RCC_ClockConfig+0x244>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 80cd 	beq.w	8003862 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d137      	bne.n	8003740 <HAL_RCC_ClockConfig+0xec>
 80036d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036d8:	fa93 f3a3 	rbit	r3, r3
 80036dc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80036de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e0:	fab3 f383 	clz	r3, r3
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b3f      	cmp	r3, #63	@ 0x3f
 80036e8:	d802      	bhi.n	80036f0 <HAL_RCC_ClockConfig+0x9c>
 80036ea:	4b6b      	ldr	r3, [pc, #428]	@ (8003898 <HAL_RCC_ClockConfig+0x244>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	e00f      	b.n	8003710 <HAL_RCC_ClockConfig+0xbc>
 80036f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036f8:	fa93 f3a3 	rbit	r3, r3
 80036fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80036fe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003702:	663b      	str	r3, [r7, #96]	@ 0x60
 8003704:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003706:	fa93 f3a3 	rbit	r3, r3
 800370a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800370c:	4b62      	ldr	r3, [pc, #392]	@ (8003898 <HAL_RCC_ClockConfig+0x244>)
 800370e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003710:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003714:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003716:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003718:	fa92 f2a2 	rbit	r2, r2
 800371c:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800371e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003720:	fab2 f282 	clz	r2, r2
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	f042 0220 	orr.w	r2, r2, #32
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	f002 021f 	and.w	r2, r2, #31
 8003730:	2101      	movs	r1, #1
 8003732:	fa01 f202 	lsl.w	r2, r1, r2
 8003736:	4013      	ands	r3, r2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d171      	bne.n	8003820 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e0ea      	b.n	8003916 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	2b02      	cmp	r3, #2
 8003746:	d137      	bne.n	80037b8 <HAL_RCC_ClockConfig+0x164>
 8003748:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800374c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003750:	fa93 f3a3 	rbit	r3, r3
 8003754:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003756:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003758:	fab3 f383 	clz	r3, r3
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003760:	d802      	bhi.n	8003768 <HAL_RCC_ClockConfig+0x114>
 8003762:	4b4d      	ldr	r3, [pc, #308]	@ (8003898 <HAL_RCC_ClockConfig+0x244>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	e00f      	b.n	8003788 <HAL_RCC_ClockConfig+0x134>
 8003768:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800376c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003770:	fa93 f3a3 	rbit	r3, r3
 8003774:	647b      	str	r3, [r7, #68]	@ 0x44
 8003776:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800377a:	643b      	str	r3, [r7, #64]	@ 0x40
 800377c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800377e:	fa93 f3a3 	rbit	r3, r3
 8003782:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003784:	4b44      	ldr	r3, [pc, #272]	@ (8003898 <HAL_RCC_ClockConfig+0x244>)
 8003786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003788:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800378c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800378e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003790:	fa92 f2a2 	rbit	r2, r2
 8003794:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003796:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003798:	fab2 f282 	clz	r2, r2
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	f042 0220 	orr.w	r2, r2, #32
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	f002 021f 	and.w	r2, r2, #31
 80037a8:	2101      	movs	r1, #1
 80037aa:	fa01 f202 	lsl.w	r2, r1, r2
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d135      	bne.n	8003820 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0ae      	b.n	8003916 <HAL_RCC_ClockConfig+0x2c2>
 80037b8:	2302      	movs	r3, #2
 80037ba:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037be:	fa93 f3a3 	rbit	r3, r3
 80037c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80037c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c6:	fab3 f383 	clz	r3, r3
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b3f      	cmp	r3, #63	@ 0x3f
 80037ce:	d802      	bhi.n	80037d6 <HAL_RCC_ClockConfig+0x182>
 80037d0:	4b31      	ldr	r3, [pc, #196]	@ (8003898 <HAL_RCC_ClockConfig+0x244>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	e00d      	b.n	80037f2 <HAL_RCC_ClockConfig+0x19e>
 80037d6:	2302      	movs	r3, #2
 80037d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037dc:	fa93 f3a3 	rbit	r3, r3
 80037e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80037e2:	2302      	movs	r3, #2
 80037e4:	623b      	str	r3, [r7, #32]
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	fa93 f3a3 	rbit	r3, r3
 80037ec:	61fb      	str	r3, [r7, #28]
 80037ee:	4b2a      	ldr	r3, [pc, #168]	@ (8003898 <HAL_RCC_ClockConfig+0x244>)
 80037f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f2:	2202      	movs	r2, #2
 80037f4:	61ba      	str	r2, [r7, #24]
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	fa92 f2a2 	rbit	r2, r2
 80037fc:	617a      	str	r2, [r7, #20]
  return result;
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	fab2 f282 	clz	r2, r2
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	f042 0220 	orr.w	r2, r2, #32
 800380a:	b2d2      	uxtb	r2, r2
 800380c:	f002 021f 	and.w	r2, r2, #31
 8003810:	2101      	movs	r1, #1
 8003812:	fa01 f202 	lsl.w	r2, r1, r2
 8003816:	4013      	ands	r3, r2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e07a      	b.n	8003916 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003820:	4b1d      	ldr	r3, [pc, #116]	@ (8003898 <HAL_RCC_ClockConfig+0x244>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f023 0203 	bic.w	r2, r3, #3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	491a      	ldr	r1, [pc, #104]	@ (8003898 <HAL_RCC_ClockConfig+0x244>)
 800382e:	4313      	orrs	r3, r2
 8003830:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003832:	f7fd f9c5 	bl	8000bc0 <HAL_GetTick>
 8003836:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003838:	e00a      	b.n	8003850 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800383a:	f7fd f9c1 	bl	8000bc0 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003848:	4293      	cmp	r3, r2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e062      	b.n	8003916 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003850:	4b11      	ldr	r3, [pc, #68]	@ (8003898 <HAL_RCC_ClockConfig+0x244>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f003 020c 	and.w	r2, r3, #12
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	429a      	cmp	r2, r3
 8003860:	d1eb      	bne.n	800383a <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003862:	4b0c      	ldr	r3, [pc, #48]	@ (8003894 <HAL_RCC_ClockConfig+0x240>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d215      	bcs.n	800389c <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003870:	4b08      	ldr	r3, [pc, #32]	@ (8003894 <HAL_RCC_ClockConfig+0x240>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f023 0207 	bic.w	r2, r3, #7
 8003878:	4906      	ldr	r1, [pc, #24]	@ (8003894 <HAL_RCC_ClockConfig+0x240>)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	4313      	orrs	r3, r2
 800387e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003880:	4b04      	ldr	r3, [pc, #16]	@ (8003894 <HAL_RCC_ClockConfig+0x240>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	429a      	cmp	r2, r3
 800388c:	d006      	beq.n	800389c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e041      	b.n	8003916 <HAL_RCC_ClockConfig+0x2c2>
 8003892:	bf00      	nop
 8003894:	40022000 	.word	0x40022000
 8003898:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d008      	beq.n	80038ba <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003920 <HAL_RCC_ClockConfig+0x2cc>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	491a      	ldr	r1, [pc, #104]	@ (8003920 <HAL_RCC_ClockConfig+0x2cc>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d009      	beq.n	80038da <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038c6:	4b16      	ldr	r3, [pc, #88]	@ (8003920 <HAL_RCC_ClockConfig+0x2cc>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	4912      	ldr	r1, [pc, #72]	@ (8003920 <HAL_RCC_ClockConfig+0x2cc>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80038da:	f000 f829 	bl	8003930 <HAL_RCC_GetSysClockFreq>
 80038de:	4601      	mov	r1, r0
 80038e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003920 <HAL_RCC_ClockConfig+0x2cc>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038e8:	22f0      	movs	r2, #240	@ 0xf0
 80038ea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	fa92 f2a2 	rbit	r2, r2
 80038f2:	60fa      	str	r2, [r7, #12]
  return result;
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	fab2 f282 	clz	r2, r2
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	40d3      	lsrs	r3, r2
 80038fe:	4a09      	ldr	r2, [pc, #36]	@ (8003924 <HAL_RCC_ClockConfig+0x2d0>)
 8003900:	5cd3      	ldrb	r3, [r2, r3]
 8003902:	fa21 f303 	lsr.w	r3, r1, r3
 8003906:	4a08      	ldr	r2, [pc, #32]	@ (8003928 <HAL_RCC_ClockConfig+0x2d4>)
 8003908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800390a:	4b08      	ldr	r3, [pc, #32]	@ (800392c <HAL_RCC_ClockConfig+0x2d8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f7fd f912 	bl	8000b38 <HAL_InitTick>
  
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3778      	adds	r7, #120	@ 0x78
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40021000 	.word	0x40021000
 8003924:	08004fbc 	.word	0x08004fbc
 8003928:	20000000 	.word	0x20000000
 800392c:	20000004 	.word	0x20000004

08003930 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003936:	2300      	movs	r3, #0
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	2300      	movs	r3, #0
 800393c:	60bb      	str	r3, [r7, #8]
 800393e:	2300      	movs	r3, #0
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	2300      	movs	r3, #0
 8003944:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003946:	2300      	movs	r3, #0
 8003948:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800394a:	4b1f      	ldr	r3, [pc, #124]	@ (80039c8 <HAL_RCC_GetSysClockFreq+0x98>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f003 030c 	and.w	r3, r3, #12
 8003956:	2b04      	cmp	r3, #4
 8003958:	d002      	beq.n	8003960 <HAL_RCC_GetSysClockFreq+0x30>
 800395a:	2b08      	cmp	r3, #8
 800395c:	d003      	beq.n	8003966 <HAL_RCC_GetSysClockFreq+0x36>
 800395e:	e029      	b.n	80039b4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003960:	4b1a      	ldr	r3, [pc, #104]	@ (80039cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003962:	613b      	str	r3, [r7, #16]
      break;
 8003964:	e029      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	0c9b      	lsrs	r3, r3, #18
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	4a18      	ldr	r2, [pc, #96]	@ (80039d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003970:	5cd3      	ldrb	r3, [r2, r3]
 8003972:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003974:	4b14      	ldr	r3, [pc, #80]	@ (80039c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003978:	f003 030f 	and.w	r3, r3, #15
 800397c:	4a15      	ldr	r2, [pc, #84]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 800397e:	5cd3      	ldrb	r3, [r2, r3]
 8003980:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d008      	beq.n	800399e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800398c:	4a0f      	ldr	r2, [pc, #60]	@ (80039cc <HAL_RCC_GetSysClockFreq+0x9c>)
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	fbb2 f2f3 	udiv	r2, r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	fb02 f303 	mul.w	r3, r2, r3
 800399a:	617b      	str	r3, [r7, #20]
 800399c:	e007      	b.n	80039ae <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800399e:	4a0b      	ldr	r2, [pc, #44]	@ (80039cc <HAL_RCC_GetSysClockFreq+0x9c>)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	fb02 f303 	mul.w	r3, r2, r3
 80039ac:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	613b      	str	r3, [r7, #16]
      break;
 80039b2:	e002      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039b4:	4b05      	ldr	r3, [pc, #20]	@ (80039cc <HAL_RCC_GetSysClockFreq+0x9c>)
 80039b6:	613b      	str	r3, [r7, #16]
      break;
 80039b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ba:	693b      	ldr	r3, [r7, #16]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	371c      	adds	r7, #28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	40021000 	.word	0x40021000
 80039cc:	007a1200 	.word	0x007a1200
 80039d0:	08004fcc 	.word	0x08004fcc
 80039d4:	08004fdc 	.word	0x08004fdc

080039d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b092      	sub	sp, #72	@ 0x48
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80039e8:	2300      	movs	r3, #0
 80039ea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 80d2 	beq.w	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039fc:	4b4d      	ldr	r3, [pc, #308]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80039fe:	69db      	ldr	r3, [r3, #28]
 8003a00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10e      	bne.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a08:	4b4a      	ldr	r3, [pc, #296]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	4a49      	ldr	r2, [pc, #292]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003a0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a12:	61d3      	str	r3, [r2, #28]
 8003a14:	4b47      	ldr	r3, [pc, #284]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a1c:	60bb      	str	r3, [r7, #8]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a20:	2301      	movs	r3, #1
 8003a22:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a26:	4b44      	ldr	r3, [pc, #272]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d118      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a32:	4b41      	ldr	r3, [pc, #260]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a40      	ldr	r2, [pc, #256]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a3c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a3e:	f7fd f8bf 	bl	8000bc0 <HAL_GetTick>
 8003a42:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a44:	e008      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a46:	f7fd f8bb 	bl	8000bc0 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b64      	cmp	r3, #100	@ 0x64
 8003a52:	d901      	bls.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e1d4      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a58:	4b37      	ldr	r3, [pc, #220]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0f0      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a64:	4b33      	ldr	r3, [pc, #204]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 8082 	beq.w	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a7e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d07a      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a84:	4b2b      	ldr	r3, [pc, #172]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a92:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a96:	fa93 f3a3 	rbit	r3, r3
 8003a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a9e:	fab3 f383 	clz	r3, r3
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4b25      	ldr	r3, [pc, #148]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003aa8:	4413      	add	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	461a      	mov	r2, r3
 8003aae:	2301      	movs	r3, #1
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aba:	fa93 f3a3 	rbit	r3, r3
 8003abe:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003ac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ac2:	fab3 f383 	clz	r3, r3
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4b1c      	ldr	r3, [pc, #112]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003acc:	4413      	add	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ad6:	4a17      	ldr	r2, [pc, #92]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ada:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003adc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d049      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae6:	f7fd f86b 	bl	8000bc0 <HAL_GetTick>
 8003aea:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aec:	e00a      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aee:	f7fd f867 	bl	8000bc0 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e17e      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8003b04:	2302      	movs	r3, #2
 8003b06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b0a:	fa93 f3a3 	rbit	r3, r3
 8003b0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b10:	2302      	movs	r3, #2
 8003b12:	623b      	str	r3, [r7, #32]
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	fa93 f3a3 	rbit	r3, r3
 8003b1a:	61fb      	str	r3, [r7, #28]
  return result;
 8003b1c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b1e:	fab3 f383 	clz	r3, r3
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d108      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003b2e:	4b01      	ldr	r3, [pc, #4]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	e00d      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003b34:	40021000 	.word	0x40021000
 8003b38:	40007000 	.word	0x40007000
 8003b3c:	10908100 	.word	0x10908100
 8003b40:	2302      	movs	r3, #2
 8003b42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	fa93 f3a3 	rbit	r3, r3
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	4b9a      	ldr	r3, [pc, #616]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b50:	2202      	movs	r2, #2
 8003b52:	613a      	str	r2, [r7, #16]
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	fa92 f2a2 	rbit	r2, r2
 8003b5a:	60fa      	str	r2, [r7, #12]
  return result;
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	fab2 f282 	clz	r2, r2
 8003b62:	b2d2      	uxtb	r2, r2
 8003b64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	f002 021f 	and.w	r2, r2, #31
 8003b6e:	2101      	movs	r1, #1
 8003b70:	fa01 f202 	lsl.w	r2, r1, r2
 8003b74:	4013      	ands	r3, r2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0b9      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003b7a:	4b8f      	ldr	r3, [pc, #572]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	498c      	ldr	r1, [pc, #560]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b8c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d105      	bne.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b94:	4b88      	ldr	r3, [pc, #544]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	4a87      	ldr	r2, [pc, #540]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b9e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d008      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bac:	4b82      	ldr	r3, [pc, #520]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb0:	f023 0203 	bic.w	r2, r3, #3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	497f      	ldr	r1, [pc, #508]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d008      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bca:	4b7b      	ldr	r3, [pc, #492]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bce:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	4978      	ldr	r1, [pc, #480]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d008      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003be8:	4b73      	ldr	r3, [pc, #460]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	4970      	ldr	r1, [pc, #448]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0320 	and.w	r3, r3, #32
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d008      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c06:	4b6c      	ldr	r3, [pc, #432]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0a:	f023 0210 	bic.w	r2, r3, #16
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	4969      	ldr	r1, [pc, #420]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d008      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003c24:	4b64      	ldr	r3, [pc, #400]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c30:	4961      	ldr	r1, [pc, #388]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d008      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c42:	4b5d      	ldr	r3, [pc, #372]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c46:	f023 0220 	bic.w	r2, r3, #32
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	495a      	ldr	r1, [pc, #360]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c60:	4b55      	ldr	r3, [pc, #340]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c64:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6c:	4952      	ldr	r1, [pc, #328]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d008      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c7e:	4b4e      	ldr	r3, [pc, #312]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	494b      	ldr	r1, [pc, #300]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0310 	and.w	r3, r3, #16
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d008      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c9c:	4b46      	ldr	r3, [pc, #280]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	4943      	ldr	r1, [pc, #268]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d008      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003cba:	4b3f      	ldr	r3, [pc, #252]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc6:	493c      	ldr	r1, [pc, #240]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d008      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003cd8:	4b37      	ldr	r3, [pc, #220]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cdc:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce4:	4934      	ldr	r1, [pc, #208]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d008      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003cf6:	4b30      	ldr	r3, [pc, #192]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfa:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d02:	492d      	ldr	r1, [pc, #180]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d008      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003d14:	4b28      	ldr	r3, [pc, #160]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d20:	4925      	ldr	r1, [pc, #148]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d008      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003d32:	4b21      	ldr	r3, [pc, #132]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d36:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3e:	491e      	ldr	r1, [pc, #120]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d008      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003d50:	4b19      	ldr	r3, [pc, #100]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d54:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d5c:	4916      	ldr	r1, [pc, #88]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d008      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003d6e:	4b12      	ldr	r3, [pc, #72]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d72:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d7a:	490f      	ldr	r1, [pc, #60]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d008      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d90:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d98:	4907      	ldr	r1, [pc, #28]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00c      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003daa:	4b03      	ldr	r3, [pc, #12]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dae:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	e002      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003db6:	bf00      	nop
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dbe:	4913      	ldr	r1, [pc, #76]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d008      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ddc:	490b      	ldr	r1, [pc, #44]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d008      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003dee:	4b07      	ldr	r3, [pc, #28]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dfa:	4904      	ldr	r1, [pc, #16]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3748      	adds	r7, #72	@ 0x48
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40021000 	.word	0x40021000

08003e10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e049      	b.n	8003eb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d106      	bne.n	8003e3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7fc fd9a 	bl	8000970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4610      	mov	r0, r2
 8003e50:	f000 fb80 	bl	8004554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e049      	b.n	8003f64 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d106      	bne.n	8003eea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 f841 	bl	8003f6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2202      	movs	r2, #2
 8003eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	3304      	adds	r3, #4
 8003efa:	4619      	mov	r1, r3
 8003efc:	4610      	mov	r0, r2
 8003efe:	f000 fb29 	bl	8004554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d109      	bne.n	8003fa4 <HAL_TIM_PWM_Start+0x24>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	bf14      	ite	ne
 8003f9c:	2301      	movne	r3, #1
 8003f9e:	2300      	moveq	r3, #0
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	e03c      	b.n	800401e <HAL_TIM_PWM_Start+0x9e>
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d109      	bne.n	8003fbe <HAL_TIM_PWM_Start+0x3e>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	bf14      	ite	ne
 8003fb6:	2301      	movne	r3, #1
 8003fb8:	2300      	moveq	r3, #0
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	e02f      	b.n	800401e <HAL_TIM_PWM_Start+0x9e>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d109      	bne.n	8003fd8 <HAL_TIM_PWM_Start+0x58>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	bf14      	ite	ne
 8003fd0:	2301      	movne	r3, #1
 8003fd2:	2300      	moveq	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	e022      	b.n	800401e <HAL_TIM_PWM_Start+0x9e>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	2b0c      	cmp	r3, #12
 8003fdc:	d109      	bne.n	8003ff2 <HAL_TIM_PWM_Start+0x72>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	bf14      	ite	ne
 8003fea:	2301      	movne	r3, #1
 8003fec:	2300      	moveq	r3, #0
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	e015      	b.n	800401e <HAL_TIM_PWM_Start+0x9e>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b10      	cmp	r3, #16
 8003ff6:	d109      	bne.n	800400c <HAL_TIM_PWM_Start+0x8c>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b01      	cmp	r3, #1
 8004002:	bf14      	ite	ne
 8004004:	2301      	movne	r3, #1
 8004006:	2300      	moveq	r3, #0
 8004008:	b2db      	uxtb	r3, r3
 800400a:	e008      	b.n	800401e <HAL_TIM_PWM_Start+0x9e>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b01      	cmp	r3, #1
 8004016:	bf14      	ite	ne
 8004018:	2301      	movne	r3, #1
 800401a:	2300      	moveq	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e0a1      	b.n	800416a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d104      	bne.n	8004036 <HAL_TIM_PWM_Start+0xb6>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2202      	movs	r2, #2
 8004030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004034:	e023      	b.n	800407e <HAL_TIM_PWM_Start+0xfe>
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	2b04      	cmp	r3, #4
 800403a:	d104      	bne.n	8004046 <HAL_TIM_PWM_Start+0xc6>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004044:	e01b      	b.n	800407e <HAL_TIM_PWM_Start+0xfe>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b08      	cmp	r3, #8
 800404a:	d104      	bne.n	8004056 <HAL_TIM_PWM_Start+0xd6>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004054:	e013      	b.n	800407e <HAL_TIM_PWM_Start+0xfe>
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b0c      	cmp	r3, #12
 800405a:	d104      	bne.n	8004066 <HAL_TIM_PWM_Start+0xe6>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004064:	e00b      	b.n	800407e <HAL_TIM_PWM_Start+0xfe>
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2b10      	cmp	r3, #16
 800406a:	d104      	bne.n	8004076 <HAL_TIM_PWM_Start+0xf6>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004074:	e003      	b.n	800407e <HAL_TIM_PWM_Start+0xfe>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2202      	movs	r2, #2
 800407a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2201      	movs	r2, #1
 8004084:	6839      	ldr	r1, [r7, #0]
 8004086:	4618      	mov	r0, r3
 8004088:	f000 feae 	bl	8004de8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a38      	ldr	r2, [pc, #224]	@ (8004174 <HAL_TIM_PWM_Start+0x1f4>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d018      	beq.n	80040c8 <HAL_TIM_PWM_Start+0x148>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a37      	ldr	r2, [pc, #220]	@ (8004178 <HAL_TIM_PWM_Start+0x1f8>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d013      	beq.n	80040c8 <HAL_TIM_PWM_Start+0x148>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a35      	ldr	r2, [pc, #212]	@ (800417c <HAL_TIM_PWM_Start+0x1fc>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d00e      	beq.n	80040c8 <HAL_TIM_PWM_Start+0x148>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a34      	ldr	r2, [pc, #208]	@ (8004180 <HAL_TIM_PWM_Start+0x200>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d009      	beq.n	80040c8 <HAL_TIM_PWM_Start+0x148>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a32      	ldr	r2, [pc, #200]	@ (8004184 <HAL_TIM_PWM_Start+0x204>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d004      	beq.n	80040c8 <HAL_TIM_PWM_Start+0x148>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a31      	ldr	r2, [pc, #196]	@ (8004188 <HAL_TIM_PWM_Start+0x208>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d101      	bne.n	80040cc <HAL_TIM_PWM_Start+0x14c>
 80040c8:	2301      	movs	r3, #1
 80040ca:	e000      	b.n	80040ce <HAL_TIM_PWM_Start+0x14e>
 80040cc:	2300      	movs	r3, #0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d007      	beq.n	80040e2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a23      	ldr	r2, [pc, #140]	@ (8004174 <HAL_TIM_PWM_Start+0x1f4>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d01d      	beq.n	8004128 <HAL_TIM_PWM_Start+0x1a8>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040f4:	d018      	beq.n	8004128 <HAL_TIM_PWM_Start+0x1a8>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a24      	ldr	r2, [pc, #144]	@ (800418c <HAL_TIM_PWM_Start+0x20c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d013      	beq.n	8004128 <HAL_TIM_PWM_Start+0x1a8>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a22      	ldr	r2, [pc, #136]	@ (8004190 <HAL_TIM_PWM_Start+0x210>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d00e      	beq.n	8004128 <HAL_TIM_PWM_Start+0x1a8>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a1a      	ldr	r2, [pc, #104]	@ (8004178 <HAL_TIM_PWM_Start+0x1f8>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d009      	beq.n	8004128 <HAL_TIM_PWM_Start+0x1a8>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a18      	ldr	r2, [pc, #96]	@ (800417c <HAL_TIM_PWM_Start+0x1fc>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d004      	beq.n	8004128 <HAL_TIM_PWM_Start+0x1a8>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a19      	ldr	r2, [pc, #100]	@ (8004188 <HAL_TIM_PWM_Start+0x208>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d115      	bne.n	8004154 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	4b19      	ldr	r3, [pc, #100]	@ (8004194 <HAL_TIM_PWM_Start+0x214>)
 8004130:	4013      	ands	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2b06      	cmp	r3, #6
 8004138:	d015      	beq.n	8004166 <HAL_TIM_PWM_Start+0x1e6>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004140:	d011      	beq.n	8004166 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f042 0201 	orr.w	r2, r2, #1
 8004150:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004152:	e008      	b.n	8004166 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0201 	orr.w	r2, r2, #1
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	e000      	b.n	8004168 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004166:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40012c00 	.word	0x40012c00
 8004178:	40013400 	.word	0x40013400
 800417c:	40014000 	.word	0x40014000
 8004180:	40014400 	.word	0x40014400
 8004184:	40014800 	.word	0x40014800
 8004188:	40015000 	.word	0x40015000
 800418c:	40000400 	.word	0x40000400
 8004190:	40000800 	.word	0x40000800
 8004194:	00010007 	.word	0x00010007

08004198 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041a4:	2300      	movs	r3, #0
 80041a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d101      	bne.n	80041b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80041b2:	2302      	movs	r3, #2
 80041b4:	e0ff      	b.n	80043b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b14      	cmp	r3, #20
 80041c2:	f200 80f0 	bhi.w	80043a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80041c6:	a201      	add	r2, pc, #4	@ (adr r2, 80041cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80041c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041cc:	08004221 	.word	0x08004221
 80041d0:	080043a7 	.word	0x080043a7
 80041d4:	080043a7 	.word	0x080043a7
 80041d8:	080043a7 	.word	0x080043a7
 80041dc:	08004261 	.word	0x08004261
 80041e0:	080043a7 	.word	0x080043a7
 80041e4:	080043a7 	.word	0x080043a7
 80041e8:	080043a7 	.word	0x080043a7
 80041ec:	080042a3 	.word	0x080042a3
 80041f0:	080043a7 	.word	0x080043a7
 80041f4:	080043a7 	.word	0x080043a7
 80041f8:	080043a7 	.word	0x080043a7
 80041fc:	080042e3 	.word	0x080042e3
 8004200:	080043a7 	.word	0x080043a7
 8004204:	080043a7 	.word	0x080043a7
 8004208:	080043a7 	.word	0x080043a7
 800420c:	08004325 	.word	0x08004325
 8004210:	080043a7 	.word	0x080043a7
 8004214:	080043a7 	.word	0x080043a7
 8004218:	080043a7 	.word	0x080043a7
 800421c:	08004365 	.word	0x08004365
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68b9      	ldr	r1, [r7, #8]
 8004226:	4618      	mov	r0, r3
 8004228:	f000 fa3e 	bl	80046a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	699a      	ldr	r2, [r3, #24]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0208 	orr.w	r2, r2, #8
 800423a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	699a      	ldr	r2, [r3, #24]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 0204 	bic.w	r2, r2, #4
 800424a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6999      	ldr	r1, [r3, #24]
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	691a      	ldr	r2, [r3, #16]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	619a      	str	r2, [r3, #24]
      break;
 800425e:	e0a5      	b.n	80043ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68b9      	ldr	r1, [r7, #8]
 8004266:	4618      	mov	r0, r3
 8004268:	f000 fab8 	bl	80047dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	699a      	ldr	r2, [r3, #24]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800427a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699a      	ldr	r2, [r3, #24]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800428a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6999      	ldr	r1, [r3, #24]
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	021a      	lsls	r2, r3, #8
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	619a      	str	r2, [r3, #24]
      break;
 80042a0:	e084      	b.n	80043ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68b9      	ldr	r1, [r7, #8]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 fb2b 	bl	8004904 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	69da      	ldr	r2, [r3, #28]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f042 0208 	orr.w	r2, r2, #8
 80042bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	69da      	ldr	r2, [r3, #28]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0204 	bic.w	r2, r2, #4
 80042cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	69d9      	ldr	r1, [r3, #28]
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	691a      	ldr	r2, [r3, #16]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	430a      	orrs	r2, r1
 80042de:	61da      	str	r2, [r3, #28]
      break;
 80042e0:	e064      	b.n	80043ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68b9      	ldr	r1, [r7, #8]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f000 fb9d 	bl	8004a28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	69da      	ldr	r2, [r3, #28]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	69da      	ldr	r2, [r3, #28]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800430c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	69d9      	ldr	r1, [r3, #28]
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	021a      	lsls	r2, r3, #8
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	61da      	str	r2, [r3, #28]
      break;
 8004322:	e043      	b.n	80043ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68b9      	ldr	r1, [r7, #8]
 800432a:	4618      	mov	r0, r3
 800432c:	f000 fbec 	bl	8004b08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 0208 	orr.w	r2, r2, #8
 800433e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0204 	bic.w	r2, r2, #4
 800434e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	691a      	ldr	r2, [r3, #16]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004362:	e023      	b.n	80043ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68b9      	ldr	r1, [r7, #8]
 800436a:	4618      	mov	r0, r3
 800436c:	f000 fc36 	bl	8004bdc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800437e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800438e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	021a      	lsls	r2, r3, #8
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80043a4:	e002      	b.n	80043ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	75fb      	strb	r3, [r7, #23]
      break;
 80043aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop

080043c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d101      	bne.n	80043dc <HAL_TIM_ConfigClockSource+0x1c>
 80043d8:	2302      	movs	r3, #2
 80043da:	e0b6      	b.n	800454a <HAL_TIM_ConfigClockSource+0x18a>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80043fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004406:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004418:	d03e      	beq.n	8004498 <HAL_TIM_ConfigClockSource+0xd8>
 800441a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800441e:	f200 8087 	bhi.w	8004530 <HAL_TIM_ConfigClockSource+0x170>
 8004422:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004426:	f000 8086 	beq.w	8004536 <HAL_TIM_ConfigClockSource+0x176>
 800442a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800442e:	d87f      	bhi.n	8004530 <HAL_TIM_ConfigClockSource+0x170>
 8004430:	2b70      	cmp	r3, #112	@ 0x70
 8004432:	d01a      	beq.n	800446a <HAL_TIM_ConfigClockSource+0xaa>
 8004434:	2b70      	cmp	r3, #112	@ 0x70
 8004436:	d87b      	bhi.n	8004530 <HAL_TIM_ConfigClockSource+0x170>
 8004438:	2b60      	cmp	r3, #96	@ 0x60
 800443a:	d050      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x11e>
 800443c:	2b60      	cmp	r3, #96	@ 0x60
 800443e:	d877      	bhi.n	8004530 <HAL_TIM_ConfigClockSource+0x170>
 8004440:	2b50      	cmp	r3, #80	@ 0x50
 8004442:	d03c      	beq.n	80044be <HAL_TIM_ConfigClockSource+0xfe>
 8004444:	2b50      	cmp	r3, #80	@ 0x50
 8004446:	d873      	bhi.n	8004530 <HAL_TIM_ConfigClockSource+0x170>
 8004448:	2b40      	cmp	r3, #64	@ 0x40
 800444a:	d058      	beq.n	80044fe <HAL_TIM_ConfigClockSource+0x13e>
 800444c:	2b40      	cmp	r3, #64	@ 0x40
 800444e:	d86f      	bhi.n	8004530 <HAL_TIM_ConfigClockSource+0x170>
 8004450:	2b30      	cmp	r3, #48	@ 0x30
 8004452:	d064      	beq.n	800451e <HAL_TIM_ConfigClockSource+0x15e>
 8004454:	2b30      	cmp	r3, #48	@ 0x30
 8004456:	d86b      	bhi.n	8004530 <HAL_TIM_ConfigClockSource+0x170>
 8004458:	2b20      	cmp	r3, #32
 800445a:	d060      	beq.n	800451e <HAL_TIM_ConfigClockSource+0x15e>
 800445c:	2b20      	cmp	r3, #32
 800445e:	d867      	bhi.n	8004530 <HAL_TIM_ConfigClockSource+0x170>
 8004460:	2b00      	cmp	r3, #0
 8004462:	d05c      	beq.n	800451e <HAL_TIM_ConfigClockSource+0x15e>
 8004464:	2b10      	cmp	r3, #16
 8004466:	d05a      	beq.n	800451e <HAL_TIM_ConfigClockSource+0x15e>
 8004468:	e062      	b.n	8004530 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800447a:	f000 fc95 	bl	8004da8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800448c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	609a      	str	r2, [r3, #8]
      break;
 8004496:	e04f      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044a8:	f000 fc7e 	bl	8004da8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044ba:	609a      	str	r2, [r3, #8]
      break;
 80044bc:	e03c      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ca:	461a      	mov	r2, r3
 80044cc:	f000 fbf2 	bl	8004cb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2150      	movs	r1, #80	@ 0x50
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 fc4b 	bl	8004d72 <TIM_ITRx_SetConfig>
      break;
 80044dc:	e02c      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044ea:	461a      	mov	r2, r3
 80044ec:	f000 fc11 	bl	8004d12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2160      	movs	r1, #96	@ 0x60
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 fc3b 	bl	8004d72 <TIM_ITRx_SetConfig>
      break;
 80044fc:	e01c      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800450a:	461a      	mov	r2, r3
 800450c:	f000 fbd2 	bl	8004cb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2140      	movs	r1, #64	@ 0x40
 8004516:	4618      	mov	r0, r3
 8004518:	f000 fc2b 	bl	8004d72 <TIM_ITRx_SetConfig>
      break;
 800451c:	e00c      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4619      	mov	r1, r3
 8004528:	4610      	mov	r0, r2
 800452a:	f000 fc22 	bl	8004d72 <TIM_ITRx_SetConfig>
      break;
 800452e:	e003      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	73fb      	strb	r3, [r7, #15]
      break;
 8004534:	e000      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004536:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004548:	7bfb      	ldrb	r3, [r7, #15]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
	...

08004554 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a48      	ldr	r2, [pc, #288]	@ (8004688 <TIM_Base_SetConfig+0x134>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d013      	beq.n	8004594 <TIM_Base_SetConfig+0x40>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004572:	d00f      	beq.n	8004594 <TIM_Base_SetConfig+0x40>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a45      	ldr	r2, [pc, #276]	@ (800468c <TIM_Base_SetConfig+0x138>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d00b      	beq.n	8004594 <TIM_Base_SetConfig+0x40>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a44      	ldr	r2, [pc, #272]	@ (8004690 <TIM_Base_SetConfig+0x13c>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d007      	beq.n	8004594 <TIM_Base_SetConfig+0x40>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a43      	ldr	r2, [pc, #268]	@ (8004694 <TIM_Base_SetConfig+0x140>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d003      	beq.n	8004594 <TIM_Base_SetConfig+0x40>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a42      	ldr	r2, [pc, #264]	@ (8004698 <TIM_Base_SetConfig+0x144>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d108      	bne.n	80045a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800459a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a37      	ldr	r2, [pc, #220]	@ (8004688 <TIM_Base_SetConfig+0x134>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d01f      	beq.n	80045ee <TIM_Base_SetConfig+0x9a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045b4:	d01b      	beq.n	80045ee <TIM_Base_SetConfig+0x9a>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a34      	ldr	r2, [pc, #208]	@ (800468c <TIM_Base_SetConfig+0x138>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d017      	beq.n	80045ee <TIM_Base_SetConfig+0x9a>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a33      	ldr	r2, [pc, #204]	@ (8004690 <TIM_Base_SetConfig+0x13c>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d013      	beq.n	80045ee <TIM_Base_SetConfig+0x9a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a32      	ldr	r2, [pc, #200]	@ (8004694 <TIM_Base_SetConfig+0x140>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d00f      	beq.n	80045ee <TIM_Base_SetConfig+0x9a>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a32      	ldr	r2, [pc, #200]	@ (800469c <TIM_Base_SetConfig+0x148>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d00b      	beq.n	80045ee <TIM_Base_SetConfig+0x9a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a31      	ldr	r2, [pc, #196]	@ (80046a0 <TIM_Base_SetConfig+0x14c>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d007      	beq.n	80045ee <TIM_Base_SetConfig+0x9a>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a30      	ldr	r2, [pc, #192]	@ (80046a4 <TIM_Base_SetConfig+0x150>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d003      	beq.n	80045ee <TIM_Base_SetConfig+0x9a>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a2b      	ldr	r2, [pc, #172]	@ (8004698 <TIM_Base_SetConfig+0x144>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d108      	bne.n	8004600 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	4313      	orrs	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a18      	ldr	r2, [pc, #96]	@ (8004688 <TIM_Base_SetConfig+0x134>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d013      	beq.n	8004654 <TIM_Base_SetConfig+0x100>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a19      	ldr	r2, [pc, #100]	@ (8004694 <TIM_Base_SetConfig+0x140>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d00f      	beq.n	8004654 <TIM_Base_SetConfig+0x100>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a19      	ldr	r2, [pc, #100]	@ (800469c <TIM_Base_SetConfig+0x148>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d00b      	beq.n	8004654 <TIM_Base_SetConfig+0x100>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a18      	ldr	r2, [pc, #96]	@ (80046a0 <TIM_Base_SetConfig+0x14c>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d007      	beq.n	8004654 <TIM_Base_SetConfig+0x100>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a17      	ldr	r2, [pc, #92]	@ (80046a4 <TIM_Base_SetConfig+0x150>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d003      	beq.n	8004654 <TIM_Base_SetConfig+0x100>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a12      	ldr	r2, [pc, #72]	@ (8004698 <TIM_Base_SetConfig+0x144>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d103      	bne.n	800465c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	691a      	ldr	r2, [r3, #16]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b01      	cmp	r3, #1
 800466c:	d105      	bne.n	800467a <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	f023 0201 	bic.w	r2, r3, #1
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	611a      	str	r2, [r3, #16]
  }
}
 800467a:	bf00      	nop
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	40012c00 	.word	0x40012c00
 800468c:	40000400 	.word	0x40000400
 8004690:	40000800 	.word	0x40000800
 8004694:	40013400 	.word	0x40013400
 8004698:	40015000 	.word	0x40015000
 800469c:	40014000 	.word	0x40014000
 80046a0:	40014400 	.word	0x40014400
 80046a4:	40014800 	.word	0x40014800

080046a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b087      	sub	sp, #28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	f023 0201 	bic.w	r2, r3, #1
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f023 0303 	bic.w	r3, r3, #3
 80046e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f023 0302 	bic.w	r3, r3, #2
 80046f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a30      	ldr	r2, [pc, #192]	@ (80047c4 <TIM_OC1_SetConfig+0x11c>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d013      	beq.n	8004730 <TIM_OC1_SetConfig+0x88>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a2f      	ldr	r2, [pc, #188]	@ (80047c8 <TIM_OC1_SetConfig+0x120>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d00f      	beq.n	8004730 <TIM_OC1_SetConfig+0x88>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a2e      	ldr	r2, [pc, #184]	@ (80047cc <TIM_OC1_SetConfig+0x124>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d00b      	beq.n	8004730 <TIM_OC1_SetConfig+0x88>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a2d      	ldr	r2, [pc, #180]	@ (80047d0 <TIM_OC1_SetConfig+0x128>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d007      	beq.n	8004730 <TIM_OC1_SetConfig+0x88>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a2c      	ldr	r2, [pc, #176]	@ (80047d4 <TIM_OC1_SetConfig+0x12c>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d003      	beq.n	8004730 <TIM_OC1_SetConfig+0x88>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a2b      	ldr	r2, [pc, #172]	@ (80047d8 <TIM_OC1_SetConfig+0x130>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d10c      	bne.n	800474a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f023 0308 	bic.w	r3, r3, #8
 8004736:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	4313      	orrs	r3, r2
 8004740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f023 0304 	bic.w	r3, r3, #4
 8004748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a1d      	ldr	r2, [pc, #116]	@ (80047c4 <TIM_OC1_SetConfig+0x11c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d013      	beq.n	800477a <TIM_OC1_SetConfig+0xd2>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a1c      	ldr	r2, [pc, #112]	@ (80047c8 <TIM_OC1_SetConfig+0x120>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d00f      	beq.n	800477a <TIM_OC1_SetConfig+0xd2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a1b      	ldr	r2, [pc, #108]	@ (80047cc <TIM_OC1_SetConfig+0x124>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d00b      	beq.n	800477a <TIM_OC1_SetConfig+0xd2>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a1a      	ldr	r2, [pc, #104]	@ (80047d0 <TIM_OC1_SetConfig+0x128>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d007      	beq.n	800477a <TIM_OC1_SetConfig+0xd2>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a19      	ldr	r2, [pc, #100]	@ (80047d4 <TIM_OC1_SetConfig+0x12c>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d003      	beq.n	800477a <TIM_OC1_SetConfig+0xd2>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a18      	ldr	r2, [pc, #96]	@ (80047d8 <TIM_OC1_SetConfig+0x130>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d111      	bne.n	800479e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	4313      	orrs	r3, r2
 8004792:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	4313      	orrs	r3, r2
 800479c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	621a      	str	r2, [r3, #32]
}
 80047b8:	bf00      	nop
 80047ba:	371c      	adds	r7, #28
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	40012c00 	.word	0x40012c00
 80047c8:	40013400 	.word	0x40013400
 80047cc:	40014000 	.word	0x40014000
 80047d0:	40014400 	.word	0x40014400
 80047d4:	40014800 	.word	0x40014800
 80047d8:	40015000 	.word	0x40015000

080047dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047dc:	b480      	push	{r7}
 80047de:	b087      	sub	sp, #28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	f023 0210 	bic.w	r2, r3, #16
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800480a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800480e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	021b      	lsls	r3, r3, #8
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	4313      	orrs	r3, r2
 8004822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f023 0320 	bic.w	r3, r3, #32
 800482a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	011b      	lsls	r3, r3, #4
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	4313      	orrs	r3, r2
 8004836:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a2c      	ldr	r2, [pc, #176]	@ (80048ec <TIM_OC2_SetConfig+0x110>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d007      	beq.n	8004850 <TIM_OC2_SetConfig+0x74>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a2b      	ldr	r2, [pc, #172]	@ (80048f0 <TIM_OC2_SetConfig+0x114>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d003      	beq.n	8004850 <TIM_OC2_SetConfig+0x74>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a2a      	ldr	r2, [pc, #168]	@ (80048f4 <TIM_OC2_SetConfig+0x118>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d10d      	bne.n	800486c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004856:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	011b      	lsls	r3, r3, #4
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	4313      	orrs	r3, r2
 8004862:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800486a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a1f      	ldr	r2, [pc, #124]	@ (80048ec <TIM_OC2_SetConfig+0x110>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d013      	beq.n	800489c <TIM_OC2_SetConfig+0xc0>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a1e      	ldr	r2, [pc, #120]	@ (80048f0 <TIM_OC2_SetConfig+0x114>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d00f      	beq.n	800489c <TIM_OC2_SetConfig+0xc0>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a1e      	ldr	r2, [pc, #120]	@ (80048f8 <TIM_OC2_SetConfig+0x11c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d00b      	beq.n	800489c <TIM_OC2_SetConfig+0xc0>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a1d      	ldr	r2, [pc, #116]	@ (80048fc <TIM_OC2_SetConfig+0x120>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d007      	beq.n	800489c <TIM_OC2_SetConfig+0xc0>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a1c      	ldr	r2, [pc, #112]	@ (8004900 <TIM_OC2_SetConfig+0x124>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d003      	beq.n	800489c <TIM_OC2_SetConfig+0xc0>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a17      	ldr	r2, [pc, #92]	@ (80048f4 <TIM_OC2_SetConfig+0x118>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d113      	bne.n	80048c4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80048a2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80048aa:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	621a      	str	r2, [r3, #32]
}
 80048de:	bf00      	nop
 80048e0:	371c      	adds	r7, #28
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	40012c00 	.word	0x40012c00
 80048f0:	40013400 	.word	0x40013400
 80048f4:	40015000 	.word	0x40015000
 80048f8:	40014000 	.word	0x40014000
 80048fc:	40014400 	.word	0x40014400
 8004900:	40014800 	.word	0x40014800

08004904 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0303 	bic.w	r3, r3, #3
 800493e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	4313      	orrs	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	021b      	lsls	r3, r3, #8
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	4313      	orrs	r3, r2
 800495c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a2b      	ldr	r2, [pc, #172]	@ (8004a10 <TIM_OC3_SetConfig+0x10c>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d007      	beq.n	8004976 <TIM_OC3_SetConfig+0x72>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a2a      	ldr	r2, [pc, #168]	@ (8004a14 <TIM_OC3_SetConfig+0x110>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d003      	beq.n	8004976 <TIM_OC3_SetConfig+0x72>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a29      	ldr	r2, [pc, #164]	@ (8004a18 <TIM_OC3_SetConfig+0x114>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d10d      	bne.n	8004992 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800497c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	021b      	lsls	r3, r3, #8
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	4313      	orrs	r3, r2
 8004988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004990:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a1e      	ldr	r2, [pc, #120]	@ (8004a10 <TIM_OC3_SetConfig+0x10c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d013      	beq.n	80049c2 <TIM_OC3_SetConfig+0xbe>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a1d      	ldr	r2, [pc, #116]	@ (8004a14 <TIM_OC3_SetConfig+0x110>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d00f      	beq.n	80049c2 <TIM_OC3_SetConfig+0xbe>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a1d      	ldr	r2, [pc, #116]	@ (8004a1c <TIM_OC3_SetConfig+0x118>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d00b      	beq.n	80049c2 <TIM_OC3_SetConfig+0xbe>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a1c      	ldr	r2, [pc, #112]	@ (8004a20 <TIM_OC3_SetConfig+0x11c>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d007      	beq.n	80049c2 <TIM_OC3_SetConfig+0xbe>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a1b      	ldr	r2, [pc, #108]	@ (8004a24 <TIM_OC3_SetConfig+0x120>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d003      	beq.n	80049c2 <TIM_OC3_SetConfig+0xbe>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a16      	ldr	r2, [pc, #88]	@ (8004a18 <TIM_OC3_SetConfig+0x114>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d113      	bne.n	80049ea <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80049d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	011b      	lsls	r3, r3, #4
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	4313      	orrs	r3, r2
 80049dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	011b      	lsls	r3, r3, #4
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	621a      	str	r2, [r3, #32]
}
 8004a04:	bf00      	nop
 8004a06:	371c      	adds	r7, #28
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	40012c00 	.word	0x40012c00
 8004a14:	40013400 	.word	0x40013400
 8004a18:	40015000 	.word	0x40015000
 8004a1c:	40014000 	.word	0x40014000
 8004a20:	40014400 	.word	0x40014400
 8004a24:	40014800 	.word	0x40014800

08004a28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	021b      	lsls	r3, r3, #8
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	031b      	lsls	r3, r3, #12
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a1a      	ldr	r2, [pc, #104]	@ (8004af0 <TIM_OC4_SetConfig+0xc8>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d013      	beq.n	8004ab4 <TIM_OC4_SetConfig+0x8c>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a19      	ldr	r2, [pc, #100]	@ (8004af4 <TIM_OC4_SetConfig+0xcc>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d00f      	beq.n	8004ab4 <TIM_OC4_SetConfig+0x8c>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a18      	ldr	r2, [pc, #96]	@ (8004af8 <TIM_OC4_SetConfig+0xd0>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d00b      	beq.n	8004ab4 <TIM_OC4_SetConfig+0x8c>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a17      	ldr	r2, [pc, #92]	@ (8004afc <TIM_OC4_SetConfig+0xd4>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d007      	beq.n	8004ab4 <TIM_OC4_SetConfig+0x8c>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a16      	ldr	r2, [pc, #88]	@ (8004b00 <TIM_OC4_SetConfig+0xd8>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d003      	beq.n	8004ab4 <TIM_OC4_SetConfig+0x8c>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a15      	ldr	r2, [pc, #84]	@ (8004b04 <TIM_OC4_SetConfig+0xdc>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d109      	bne.n	8004ac8 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004aba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	019b      	lsls	r3, r3, #6
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	621a      	str	r2, [r3, #32]
}
 8004ae2:	bf00      	nop
 8004ae4:	371c      	adds	r7, #28
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	40012c00 	.word	0x40012c00
 8004af4:	40013400 	.word	0x40013400
 8004af8:	40014000 	.word	0x40014000
 8004afc:	40014400 	.word	0x40014400
 8004b00:	40014800 	.word	0x40014800
 8004b04:	40015000 	.word	0x40015000

08004b08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004b4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	041b      	lsls	r3, r3, #16
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a19      	ldr	r2, [pc, #100]	@ (8004bc4 <TIM_OC5_SetConfig+0xbc>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d013      	beq.n	8004b8a <TIM_OC5_SetConfig+0x82>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a18      	ldr	r2, [pc, #96]	@ (8004bc8 <TIM_OC5_SetConfig+0xc0>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d00f      	beq.n	8004b8a <TIM_OC5_SetConfig+0x82>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a17      	ldr	r2, [pc, #92]	@ (8004bcc <TIM_OC5_SetConfig+0xc4>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d00b      	beq.n	8004b8a <TIM_OC5_SetConfig+0x82>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a16      	ldr	r2, [pc, #88]	@ (8004bd0 <TIM_OC5_SetConfig+0xc8>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d007      	beq.n	8004b8a <TIM_OC5_SetConfig+0x82>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a15      	ldr	r2, [pc, #84]	@ (8004bd4 <TIM_OC5_SetConfig+0xcc>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d003      	beq.n	8004b8a <TIM_OC5_SetConfig+0x82>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a14      	ldr	r2, [pc, #80]	@ (8004bd8 <TIM_OC5_SetConfig+0xd0>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d109      	bne.n	8004b9e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	021b      	lsls	r3, r3, #8
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	621a      	str	r2, [r3, #32]
}
 8004bb8:	bf00      	nop
 8004bba:	371c      	adds	r7, #28
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	40012c00 	.word	0x40012c00
 8004bc8:	40013400 	.word	0x40013400
 8004bcc:	40014000 	.word	0x40014000
 8004bd0:	40014400 	.word	0x40014400
 8004bd4:	40014800 	.word	0x40014800
 8004bd8:	40015000 	.word	0x40015000

08004bdc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	021b      	lsls	r3, r3, #8
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004c22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	051b      	lsls	r3, r3, #20
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a1a      	ldr	r2, [pc, #104]	@ (8004c9c <TIM_OC6_SetConfig+0xc0>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d013      	beq.n	8004c60 <TIM_OC6_SetConfig+0x84>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a19      	ldr	r2, [pc, #100]	@ (8004ca0 <TIM_OC6_SetConfig+0xc4>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d00f      	beq.n	8004c60 <TIM_OC6_SetConfig+0x84>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a18      	ldr	r2, [pc, #96]	@ (8004ca4 <TIM_OC6_SetConfig+0xc8>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d00b      	beq.n	8004c60 <TIM_OC6_SetConfig+0x84>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a17      	ldr	r2, [pc, #92]	@ (8004ca8 <TIM_OC6_SetConfig+0xcc>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d007      	beq.n	8004c60 <TIM_OC6_SetConfig+0x84>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a16      	ldr	r2, [pc, #88]	@ (8004cac <TIM_OC6_SetConfig+0xd0>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d003      	beq.n	8004c60 <TIM_OC6_SetConfig+0x84>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a15      	ldr	r2, [pc, #84]	@ (8004cb0 <TIM_OC6_SetConfig+0xd4>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d109      	bne.n	8004c74 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	029b      	lsls	r3, r3, #10
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	621a      	str	r2, [r3, #32]
}
 8004c8e:	bf00      	nop
 8004c90:	371c      	adds	r7, #28
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	40012c00 	.word	0x40012c00
 8004ca0:	40013400 	.word	0x40013400
 8004ca4:	40014000 	.word	0x40014000
 8004ca8:	40014400 	.word	0x40014400
 8004cac:	40014800 	.word	0x40014800
 8004cb0:	40015000 	.word	0x40015000

08004cb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	f023 0201 	bic.w	r2, r3, #1
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	011b      	lsls	r3, r3, #4
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f023 030a 	bic.w	r3, r3, #10
 8004cf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	621a      	str	r2, [r3, #32]
}
 8004d06:	bf00      	nop
 8004d08:	371c      	adds	r7, #28
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b087      	sub	sp, #28
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	60f8      	str	r0, [r7, #12]
 8004d1a:	60b9      	str	r1, [r7, #8]
 8004d1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	f023 0210 	bic.w	r2, r3, #16
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	031b      	lsls	r3, r3, #12
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004d4e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	621a      	str	r2, [r3, #32]
}
 8004d66:	bf00      	nop
 8004d68:	371c      	adds	r7, #28
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b085      	sub	sp, #20
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
 8004d7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	f043 0307 	orr.w	r3, r3, #7
 8004d94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	609a      	str	r2, [r3, #8]
}
 8004d9c:	bf00      	nop
 8004d9e:	3714      	adds	r7, #20
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
 8004db4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004dc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	021a      	lsls	r2, r3, #8
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	609a      	str	r2, [r3, #8]
}
 8004ddc:	bf00      	nop
 8004dde:	371c      	adds	r7, #28
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b087      	sub	sp, #28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	f003 031f 	and.w	r3, r3, #31
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004e00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6a1a      	ldr	r2, [r3, #32]
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	43db      	mvns	r3, r3
 8004e0a:	401a      	ands	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6a1a      	ldr	r2, [r3, #32]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f003 031f 	and.w	r3, r3, #31
 8004e1a:	6879      	ldr	r1, [r7, #4]
 8004e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e20:	431a      	orrs	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	621a      	str	r2, [r3, #32]
}
 8004e26:	bf00      	nop
 8004e28:	371c      	adds	r7, #28
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
	...

08004e34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d101      	bne.n	8004e4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	e06d      	b.n	8004f28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a30      	ldr	r2, [pc, #192]	@ (8004f34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d009      	beq.n	8004e8a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a2f      	ldr	r2, [pc, #188]	@ (8004f38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d004      	beq.n	8004e8a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a2d      	ldr	r2, [pc, #180]	@ (8004f3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d108      	bne.n	8004e9c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004e90:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ea2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a1e      	ldr	r2, [pc, #120]	@ (8004f34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d01d      	beq.n	8004efc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ec8:	d018      	beq.n	8004efc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a1c      	ldr	r2, [pc, #112]	@ (8004f40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d013      	beq.n	8004efc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a1a      	ldr	r2, [pc, #104]	@ (8004f44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d00e      	beq.n	8004efc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a15      	ldr	r2, [pc, #84]	@ (8004f38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d009      	beq.n	8004efc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a16      	ldr	r2, [pc, #88]	@ (8004f48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d004      	beq.n	8004efc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a11      	ldr	r2, [pc, #68]	@ (8004f3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d10c      	bne.n	8004f16 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3714      	adds	r7, #20
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	40012c00 	.word	0x40012c00
 8004f38:	40013400 	.word	0x40013400
 8004f3c:	40015000 	.word	0x40015000
 8004f40:	40000400 	.word	0x40000400
 8004f44:	40000800 	.word	0x40000800
 8004f48:	40014000 	.word	0x40014000

08004f4c <memset>:
 8004f4c:	4402      	add	r2, r0
 8004f4e:	4603      	mov	r3, r0
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d100      	bne.n	8004f56 <memset+0xa>
 8004f54:	4770      	bx	lr
 8004f56:	f803 1b01 	strb.w	r1, [r3], #1
 8004f5a:	e7f9      	b.n	8004f50 <memset+0x4>

08004f5c <__libc_init_array>:
 8004f5c:	b570      	push	{r4, r5, r6, lr}
 8004f5e:	4d0d      	ldr	r5, [pc, #52]	@ (8004f94 <__libc_init_array+0x38>)
 8004f60:	4c0d      	ldr	r4, [pc, #52]	@ (8004f98 <__libc_init_array+0x3c>)
 8004f62:	1b64      	subs	r4, r4, r5
 8004f64:	10a4      	asrs	r4, r4, #2
 8004f66:	2600      	movs	r6, #0
 8004f68:	42a6      	cmp	r6, r4
 8004f6a:	d109      	bne.n	8004f80 <__libc_init_array+0x24>
 8004f6c:	4d0b      	ldr	r5, [pc, #44]	@ (8004f9c <__libc_init_array+0x40>)
 8004f6e:	4c0c      	ldr	r4, [pc, #48]	@ (8004fa0 <__libc_init_array+0x44>)
 8004f70:	f000 f818 	bl	8004fa4 <_init>
 8004f74:	1b64      	subs	r4, r4, r5
 8004f76:	10a4      	asrs	r4, r4, #2
 8004f78:	2600      	movs	r6, #0
 8004f7a:	42a6      	cmp	r6, r4
 8004f7c:	d105      	bne.n	8004f8a <__libc_init_array+0x2e>
 8004f7e:	bd70      	pop	{r4, r5, r6, pc}
 8004f80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f84:	4798      	blx	r3
 8004f86:	3601      	adds	r6, #1
 8004f88:	e7ee      	b.n	8004f68 <__libc_init_array+0xc>
 8004f8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f8e:	4798      	blx	r3
 8004f90:	3601      	adds	r6, #1
 8004f92:	e7f2      	b.n	8004f7a <__libc_init_array+0x1e>
 8004f94:	08004fec 	.word	0x08004fec
 8004f98:	08004fec 	.word	0x08004fec
 8004f9c:	08004fec 	.word	0x08004fec
 8004fa0:	08004ff0 	.word	0x08004ff0

08004fa4 <_init>:
 8004fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa6:	bf00      	nop
 8004fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004faa:	bc08      	pop	{r3}
 8004fac:	469e      	mov	lr, r3
 8004fae:	4770      	bx	lr

08004fb0 <_fini>:
 8004fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb2:	bf00      	nop
 8004fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fb6:	bc08      	pop	{r3}
 8004fb8:	469e      	mov	lr, r3
 8004fba:	4770      	bx	lr
