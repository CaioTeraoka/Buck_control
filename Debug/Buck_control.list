
Buck_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057c0  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08005958  08005958  00006958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005988  08005988  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005988  08005988  0000700c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005988  08005988  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005988  08005988  00006988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800598c  0800598c  0000698c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005990  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000700c  2**0
                  CONTENTS
 10 .bss          00000198  2000000c  2000000c  0000700c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001a4  200001a4  0000700c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cbe3  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f6d  00000000  00000000  00013c1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca8  00000000  00000000  00015b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ce  00000000  00000000  00016838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020524  00000000  00000000  00017206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010264  00000000  00000000  0003772a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cac4a  00000000  00000000  0004798e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001125d8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000364c  00000000  00000000  0011261c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  00115c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005940 	.word	0x08005940

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08005940 	.word	0x08005940

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	Buck.setPoint = BUCK_SETPOINT;
 8000a18:	4b22      	ldr	r3, [pc, #136]	@ (8000aa4 <main+0x90>)
 8000a1a:	4a23      	ldr	r2, [pc, #140]	@ (8000aa8 <main+0x94>)
 8000a1c:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a1e:	f000 fd39 	bl	8001494 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a22:	f000 f851 	bl	8000ac8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a26:	f000 fa4b 	bl	8000ec0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a2a:	f000 fa2b 	bl	8000e84 <MX_DMA_Init>
  MX_ADC1_Init();
 8000a2e:	f000 f8af 	bl	8000b90 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000a32:	f000 f92d 	bl	8000c90 <MX_TIM3_Init>
  MX_TIM15_Init();
 8000a36:	f000 f9a1 	bl	8000d7c <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000a3a:	210c      	movs	r1, #12
 8000a3c:	481b      	ldr	r0, [pc, #108]	@ (8000aac <main+0x98>)
 8000a3e:	f003 fee7 	bl	8004810 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000a42:	2100      	movs	r1, #0
 8000a44:	481a      	ldr	r0, [pc, #104]	@ (8000ab0 <main+0x9c>)
 8000a46:	f003 fee3 	bl	8004810 <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) internalAdcRawData, 2);
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	4919      	ldr	r1, [pc, #100]	@ (8000ab4 <main+0xa0>)
 8000a4e:	481a      	ldr	r0, [pc, #104]	@ (8000ab8 <main+0xa4>)
 8000a50:	f000 ffb8 	bl	80019c4 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  dutyCycle = PID_run(&pid, Buck.Vout, Buck.setPoint);
 8000a54:	4b13      	ldr	r3, [pc, #76]	@ (8000aa4 <main+0x90>)
 8000a56:	edd3 7a00 	vldr	s15, [r3]
 8000a5a:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <main+0x90>)
 8000a5c:	ed93 7a02 	vldr	s14, [r3, #8]
 8000a60:	eef0 0a47 	vmov.f32	s1, s14
 8000a64:	eeb0 0a67 	vmov.f32	s0, s15
 8000a68:	4814      	ldr	r0, [pc, #80]	@ (8000abc <main+0xa8>)
 8000a6a:	f000 fa91 	bl	8000f90 <PID_run>
 8000a6e:	eef0 7a40 	vmov.f32	s15, s0
 8000a72:	4b13      	ldr	r3, [pc, #76]	@ (8000ac0 <main+0xac>)
 8000a74:	edc3 7a00 	vstr	s15, [r3]
	  TIM3->CCR1 = (uint32_t) (htim3.Init.Period * dutyCycle);
 8000a78:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <main+0x98>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	ee07 3a90 	vmov	s15, r3
 8000a80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a84:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac0 <main+0xac>)
 8000a86:	edd3 7a00 	vldr	s15, [r3]
 8000a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac4 <main+0xb0>)
 8000a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a94:	ee17 2a90 	vmov	r2, s15
 8000a98:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_Delay(100);
 8000a9a:	2064      	movs	r0, #100	@ 0x64
 8000a9c:	f000 fd60 	bl	8001560 <HAL_Delay>
	  dutyCycle = PID_run(&pid, Buck.Vout, Buck.setPoint);
 8000aa0:	bf00      	nop
 8000aa2:	e7d7      	b.n	8000a54 <main+0x40>
 8000aa4:	2000018c 	.word	0x2000018c
 8000aa8:	40a00000 	.word	0x40a00000
 8000aac:	200000bc 	.word	0x200000bc
 8000ab0:	20000108 	.word	0x20000108
 8000ab4:	20000198 	.word	0x20000198
 8000ab8:	20000028 	.word	0x20000028
 8000abc:	20000154 	.word	0x20000154
 8000ac0:	2000019c 	.word	0x2000019c
 8000ac4:	40000400 	.word	0x40000400

08000ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b0a6      	sub	sp, #152	@ 0x98
 8000acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ace:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000ad2:	2228      	movs	r2, #40	@ 0x28
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f004 ff06 	bl	80058e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000adc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	2258      	movs	r2, #88	@ 0x58
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f004 fef8 	bl	80058e8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000af8:	2302      	movs	r3, #2
 8000afa:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000afc:	2301      	movs	r3, #1
 8000afe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b00:	2310      	movs	r3, #16
 8000b02:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b06:	2302      	movs	r3, #2
 8000b08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000b14:	2300      	movs	r3, #0
 8000b16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b20:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000b24:	4618      	mov	r0, r3
 8000b26:	f002 f9c3 	bl	8002eb0 <HAL_RCC_OscConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000b30:	f000 fb15 	bl	800115e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b34:	230f      	movs	r3, #15
 8000b36:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b48:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f003 f9d2 	bl	8003ef8 <HAL_RCC_ClockConfig>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b5a:	f000 fb00 	bl	800115e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM15|RCC_PERIPHCLK_ADC12
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b8c <SystemClock_Config+0xc4>)
 8000b60:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000b62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	4618      	mov	r0, r3
 8000b74:	f003 fb82 	bl	800427c <HAL_RCCEx_PeriphCLKConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000b7e:	f000 faee 	bl	800115e <Error_Handler>
  }
}
 8000b82:	bf00      	nop
 8000b84:	3798      	adds	r7, #152	@ 0x98
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	00600080 	.word	0x00600080

08000b90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	@ 0x28
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
 8000bb0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bb2:	4b36      	ldr	r3, [pc, #216]	@ (8000c8c <MX_ADC1_Init+0xfc>)
 8000bb4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000bb8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bba:	4b34      	ldr	r3, [pc, #208]	@ (8000c8c <MX_ADC1_Init+0xfc>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bc0:	4b32      	ldr	r3, [pc, #200]	@ (8000c8c <MX_ADC1_Init+0xfc>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bc6:	4b31      	ldr	r3, [pc, #196]	@ (8000c8c <MX_ADC1_Init+0xfc>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bcc:	4b2f      	ldr	r3, [pc, #188]	@ (8000c8c <MX_ADC1_Init+0xfc>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bd2:	4b2e      	ldr	r3, [pc, #184]	@ (8000c8c <MX_ADC1_Init+0xfc>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000bda:	4b2c      	ldr	r3, [pc, #176]	@ (8000c8c <MX_ADC1_Init+0xfc>)
 8000bdc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000be0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 8000be2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c8c <MX_ADC1_Init+0xfc>)
 8000be4:	f44f 7260 	mov.w	r2, #896	@ 0x380
 8000be8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bea:	4b28      	ldr	r3, [pc, #160]	@ (8000c8c <MX_ADC1_Init+0xfc>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000bf0:	4b26      	ldr	r3, [pc, #152]	@ (8000c8c <MX_ADC1_Init+0xfc>)
 8000bf2:	2202      	movs	r2, #2
 8000bf4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000bf6:	4b25      	ldr	r3, [pc, #148]	@ (8000c8c <MX_ADC1_Init+0xfc>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bfe:	4b23      	ldr	r3, [pc, #140]	@ (8000c8c <MX_ADC1_Init+0xfc>)
 8000c00:	2204      	movs	r2, #4
 8000c02:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c04:	4b21      	ldr	r3, [pc, #132]	@ (8000c8c <MX_ADC1_Init+0xfc>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c0a:	4b20      	ldr	r3, [pc, #128]	@ (8000c8c <MX_ADC1_Init+0xfc>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c10:	481e      	ldr	r0, [pc, #120]	@ (8000c8c <MX_ADC1_Init+0xfc>)
 8000c12:	f000 fcdd 	bl	80015d0 <HAL_ADC_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c1c:	f000 fa9f 	bl	800115e <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4818      	ldr	r0, [pc, #96]	@ (8000c8c <MX_ADC1_Init+0xfc>)
 8000c2c:	f001 fad0 	bl	80021d0 <HAL_ADCEx_MultiModeConfigChannel>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000c36:	f000 fa92 	bl	800115e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000c46:	2303      	movs	r3, #3
 8000c48:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	4619      	mov	r1, r3
 8000c56:	480d      	ldr	r0, [pc, #52]	@ (8000c8c <MX_ADC1_Init+0xfc>)
 8000c58:	f000 ffd0 	bl	8001bfc <HAL_ADC_ConfigChannel>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8000c62:	f000 fa7c 	bl	800115e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c66:	2307      	movs	r3, #7
 8000c68:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	4619      	mov	r1, r3
 8000c72:	4806      	ldr	r0, [pc, #24]	@ (8000c8c <MX_ADC1_Init+0xfc>)
 8000c74:	f000 ffc2 	bl	8001bfc <HAL_ADC_ConfigChannel>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 8000c7e:	f000 fa6e 	bl	800115e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	3728      	adds	r7, #40	@ 0x28
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000028 	.word	0x20000028

08000c90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08e      	sub	sp, #56	@ 0x38
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]
 8000cbe:	615a      	str	r2, [r3, #20]
 8000cc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cc2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d74 <MX_TIM3_Init+0xe4>)
 8000cc4:	4a2c      	ldr	r2, [pc, #176]	@ (8000d78 <MX_TIM3_Init+0xe8>)
 8000cc6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 8000cc8:	4b2a      	ldr	r3, [pc, #168]	@ (8000d74 <MX_TIM3_Init+0xe4>)
 8000cca:	2203      	movs	r2, #3
 8000ccc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cce:	4b29      	ldr	r3, [pc, #164]	@ (8000d74 <MX_TIM3_Init+0xe4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000cd4:	4b27      	ldr	r3, [pc, #156]	@ (8000d74 <MX_TIM3_Init+0xe4>)
 8000cd6:	2263      	movs	r2, #99	@ 0x63
 8000cd8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cda:	4b26      	ldr	r3, [pc, #152]	@ (8000d74 <MX_TIM3_Init+0xe4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce0:	4b24      	ldr	r3, [pc, #144]	@ (8000d74 <MX_TIM3_Init+0xe4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ce6:	4823      	ldr	r0, [pc, #140]	@ (8000d74 <MX_TIM3_Init+0xe4>)
 8000ce8:	f003 fce4 	bl	80046b4 <HAL_TIM_Base_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000cf2:	f000 fa34 	bl	800115e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cfc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d00:	4619      	mov	r1, r3
 8000d02:	481c      	ldr	r0, [pc, #112]	@ (8000d74 <MX_TIM3_Init+0xe4>)
 8000d04:	f003 ffa4 	bl	8004c50 <HAL_TIM_ConfigClockSource>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000d0e:	f000 fa26 	bl	800115e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d12:	4818      	ldr	r0, [pc, #96]	@ (8000d74 <MX_TIM3_Init+0xe4>)
 8000d14:	f003 fd25 	bl	8004762 <HAL_TIM_PWM_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d1e:	f000 fa1e 	bl	800115e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4810      	ldr	r0, [pc, #64]	@ (8000d74 <MX_TIM3_Init+0xe4>)
 8000d32:	f004 fcc7 	bl	80056c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000d3c:	f000 fa0f 	bl	800115e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d40:	2360      	movs	r3, #96	@ 0x60
 8000d42:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d50:	463b      	mov	r3, r7
 8000d52:	220c      	movs	r2, #12
 8000d54:	4619      	mov	r1, r3
 8000d56:	4807      	ldr	r0, [pc, #28]	@ (8000d74 <MX_TIM3_Init+0xe4>)
 8000d58:	f003 fe66 	bl	8004a28 <HAL_TIM_PWM_ConfigChannel>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000d62:	f000 f9fc 	bl	800115e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d66:	4803      	ldr	r0, [pc, #12]	@ (8000d74 <MX_TIM3_Init+0xe4>)
 8000d68:	f000 fae6 	bl	8001338 <HAL_TIM_MspPostInit>

}
 8000d6c:	bf00      	nop
 8000d6e:	3738      	adds	r7, #56	@ 0x38
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	200000bc 	.word	0x200000bc
 8000d78:	40000400 	.word	0x40000400

08000d7c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b096      	sub	sp, #88	@ 0x58
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d82:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d8e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]
 8000d9e:	615a      	str	r2, [r3, #20]
 8000da0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	222c      	movs	r2, #44	@ 0x2c
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f004 fd9d 	bl	80058e8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000dae:	4b33      	ldr	r3, [pc, #204]	@ (8000e7c <MX_TIM15_Init+0x100>)
 8000db0:	4a33      	ldr	r2, [pc, #204]	@ (8000e80 <MX_TIM15_Init+0x104>)
 8000db2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 8;
 8000db4:	4b31      	ldr	r3, [pc, #196]	@ (8000e7c <MX_TIM15_Init+0x100>)
 8000db6:	2208      	movs	r2, #8
 8000db8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dba:	4b30      	ldr	r3, [pc, #192]	@ (8000e7c <MX_TIM15_Init+0x100>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1000;
 8000dc0:	4b2e      	ldr	r3, [pc, #184]	@ (8000e7c <MX_TIM15_Init+0x100>)
 8000dc2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000dc6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc8:	4b2c      	ldr	r3, [pc, #176]	@ (8000e7c <MX_TIM15_Init+0x100>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000dce:	4b2b      	ldr	r3, [pc, #172]	@ (8000e7c <MX_TIM15_Init+0x100>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd4:	4b29      	ldr	r3, [pc, #164]	@ (8000e7c <MX_TIM15_Init+0x100>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000dda:	4828      	ldr	r0, [pc, #160]	@ (8000e7c <MX_TIM15_Init+0x100>)
 8000ddc:	f003 fcc1 	bl	8004762 <HAL_TIM_PWM_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000de6:	f000 f9ba 	bl	800115e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000dea:	2320      	movs	r3, #32
 8000dec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000df2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000df6:	4619      	mov	r1, r3
 8000df8:	4820      	ldr	r0, [pc, #128]	@ (8000e7c <MX_TIM15_Init+0x100>)
 8000dfa:	f004 fc63 	bl	80056c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000e04:	f000 f9ab 	bl	800115e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e08:	2360      	movs	r3, #96	@ 0x60
 8000e0a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e10:	2300      	movs	r3, #0
 8000e12:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e14:	2300      	movs	r3, #0
 8000e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e20:	2300      	movs	r3, #0
 8000e22:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e24:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e28:	2200      	movs	r2, #0
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4813      	ldr	r0, [pc, #76]	@ (8000e7c <MX_TIM15_Init+0x100>)
 8000e2e:	f003 fdfb 	bl	8004a28 <HAL_TIM_PWM_ConfigChannel>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000e38:	f000 f991 	bl	800115e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e54:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	4619      	mov	r1, r3
 8000e62:	4806      	ldr	r0, [pc, #24]	@ (8000e7c <MX_TIM15_Init+0x100>)
 8000e64:	f004 fcba 	bl	80057dc <HAL_TIMEx_ConfigBreakDeadTime>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8000e6e:	f000 f976 	bl	800115e <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	3758      	adds	r7, #88	@ 0x58
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000108 	.word	0x20000108
 8000e80:	40014000 	.word	0x40014000

08000e84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ebc <MX_DMA_Init+0x38>)
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	@ (8000ebc <MX_DMA_Init+0x38>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6153      	str	r3, [r2, #20]
 8000e96:	4b09      	ldr	r3, [pc, #36]	@ (8000ebc <MX_DMA_Init+0x38>)
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	200b      	movs	r0, #11
 8000ea8:	f001 fc8f 	bl	80027ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000eac:	200b      	movs	r0, #11
 8000eae:	f001 fca8 	bl	8002802 <HAL_NVIC_EnableIRQ>

}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <MX_GPIO_Init+0x44>)
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	4a0e      	ldr	r2, [pc, #56]	@ (8000f04 <MX_GPIO_Init+0x44>)
 8000ecc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ed0:	6153      	str	r3, [r2, #20]
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <MX_GPIO_Init+0x44>)
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <MX_GPIO_Init+0x44>)
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	4a08      	ldr	r2, [pc, #32]	@ (8000f04 <MX_GPIO_Init+0x44>)
 8000ee4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ee8:	6153      	str	r3, [r2, #20]
 8000eea:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <MX_GPIO_Init+0x44>)
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40021000 	.word	0x40021000

08000f08 <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN 4 */
/**
 * @brief Internal ADC Conversion Complete callback
 * @retval None
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	Buck.Vout = internalAdcRawData[0] * VOUT_SCALE;
 8000f10:	4b1d      	ldr	r3, [pc, #116]	@ (8000f88 <HAL_ADC_ConvCpltCallback+0x80>)
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4613      	mov	r3, r2
 8000f18:	015b      	lsls	r3, r3, #5
 8000f1a:	4413      	add	r3, r2
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	da01      	bge.n	8000f24 <HAL_ADC_ConvCpltCallback+0x1c>
 8000f20:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000f24:	131b      	asrs	r3, r3, #12
 8000f26:	ee07 3a90 	vmov	s15, r3
 8000f2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f2e:	4b17      	ldr	r3, [pc, #92]	@ (8000f8c <HAL_ADC_ConvCpltCallback+0x84>)
 8000f30:	edc3 7a00 	vstr	s15, [r3]
	Buck.IL = internalAdcRawData[1] * IL_SCALE;
 8000f34:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <HAL_ADC_ConvCpltCallback+0x80>)
 8000f36:	885b      	ldrh	r3, [r3, #2]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fa9f 	bl	800047c <__aeabi_i2d>
 8000f3e:	a30e      	add	r3, pc, #56	@ (adr r3, 8000f78 <HAL_ADC_ConvCpltCallback+0x70>)
 8000f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f44:	f7ff fb04 	bl	8000550 <__aeabi_dmul>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	4619      	mov	r1, r3
 8000f50:	a30b      	add	r3, pc, #44	@ (adr r3, 8000f80 <HAL_ADC_ConvCpltCallback+0x78>)
 8000f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f56:	f7ff fc25 	bl	80007a4 <__aeabi_ddiv>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	4610      	mov	r0, r2
 8000f60:	4619      	mov	r1, r3
 8000f62:	f7ff fd07 	bl	8000974 <__aeabi_d2f>
 8000f66:	4603      	mov	r3, r0
 8000f68:	4a08      	ldr	r2, [pc, #32]	@ (8000f8c <HAL_ADC_ConvCpltCallback+0x84>)
 8000f6a:	6053      	str	r3, [r2, #4]
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	f3af 8000 	nop.w
 8000f78:	66666666 	.word	0x66666666
 8000f7c:	400a6666 	.word	0x400a6666
 8000f80:	9999999a 	.word	0x9999999a
 8000f84:	40a19999 	.word	0x40a19999
 8000f88:	20000198 	.word	0x20000198
 8000f8c:	2000018c 	.word	0x2000018c

08000f90 <PID_run>:

float PID_run(PID *pid, float measurement, float setpoint)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	@ 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f9c:	edc7 0a01 	vstr	s1, [r7, #4]
    float command;
    float command_sat;
    float deriv_filt;

    /* Error calculation */
    err = setpoint - measurement;
 8000fa0:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fa4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fac:	edc7 7a06 	vstr	s15, [r7, #24]

    /* Integral term calculation - including anti-windup */
    pid->integral += pid->Ki*err*pid->T + pid->Kaw*(pid->command_sat_prev - pid->command_prev)*pid->T;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	edd3 6a01 	vldr	s13, [r3, #4]
 8000fbc:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fc0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	edd3 7a05 	vldr	s15, [r3, #20]
 8000fca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	ed93 6a03 	vldr	s12, [r3, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	edd3 5a0c 	vldr	s11, [r3, #48]	@ 0x30
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8000fe0:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8000fe4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	edd3 7a05 	vldr	s15, [r3, #20]
 8000fee:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    /* Derivative term calculation using filtered derivative method */
    deriv_filt = (err - pid->err_prev + pid->T_C*pid->deriv_prev)/(pid->T + pid->T_C);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001006:	ed97 7a06 	vldr	s14, [r7, #24]
 800100a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	edd3 6a04 	vldr	s13, [r3, #16]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800101a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800101e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	ed93 7a05 	vldr	s14, [r3, #20]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	edd3 7a04 	vldr	s15, [r3, #16]
 800102e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001032:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001036:	edc7 7a05 	vstr	s15, [r7, #20]
    pid->err_prev = err;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->deriv_prev = deriv_filt;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	697a      	ldr	r2, [r7, #20]
 8001044:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Summing the 3 terms */
    command = pid->Kp*err + pid->integral + pid->Kd*deriv_filt;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	ed93 7a00 	vldr	s14, [r3]
 800104c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001050:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800105a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	edd3 6a02 	vldr	s13, [r3, #8]
 8001064:	edd7 7a05 	vldr	s15, [r7, #20]
 8001068:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800106c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001070:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Remember command at previous step */
    pid->command_prev = command;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Saturate command */
    if (command > pid->max)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001080:	ed97 7a04 	vldr	s14, [r7, #16]
 8001084:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800108c:	dd03      	ble.n	8001096 <PID_run+0x106>
    {
        command_sat = pid->max;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	61fb      	str	r3, [r7, #28]
 8001094:	e00f      	b.n	80010b6 <PID_run+0x126>
    }
    else if (command < pid->min)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	edd3 7a07 	vldr	s15, [r3, #28]
 800109c:	ed97 7a04 	vldr	s14, [r7, #16]
 80010a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a8:	d503      	bpl.n	80010b2 <PID_run+0x122>
    {
        command_sat = pid->min;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	61fb      	str	r3, [r7, #28]
 80010b0:	e001      	b.n	80010b6 <PID_run+0x126>
    }
    else
    {
        command_sat = command;
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	61fb      	str	r3, [r7, #28]
    }

    /* Apply rate limiter */
    if (command_sat > pid->command_sat_prev + pid->max_rate*pid->T)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	edd3 6a08 	vldr	s13, [r3, #32]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	edd3 7a05 	vldr	s15, [r3, #20]
 80010c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d0:	ed97 7a07 	vldr	s14, [r7, #28]
 80010d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010dc:	dd0f      	ble.n	80010fe <PID_run+0x16e>
    {
        command_sat = pid->command_sat_prev + pid->max_rate*pid->T;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	edd3 6a08 	vldr	s13, [r3, #32]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	edd3 7a05 	vldr	s15, [r3, #20]
 80010f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010f8:	edc7 7a07 	vstr	s15, [r7, #28]
 80010fc:	e022      	b.n	8001144 <PID_run+0x1b4>
    }
    else if (command_sat < pid->command_sat_prev - pid->max_rate*pid->T)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	edd3 6a08 	vldr	s13, [r3, #32]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001110:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001114:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001118:	ed97 7a07 	vldr	s14, [r7, #28]
 800111c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001124:	d50e      	bpl.n	8001144 <PID_run+0x1b4>
    {
        command_sat = pid->command_sat_prev - pid->max_rate*pid->T;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	edd3 6a08 	vldr	s13, [r3, #32]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	edd3 7a05 	vldr	s15, [r3, #20]
 8001138:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800113c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001140:	edc7 7a07 	vstr	s15, [r7, #28]
    {
        /* No action */
    }

    /* Remember saturated command at previous step */
    pid->command_sat_prev = command_sat;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	69fa      	ldr	r2, [r7, #28]
 8001148:	631a      	str	r2, [r3, #48]	@ 0x30

    return command_sat;
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	ee07 3a90 	vmov	s15, r3
}
 8001150:	eeb0 0a67 	vmov.f32	s0, s15
 8001154:	3724      	adds	r7, #36	@ 0x24
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001162:	b672      	cpsid	i
}
 8001164:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001166:	bf00      	nop
 8001168:	e7fd      	b.n	8001166 <Error_Handler+0x8>
	...

0800116c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001172:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <HAL_MspInit+0x44>)
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	4a0e      	ldr	r2, [pc, #56]	@ (80011b0 <HAL_MspInit+0x44>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6193      	str	r3, [r2, #24]
 800117e:	4b0c      	ldr	r3, [pc, #48]	@ (80011b0 <HAL_MspInit+0x44>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118a:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <HAL_MspInit+0x44>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	4a08      	ldr	r2, [pc, #32]	@ (80011b0 <HAL_MspInit+0x44>)
 8001190:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001194:	61d3      	str	r3, [r2, #28]
 8001196:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <HAL_MspInit+0x44>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40021000 	.word	0x40021000

080011b4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	@ 0x28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011d4:	d164      	bne.n	80012a0 <HAL_ADC_MspInit+0xec>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80011d6:	4b34      	ldr	r3, [pc, #208]	@ (80012a8 <HAL_ADC_MspInit+0xf4>)
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	4a33      	ldr	r2, [pc, #204]	@ (80012a8 <HAL_ADC_MspInit+0xf4>)
 80011dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011e0:	6153      	str	r3, [r2, #20]
 80011e2:	4b31      	ldr	r3, [pc, #196]	@ (80012a8 <HAL_ADC_MspInit+0xf4>)
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ee:	4b2e      	ldr	r3, [pc, #184]	@ (80012a8 <HAL_ADC_MspInit+0xf4>)
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	4a2d      	ldr	r2, [pc, #180]	@ (80012a8 <HAL_ADC_MspInit+0xf4>)
 80011f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80011f8:	6153      	str	r3, [r2, #20]
 80011fa:	4b2b      	ldr	r3, [pc, #172]	@ (80012a8 <HAL_ADC_MspInit+0xf4>)
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	4b28      	ldr	r3, [pc, #160]	@ (80012a8 <HAL_ADC_MspInit+0xf4>)
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	4a27      	ldr	r2, [pc, #156]	@ (80012a8 <HAL_ADC_MspInit+0xf4>)
 800120c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001210:	6153      	str	r3, [r2, #20]
 8001212:	4b25      	ldr	r3, [pc, #148]	@ (80012a8 <HAL_ADC_MspInit+0xf4>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN7
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800121e:	2302      	movs	r3, #2
 8001220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001222:	2303      	movs	r3, #3
 8001224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	4619      	mov	r1, r3
 8001230:	481e      	ldr	r0, [pc, #120]	@ (80012ac <HAL_ADC_MspInit+0xf8>)
 8001232:	f001 fcb3 	bl	8002b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001236:	2301      	movs	r3, #1
 8001238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800123a:	2303      	movs	r3, #3
 800123c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800124c:	f001 fca6 	bl	8002b9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001250:	4b17      	ldr	r3, [pc, #92]	@ (80012b0 <HAL_ADC_MspInit+0xfc>)
 8001252:	4a18      	ldr	r2, [pc, #96]	@ (80012b4 <HAL_ADC_MspInit+0x100>)
 8001254:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001256:	4b16      	ldr	r3, [pc, #88]	@ (80012b0 <HAL_ADC_MspInit+0xfc>)
 8001258:	2200      	movs	r2, #0
 800125a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800125c:	4b14      	ldr	r3, [pc, #80]	@ (80012b0 <HAL_ADC_MspInit+0xfc>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001262:	4b13      	ldr	r3, [pc, #76]	@ (80012b0 <HAL_ADC_MspInit+0xfc>)
 8001264:	2280      	movs	r2, #128	@ 0x80
 8001266:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001268:	4b11      	ldr	r3, [pc, #68]	@ (80012b0 <HAL_ADC_MspInit+0xfc>)
 800126a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800126e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001270:	4b0f      	ldr	r3, [pc, #60]	@ (80012b0 <HAL_ADC_MspInit+0xfc>)
 8001272:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001276:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001278:	4b0d      	ldr	r3, [pc, #52]	@ (80012b0 <HAL_ADC_MspInit+0xfc>)
 800127a:	2220      	movs	r2, #32
 800127c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800127e:	4b0c      	ldr	r3, [pc, #48]	@ (80012b0 <HAL_ADC_MspInit+0xfc>)
 8001280:	2200      	movs	r2, #0
 8001282:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001284:	480a      	ldr	r0, [pc, #40]	@ (80012b0 <HAL_ADC_MspInit+0xfc>)
 8001286:	f001 fad6 	bl	8002836 <HAL_DMA_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <HAL_ADC_MspInit+0xe0>
    {
      Error_Handler();
 8001290:	f7ff ff65 	bl	800115e <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a06      	ldr	r2, [pc, #24]	@ (80012b0 <HAL_ADC_MspInit+0xfc>)
 8001298:	639a      	str	r2, [r3, #56]	@ 0x38
 800129a:	4a05      	ldr	r2, [pc, #20]	@ (80012b0 <HAL_ADC_MspInit+0xfc>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80012a0:	bf00      	nop
 80012a2:	3728      	adds	r7, #40	@ 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40021000 	.word	0x40021000
 80012ac:	48000800 	.word	0x48000800
 80012b0:	20000078 	.word	0x20000078
 80012b4:	40020008 	.word	0x40020008

080012b8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0a      	ldr	r2, [pc, #40]	@ (80012f0 <HAL_TIM_Base_MspInit+0x38>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d10b      	bne.n	80012e2 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012ca:	4b0a      	ldr	r3, [pc, #40]	@ (80012f4 <HAL_TIM_Base_MspInit+0x3c>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	4a09      	ldr	r2, [pc, #36]	@ (80012f4 <HAL_TIM_Base_MspInit+0x3c>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	61d3      	str	r3, [r2, #28]
 80012d6:	4b07      	ldr	r3, [pc, #28]	@ (80012f4 <HAL_TIM_Base_MspInit+0x3c>)
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80012e2:	bf00      	nop
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40000400 	.word	0x40000400
 80012f4:	40021000 	.word	0x40021000

080012f8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a0a      	ldr	r2, [pc, #40]	@ (8001330 <HAL_TIM_PWM_MspInit+0x38>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d10b      	bne.n	8001322 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM15_MspInit 0 */

    /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800130a:	4b0a      	ldr	r3, [pc, #40]	@ (8001334 <HAL_TIM_PWM_MspInit+0x3c>)
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	4a09      	ldr	r2, [pc, #36]	@ (8001334 <HAL_TIM_PWM_MspInit+0x3c>)
 8001310:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001314:	6193      	str	r3, [r2, #24]
 8001316:	4b07      	ldr	r3, [pc, #28]	@ (8001334 <HAL_TIM_PWM_MspInit+0x3c>)
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM15_MspInit 1 */

  }

}
 8001322:	bf00      	nop
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40014000 	.word	0x40014000
 8001334:	40021000 	.word	0x40021000

08001338 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 030c 	add.w	r3, r7, #12
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a11      	ldr	r2, [pc, #68]	@ (800139c <HAL_TIM_MspPostInit+0x64>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d11c      	bne.n	8001394 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800135a:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <HAL_TIM_MspPostInit+0x68>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	4a10      	ldr	r2, [pc, #64]	@ (80013a0 <HAL_TIM_MspPostInit+0x68>)
 8001360:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001364:	6153      	str	r3, [r2, #20]
 8001366:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <HAL_TIM_MspPostInit+0x68>)
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001372:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001376:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001384:	2302      	movs	r3, #2
 8001386:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	4619      	mov	r1, r3
 800138e:	4805      	ldr	r0, [pc, #20]	@ (80013a4 <HAL_TIM_MspPostInit+0x6c>)
 8001390:	f001 fc04 	bl	8002b9c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001394:	bf00      	nop
 8001396:	3720      	adds	r7, #32
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40000400 	.word	0x40000400
 80013a0:	40021000 	.word	0x40021000
 80013a4:	48000800 	.word	0x48000800

080013a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <NMI_Handler+0x4>

080013b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <HardFault_Handler+0x4>

080013b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <MemManage_Handler+0x4>

080013c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <BusFault_Handler+0x4>

080013c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013cc:	bf00      	nop
 80013ce:	e7fd      	b.n	80013cc <UsageFault_Handler+0x4>

080013d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013fe:	f000 f88f 	bl	8001520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800140c:	4802      	ldr	r0, [pc, #8]	@ (8001418 <DMA1_Channel1_IRQHandler+0x10>)
 800140e:	f001 fab8 	bl	8002982 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000078 	.word	0x20000078

0800141c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001420:	4b06      	ldr	r3, [pc, #24]	@ (800143c <SystemInit+0x20>)
 8001422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001426:	4a05      	ldr	r2, [pc, #20]	@ (800143c <SystemInit+0x20>)
 8001428:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800142c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001440:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001478 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001444:	f7ff ffea 	bl	800141c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001448:	480c      	ldr	r0, [pc, #48]	@ (800147c <LoopForever+0x6>)
  ldr r1, =_edata
 800144a:	490d      	ldr	r1, [pc, #52]	@ (8001480 <LoopForever+0xa>)
  ldr r2, =_sidata
 800144c:	4a0d      	ldr	r2, [pc, #52]	@ (8001484 <LoopForever+0xe>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001450:	e002      	b.n	8001458 <LoopCopyDataInit>

08001452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001456:	3304      	adds	r3, #4

08001458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800145c:	d3f9      	bcc.n	8001452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145e:	4a0a      	ldr	r2, [pc, #40]	@ (8001488 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001460:	4c0a      	ldr	r4, [pc, #40]	@ (800148c <LoopForever+0x16>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001464:	e001      	b.n	800146a <LoopFillZerobss>

08001466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001468:	3204      	adds	r2, #4

0800146a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800146c:	d3fb      	bcc.n	8001466 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800146e:	f004 fa43 	bl	80058f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001472:	f7ff facf 	bl	8000a14 <main>

08001476 <LoopForever>:

LoopForever:
    b LoopForever
 8001476:	e7fe      	b.n	8001476 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001478:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800147c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001480:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001484:	08005990 	.word	0x08005990
  ldr r2, =_sbss
 8001488:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800148c:	200001a4 	.word	0x200001a4

08001490 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001490:	e7fe      	b.n	8001490 <ADC1_2_IRQHandler>
	...

08001494 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001498:	4b08      	ldr	r3, [pc, #32]	@ (80014bc <HAL_Init+0x28>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a07      	ldr	r2, [pc, #28]	@ (80014bc <HAL_Init+0x28>)
 800149e:	f043 0310 	orr.w	r3, r3, #16
 80014a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a4:	2003      	movs	r0, #3
 80014a6:	f001 f985 	bl	80027b4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014aa:	200f      	movs	r0, #15
 80014ac:	f000 f808 	bl	80014c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b0:	f7ff fe5c 	bl	800116c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40022000 	.word	0x40022000

080014c0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c8:	4b12      	ldr	r3, [pc, #72]	@ (8001514 <HAL_InitTick+0x54>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b12      	ldr	r3, [pc, #72]	@ (8001518 <HAL_InitTick+0x58>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4619      	mov	r1, r3
 80014d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014da:	fbb2 f3f3 	udiv	r3, r2, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	f001 f99d 	bl	800281e <HAL_SYSTICK_Config>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e00e      	b.n	800150c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b0f      	cmp	r3, #15
 80014f2:	d80a      	bhi.n	800150a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f4:	2200      	movs	r2, #0
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295
 80014fc:	f001 f965 	bl	80027ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001500:	4a06      	ldr	r2, [pc, #24]	@ (800151c <HAL_InitTick+0x5c>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	e000      	b.n	800150c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
}
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000000 	.word	0x20000000
 8001518:	20000008 	.word	0x20000008
 800151c:	20000004 	.word	0x20000004

08001520 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001524:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <HAL_IncTick+0x20>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <HAL_IncTick+0x24>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4413      	add	r3, r2
 8001530:	4a04      	ldr	r2, [pc, #16]	@ (8001544 <HAL_IncTick+0x24>)
 8001532:	6013      	str	r3, [r2, #0]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	20000008 	.word	0x20000008
 8001544:	200001a0 	.word	0x200001a0

08001548 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return uwTick;  
 800154c:	4b03      	ldr	r3, [pc, #12]	@ (800155c <HAL_GetTick+0x14>)
 800154e:	681b      	ldr	r3, [r3, #0]
}
 8001550:	4618      	mov	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	200001a0 	.word	0x200001a0

08001560 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001568:	f7ff ffee 	bl	8001548 <HAL_GetTick>
 800156c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001578:	d005      	beq.n	8001586 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800157a:	4b0a      	ldr	r3, [pc, #40]	@ (80015a4 <HAL_Delay+0x44>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4413      	add	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001586:	bf00      	nop
 8001588:	f7ff ffde 	bl	8001548 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	429a      	cmp	r2, r3
 8001596:	d8f7      	bhi.n	8001588 <HAL_Delay+0x28>
  {
  }
}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000008 	.word	0x20000008

080015a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b09a      	sub	sp, #104	@ 0x68
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015d8:	2300      	movs	r3, #0
 80015da:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80015de:	2300      	movs	r3, #0
 80015e0:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e1e3      	b.n	80019b8 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	691b      	ldr	r3, [r3, #16]
 80015f4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fa:	f003 0310 	and.w	r3, r3, #16
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d176      	bne.n	80016f0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001606:	2b00      	cmp	r3, #0
 8001608:	d152      	bne.n	80016b0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff fdc5 	bl	80011b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d13b      	bne.n	80016b0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 ff85 	bl	8002548 <ADC_Disable>
 800163e:	4603      	mov	r3, r0
 8001640:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	2b00      	cmp	r3, #0
 800164e:	d12f      	bne.n	80016b0 <HAL_ADC_Init+0xe0>
 8001650:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001654:	2b00      	cmp	r3, #0
 8001656:	d12b      	bne.n	80016b0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001660:	f023 0302 	bic.w	r3, r3, #2
 8001664:	f043 0202 	orr.w	r2, r3, #2
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800167a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800168a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800168c:	4b92      	ldr	r3, [pc, #584]	@ (80018d8 <HAL_ADC_Init+0x308>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a92      	ldr	r2, [pc, #584]	@ (80018dc <HAL_ADC_Init+0x30c>)
 8001692:	fba2 2303 	umull	r2, r3, r2, r3
 8001696:	0c9a      	lsrs	r2, r3, #18
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016a2:	e002      	b.n	80016aa <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1f9      	bne.n	80016a4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d007      	beq.n	80016ce <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80016c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80016cc:	d110      	bne.n	80016f0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	f023 0312 	bic.w	r3, r3, #18
 80016d6:	f043 0210 	orr.w	r2, r3, #16
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e2:	f043 0201 	orr.w	r2, r3, #1
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f4:	f003 0310 	and.w	r3, r3, #16
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f040 8150 	bne.w	800199e <HAL_ADC_Init+0x3ce>
 80016fe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001702:	2b00      	cmp	r3, #0
 8001704:	f040 814b 	bne.w	800199e <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001712:	2b00      	cmp	r3, #0
 8001714:	f040 8143 	bne.w	800199e <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001720:	f043 0202 	orr.w	r2, r3, #2
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001730:	d004      	beq.n	800173c <HAL_ADC_Init+0x16c>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a6a      	ldr	r2, [pc, #424]	@ (80018e0 <HAL_ADC_Init+0x310>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d101      	bne.n	8001740 <HAL_ADC_Init+0x170>
 800173c:	4b69      	ldr	r3, [pc, #420]	@ (80018e4 <HAL_ADC_Init+0x314>)
 800173e:	e000      	b.n	8001742 <HAL_ADC_Init+0x172>
 8001740:	4b69      	ldr	r3, [pc, #420]	@ (80018e8 <HAL_ADC_Init+0x318>)
 8001742:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800174c:	d102      	bne.n	8001754 <HAL_ADC_Init+0x184>
 800174e:	4b64      	ldr	r3, [pc, #400]	@ (80018e0 <HAL_ADC_Init+0x310>)
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	e01a      	b.n	800178a <HAL_ADC_Init+0x1ba>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a61      	ldr	r2, [pc, #388]	@ (80018e0 <HAL_ADC_Init+0x310>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d103      	bne.n	8001766 <HAL_ADC_Init+0x196>
 800175e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	e011      	b.n	800178a <HAL_ADC_Init+0x1ba>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a60      	ldr	r2, [pc, #384]	@ (80018ec <HAL_ADC_Init+0x31c>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d102      	bne.n	8001776 <HAL_ADC_Init+0x1a6>
 8001770:	4b5f      	ldr	r3, [pc, #380]	@ (80018f0 <HAL_ADC_Init+0x320>)
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	e009      	b.n	800178a <HAL_ADC_Init+0x1ba>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a5d      	ldr	r2, [pc, #372]	@ (80018f0 <HAL_ADC_Init+0x320>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d102      	bne.n	8001786 <HAL_ADC_Init+0x1b6>
 8001780:	4b5a      	ldr	r3, [pc, #360]	@ (80018ec <HAL_ADC_Init+0x31c>)
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	e001      	b.n	800178a <HAL_ADC_Init+0x1ba>
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	2b01      	cmp	r3, #1
 8001796:	d108      	bne.n	80017aa <HAL_ADC_Init+0x1da>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d101      	bne.n	80017aa <HAL_ADC_Init+0x1da>
 80017a6:	2301      	movs	r3, #1
 80017a8:	e000      	b.n	80017ac <HAL_ADC_Init+0x1dc>
 80017aa:	2300      	movs	r3, #0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d11c      	bne.n	80017ea <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80017b0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d010      	beq.n	80017d8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d107      	bne.n	80017d2 <HAL_ADC_Init+0x202>
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d101      	bne.n	80017d2 <HAL_ADC_Init+0x202>
 80017ce:	2301      	movs	r3, #1
 80017d0:	e000      	b.n	80017d4 <HAL_ADC_Init+0x204>
 80017d2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d108      	bne.n	80017ea <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80017d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	431a      	orrs	r2, r3
 80017e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017e8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	7e5b      	ldrb	r3, [r3, #25]
 80017ee:	035b      	lsls	r3, r3, #13
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80017f4:	2a01      	cmp	r2, #1
 80017f6:	d002      	beq.n	80017fe <HAL_ADC_Init+0x22e>
 80017f8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017fc:	e000      	b.n	8001800 <HAL_ADC_Init+0x230>
 80017fe:	2200      	movs	r2, #0
 8001800:	431a      	orrs	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	4313      	orrs	r3, r2
 800180e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001810:	4313      	orrs	r3, r2
 8001812:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 3020 	ldrb.w	r3, [r3, #32]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d11b      	bne.n	8001856 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	7e5b      	ldrb	r3, [r3, #25]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d109      	bne.n	800183a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182a:	3b01      	subs	r3, #1
 800182c:	045a      	lsls	r2, r3, #17
 800182e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001830:	4313      	orrs	r3, r2
 8001832:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001836:	663b      	str	r3, [r7, #96]	@ 0x60
 8001838:	e00d      	b.n	8001856 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001842:	f043 0220 	orr.w	r2, r3, #32
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800184e:	f043 0201 	orr.w	r2, r3, #1
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800185a:	2b01      	cmp	r3, #1
 800185c:	d054      	beq.n	8001908 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a22      	ldr	r2, [pc, #136]	@ (80018ec <HAL_ADC_Init+0x31c>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d004      	beq.n	8001872 <HAL_ADC_Init+0x2a2>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a20      	ldr	r2, [pc, #128]	@ (80018f0 <HAL_ADC_Init+0x320>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d140      	bne.n	80018f4 <HAL_ADC_Init+0x324>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001876:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 800187a:	d02a      	beq.n	80018d2 <HAL_ADC_Init+0x302>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001880:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001884:	d022      	beq.n	80018cc <HAL_ADC_Init+0x2fc>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800188a:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 800188e:	d01a      	beq.n	80018c6 <HAL_ADC_Init+0x2f6>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001894:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8001898:	d012      	beq.n	80018c0 <HAL_ADC_Init+0x2f0>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800189e:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 80018a2:	d00a      	beq.n	80018ba <HAL_ADC_Init+0x2ea>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a8:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 80018ac:	d002      	beq.n	80018b4 <HAL_ADC_Init+0x2e4>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b2:	e023      	b.n	80018fc <HAL_ADC_Init+0x32c>
 80018b4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80018b8:	e020      	b.n	80018fc <HAL_ADC_Init+0x32c>
 80018ba:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80018be:	e01d      	b.n	80018fc <HAL_ADC_Init+0x32c>
 80018c0:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80018c4:	e01a      	b.n	80018fc <HAL_ADC_Init+0x32c>
 80018c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018ca:	e017      	b.n	80018fc <HAL_ADC_Init+0x32c>
 80018cc:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 80018d0:	e014      	b.n	80018fc <HAL_ADC_Init+0x32c>
 80018d2:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80018d6:	e011      	b.n	80018fc <HAL_ADC_Init+0x32c>
 80018d8:	20000000 	.word	0x20000000
 80018dc:	431bde83 	.word	0x431bde83
 80018e0:	50000100 	.word	0x50000100
 80018e4:	50000300 	.word	0x50000300
 80018e8:	50000700 	.word	0x50000700
 80018ec:	50000400 	.word	0x50000400
 80018f0:	50000500 	.word	0x50000500
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001900:	4313      	orrs	r3, r2
 8001902:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001904:	4313      	orrs	r3, r2
 8001906:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 030c 	and.w	r3, r3, #12
 8001912:	2b00      	cmp	r3, #0
 8001914:	d114      	bne.n	8001940 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001924:	f023 0302 	bic.w	r3, r3, #2
 8001928:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	7e1b      	ldrb	r3, [r3, #24]
 800192e:	039a      	lsls	r2, r3, #14
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	4313      	orrs	r3, r2
 800193a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800193c:	4313      	orrs	r3, r2
 800193e:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68da      	ldr	r2, [r3, #12]
 8001946:	4b1e      	ldr	r3, [pc, #120]	@ (80019c0 <HAL_ADC_Init+0x3f0>)
 8001948:	4013      	ands	r3, r2
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6812      	ldr	r2, [r2, #0]
 800194e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001950:	430b      	orrs	r3, r1
 8001952:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d10c      	bne.n	8001976 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	f023 010f 	bic.w	r1, r3, #15
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	1e5a      	subs	r2, r3, #1
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	631a      	str	r2, [r3, #48]	@ 0x30
 8001974:	e007      	b.n	8001986 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 020f 	bic.w	r2, r2, #15
 8001984:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001990:	f023 0303 	bic.w	r3, r3, #3
 8001994:	f043 0201 	orr.w	r2, r3, #1
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	641a      	str	r2, [r3, #64]	@ 0x40
 800199c:	e00a      	b.n	80019b4 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	f023 0312 	bic.w	r3, r3, #18
 80019a6:	f043 0210 	orr.w	r2, r3, #16
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80019ae:	2301      	movs	r3, #1
 80019b0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80019b4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3768      	adds	r7, #104	@ 0x68
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	fff0c007 	.word	0xfff0c007

080019c4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f040 80f7 	bne.w	8001bd2 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d101      	bne.n	80019f2 <HAL_ADC_Start_DMA+0x2e>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e0f2      	b.n	8001bd8 <HAL_ADC_Start_DMA+0x214>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a02:	d004      	beq.n	8001a0e <HAL_ADC_Start_DMA+0x4a>
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a75      	ldr	r2, [pc, #468]	@ (8001be0 <HAL_ADC_Start_DMA+0x21c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d109      	bne.n	8001a22 <HAL_ADC_Start_DMA+0x5e>
 8001a0e:	4b75      	ldr	r3, [pc, #468]	@ (8001be4 <HAL_ADC_Start_DMA+0x220>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f003 031f 	and.w	r3, r3, #31
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	bf0c      	ite	eq
 8001a1a:	2301      	moveq	r3, #1
 8001a1c:	2300      	movne	r3, #0
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	e008      	b.n	8001a34 <HAL_ADC_Start_DMA+0x70>
 8001a22:	4b71      	ldr	r3, [pc, #452]	@ (8001be8 <HAL_ADC_Start_DMA+0x224>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 031f 	and.w	r3, r3, #31
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	bf0c      	ite	eq
 8001a2e:	2301      	moveq	r3, #1
 8001a30:	2300      	movne	r3, #0
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 80c5 	beq.w	8001bc4 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 fd20 	bl	8002480 <ADC_Enable>
 8001a40:	4603      	mov	r3, r0
 8001a42:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001a44:	7dfb      	ldrb	r3, [r7, #23]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f040 80b7 	bne.w	8001bba <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a50:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a54:	f023 0301 	bic.w	r3, r3, #1
 8001a58:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a68:	d004      	beq.n	8001a74 <HAL_ADC_Start_DMA+0xb0>
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a5c      	ldr	r2, [pc, #368]	@ (8001be0 <HAL_ADC_Start_DMA+0x21c>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d106      	bne.n	8001a82 <HAL_ADC_Start_DMA+0xbe>
 8001a74:	4b5b      	ldr	r3, [pc, #364]	@ (8001be4 <HAL_ADC_Start_DMA+0x220>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 031f 	and.w	r3, r3, #31
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d010      	beq.n	8001aa2 <HAL_ADC_Start_DMA+0xde>
 8001a80:	e005      	b.n	8001a8e <HAL_ADC_Start_DMA+0xca>
 8001a82:	4b59      	ldr	r3, [pc, #356]	@ (8001be8 <HAL_ADC_Start_DMA+0x224>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 031f 	and.w	r3, r3, #31
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d009      	beq.n	8001aa2 <HAL_ADC_Start_DMA+0xde>
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a96:	d004      	beq.n	8001aa2 <HAL_ADC_Start_DMA+0xde>
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a53      	ldr	r2, [pc, #332]	@ (8001bec <HAL_ADC_Start_DMA+0x228>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d115      	bne.n	8001ace <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d036      	beq.n	8001b2a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ac4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001acc:	e02d      	b.n	8001b2a <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ae2:	d004      	beq.n	8001aee <HAL_ADC_Start_DMA+0x12a>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a3d      	ldr	r2, [pc, #244]	@ (8001be0 <HAL_ADC_Start_DMA+0x21c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d10a      	bne.n	8001b04 <HAL_ADC_Start_DMA+0x140>
 8001aee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	bf14      	ite	ne
 8001afc:	2301      	movne	r3, #1
 8001afe:	2300      	moveq	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	e008      	b.n	8001b16 <HAL_ADC_Start_DMA+0x152>
 8001b04:	4b39      	ldr	r3, [pc, #228]	@ (8001bec <HAL_ADC_Start_DMA+0x228>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	bf14      	ite	ne
 8001b10:	2301      	movne	r3, #1
 8001b12:	2300      	moveq	r3, #0
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b22:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b36:	d106      	bne.n	8001b46 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3c:	f023 0206 	bic.w	r2, r3, #6
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	645a      	str	r2, [r3, #68]	@ 0x44
 8001b44:	e002      	b.n	8001b4c <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b58:	4a25      	ldr	r2, [pc, #148]	@ (8001bf0 <HAL_ADC_Start_DMA+0x22c>)
 8001b5a:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b60:	4a24      	ldr	r2, [pc, #144]	@ (8001bf4 <HAL_ADC_Start_DMA+0x230>)
 8001b62:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b68:	4a23      	ldr	r2, [pc, #140]	@ (8001bf8 <HAL_ADC_Start_DMA+0x234>)
 8001b6a:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	221c      	movs	r2, #28
 8001b72:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0210 	orr.w	r2, r2, #16
 8001b82:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68da      	ldr	r2, [r3, #12]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 0201 	orr.w	r2, r2, #1
 8001b92:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	3340      	adds	r3, #64	@ 0x40
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	68ba      	ldr	r2, [r7, #8]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f000 fe8e 	bl	80028c4 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 0204 	orr.w	r2, r2, #4
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	e00d      	b.n	8001bd6 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001bc2:	e008      	b.n	8001bd6 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001bd0:	e001      	b.n	8001bd6 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	50000100 	.word	0x50000100
 8001be4:	50000300 	.word	0x50000300
 8001be8:	50000700 	.word	0x50000700
 8001bec:	50000400 	.word	0x50000400
 8001bf0:	080023b5 	.word	0x080023b5
 8001bf4:	0800242f 	.word	0x0800242f
 8001bf8:	0800244b 	.word	0x0800244b

08001bfc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b09b      	sub	sp, #108	@ 0x6c
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d101      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x22>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e2c8      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x5b4>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f040 82ac 	bne.w	800218e <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	d81c      	bhi.n	8001c78 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	4413      	add	r3, r2
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	461a      	mov	r2, r3
 8001c52:	231f      	movs	r3, #31
 8001c54:	4093      	lsls	r3, r2
 8001c56:	43db      	mvns	r3, r3
 8001c58:	4019      	ands	r1, r3
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	6818      	ldr	r0, [r3, #0]
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	4613      	mov	r3, r2
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	4413      	add	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c76:	e063      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b09      	cmp	r3, #9
 8001c7e:	d81e      	bhi.n	8001cbe <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	4413      	add	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	3b1e      	subs	r3, #30
 8001c94:	221f      	movs	r2, #31
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	4019      	ands	r1, r3
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	6818      	ldr	r0, [r3, #0]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4413      	add	r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	3b1e      	subs	r3, #30
 8001cb0:	fa00 f203 	lsl.w	r2, r0, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cbc:	e040      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b0e      	cmp	r3, #14
 8001cc4:	d81e      	bhi.n	8001d04 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	4413      	add	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	3b3c      	subs	r3, #60	@ 0x3c
 8001cda:	221f      	movs	r2, #31
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	4019      	ands	r1, r3
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	6818      	ldr	r0, [r3, #0]
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	4613      	mov	r3, r2
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	4413      	add	r3, r2
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	3b3c      	subs	r3, #60	@ 0x3c
 8001cf6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d02:	e01d      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4413      	add	r3, r2
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	3b5a      	subs	r3, #90	@ 0x5a
 8001d18:	221f      	movs	r2, #31
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	4019      	ands	r1, r3
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	6818      	ldr	r0, [r3, #0]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	4413      	add	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	3b5a      	subs	r3, #90	@ 0x5a
 8001d34:	fa00 f203 	lsl.w	r2, r0, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 030c 	and.w	r3, r3, #12
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f040 80e5 	bne.w	8001f1a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b09      	cmp	r3, #9
 8001d56:	d91c      	bls.n	8001d92 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6999      	ldr	r1, [r3, #24]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	4613      	mov	r3, r2
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	4413      	add	r3, r2
 8001d68:	3b1e      	subs	r3, #30
 8001d6a:	2207      	movs	r2, #7
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	4019      	ands	r1, r3
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	6898      	ldr	r0, [r3, #8]
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	4413      	add	r3, r2
 8001d82:	3b1e      	subs	r3, #30
 8001d84:	fa00 f203 	lsl.w	r2, r0, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	619a      	str	r2, [r3, #24]
 8001d90:	e019      	b.n	8001dc6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6959      	ldr	r1, [r3, #20]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4413      	add	r3, r2
 8001da2:	2207      	movs	r2, #7
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	4019      	ands	r1, r3
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	6898      	ldr	r0, [r3, #8]
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4613      	mov	r3, r2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	4413      	add	r3, r2
 8001dba:	fa00 f203 	lsl.w	r2, r0, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	695a      	ldr	r2, [r3, #20]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	08db      	lsrs	r3, r3, #3
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	2b03      	cmp	r3, #3
 8001de6:	d84f      	bhi.n	8001e88 <HAL_ADC_ConfigChannel+0x28c>
 8001de8:	a201      	add	r2, pc, #4	@ (adr r2, 8001df0 <HAL_ADC_ConfigChannel+0x1f4>)
 8001dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dee:	bf00      	nop
 8001df0:	08001e01 	.word	0x08001e01
 8001df4:	08001e23 	.word	0x08001e23
 8001df8:	08001e45 	.word	0x08001e45
 8001dfc:	08001e67 	.word	0x08001e67
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e06:	4b99      	ldr	r3, [pc, #612]	@ (800206c <HAL_ADC_ConfigChannel+0x470>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	6812      	ldr	r2, [r2, #0]
 8001e0e:	0691      	lsls	r1, r2, #26
 8001e10:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001e12:	430a      	orrs	r2, r1
 8001e14:	431a      	orrs	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001e1e:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e20:	e07b      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001e28:	4b90      	ldr	r3, [pc, #576]	@ (800206c <HAL_ADC_ConfigChannel+0x470>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	0691      	lsls	r1, r2, #26
 8001e32:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001e34:	430a      	orrs	r2, r1
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001e40:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e42:	e06a      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001e4a:	4b88      	ldr	r3, [pc, #544]	@ (800206c <HAL_ADC_ConfigChannel+0x470>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	0691      	lsls	r1, r2, #26
 8001e54:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001e56:	430a      	orrs	r2, r1
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001e62:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e64:	e059      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001e6c:	4b7f      	ldr	r3, [pc, #508]	@ (800206c <HAL_ADC_ConfigChannel+0x470>)
 8001e6e:	4013      	ands	r3, r2
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	0691      	lsls	r1, r2, #26
 8001e76:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001e84:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e86:	e048      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	069b      	lsls	r3, r3, #26
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d107      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001eaa:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001eb2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	069b      	lsls	r3, r3, #26
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d107      	bne.n	8001ed0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001ece:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ed6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	069b      	lsls	r3, r3, #26
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d107      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001ef2:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001efa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	069b      	lsls	r3, r3, #26
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d107      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001f16:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001f18:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d108      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0x33e>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d101      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0x33e>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x340>
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f040 8131 	bne.w	80021a4 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d00f      	beq.n	8001f6a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2201      	movs	r2, #1
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43da      	mvns	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	400a      	ands	r2, r1
 8001f64:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001f68:	e049      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2201      	movs	r2, #1
 8001f78:	409a      	lsls	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b09      	cmp	r3, #9
 8001f8a:	d91c      	bls.n	8001fc6 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6999      	ldr	r1, [r3, #24]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	4613      	mov	r3, r2
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3b1b      	subs	r3, #27
 8001f9e:	2207      	movs	r2, #7
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	4019      	ands	r1, r3
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	6898      	ldr	r0, [r3, #8]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3b1b      	subs	r3, #27
 8001fb8:	fa00 f203 	lsl.w	r2, r0, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	619a      	str	r2, [r3, #24]
 8001fc4:	e01b      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6959      	ldr	r1, [r3, #20]
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	1c5a      	adds	r2, r3, #1
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	4413      	add	r3, r2
 8001fd8:	2207      	movs	r2, #7
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	4019      	ands	r1, r3
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	6898      	ldr	r0, [r3, #8]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	1c5a      	adds	r2, r3, #1
 8001fec:	4613      	mov	r3, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	4413      	add	r3, r2
 8001ff2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002006:	d004      	beq.n	8002012 <HAL_ADC_ConfigChannel+0x416>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a18      	ldr	r2, [pc, #96]	@ (8002070 <HAL_ADC_ConfigChannel+0x474>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d101      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x41a>
 8002012:	4b18      	ldr	r3, [pc, #96]	@ (8002074 <HAL_ADC_ConfigChannel+0x478>)
 8002014:	e000      	b.n	8002018 <HAL_ADC_ConfigChannel+0x41c>
 8002016:	4b18      	ldr	r3, [pc, #96]	@ (8002078 <HAL_ADC_ConfigChannel+0x47c>)
 8002018:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2b10      	cmp	r3, #16
 8002020:	d105      	bne.n	800202e <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002022:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800202a:	2b00      	cmp	r3, #0
 800202c:	d015      	beq.n	800205a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002032:	2b11      	cmp	r3, #17
 8002034:	d105      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002036:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00b      	beq.n	800205a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002046:	2b12      	cmp	r3, #18
 8002048:	f040 80ac 	bne.w	80021a4 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800204c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002054:	2b00      	cmp	r3, #0
 8002056:	f040 80a5 	bne.w	80021a4 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002062:	d10b      	bne.n	800207c <HAL_ADC_ConfigChannel+0x480>
 8002064:	4b02      	ldr	r3, [pc, #8]	@ (8002070 <HAL_ADC_ConfigChannel+0x474>)
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	e023      	b.n	80020b2 <HAL_ADC_ConfigChannel+0x4b6>
 800206a:	bf00      	nop
 800206c:	83fff000 	.word	0x83fff000
 8002070:	50000100 	.word	0x50000100
 8002074:	50000300 	.word	0x50000300
 8002078:	50000700 	.word	0x50000700
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a4e      	ldr	r2, [pc, #312]	@ (80021bc <HAL_ADC_ConfigChannel+0x5c0>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d103      	bne.n	800208e <HAL_ADC_ConfigChannel+0x492>
 8002086:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	e011      	b.n	80020b2 <HAL_ADC_ConfigChannel+0x4b6>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a4b      	ldr	r2, [pc, #300]	@ (80021c0 <HAL_ADC_ConfigChannel+0x5c4>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d102      	bne.n	800209e <HAL_ADC_ConfigChannel+0x4a2>
 8002098:	4b4a      	ldr	r3, [pc, #296]	@ (80021c4 <HAL_ADC_ConfigChannel+0x5c8>)
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	e009      	b.n	80020b2 <HAL_ADC_ConfigChannel+0x4b6>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a48      	ldr	r2, [pc, #288]	@ (80021c4 <HAL_ADC_ConfigChannel+0x5c8>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d102      	bne.n	80020ae <HAL_ADC_ConfigChannel+0x4b2>
 80020a8:	4b45      	ldr	r3, [pc, #276]	@ (80021c0 <HAL_ADC_ConfigChannel+0x5c4>)
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	e001      	b.n	80020b2 <HAL_ADC_ConfigChannel+0x4b6>
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 0303 	and.w	r3, r3, #3
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d108      	bne.n	80020d2 <HAL_ADC_ConfigChannel+0x4d6>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d101      	bne.n	80020d2 <HAL_ADC_ConfigChannel+0x4d6>
 80020ce:	2301      	movs	r3, #1
 80020d0:	e000      	b.n	80020d4 <HAL_ADC_ConfigChannel+0x4d8>
 80020d2:	2300      	movs	r3, #0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d150      	bne.n	800217a <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80020d8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d010      	beq.n	8002100 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d107      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x4fe>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d101      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x4fe>
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <HAL_ADC_ConfigChannel+0x500>
 80020fa:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d13c      	bne.n	800217a <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b10      	cmp	r3, #16
 8002106:	d11d      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x548>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002110:	d118      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002112:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800211a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800211c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800211e:	4b2a      	ldr	r3, [pc, #168]	@ (80021c8 <HAL_ADC_ConfigChannel+0x5cc>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a2a      	ldr	r2, [pc, #168]	@ (80021cc <HAL_ADC_ConfigChannel+0x5d0>)
 8002124:	fba2 2303 	umull	r2, r3, r2, r3
 8002128:	0c9a      	lsrs	r2, r3, #18
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002134:	e002      	b.n	800213c <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	3b01      	subs	r3, #1
 800213a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f9      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002142:	e02e      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b11      	cmp	r3, #17
 800214a:	d10b      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x568>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002154:	d106      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002156:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800215e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002160:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002162:	e01e      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b12      	cmp	r3, #18
 800216a:	d11a      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800216c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002174:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002176:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002178:	e013      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217e:	f043 0220 	orr.w	r2, r3, #32
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800218c:	e00a      	b.n	80021a4 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002192:	f043 0220 	orr.w	r2, r3, #32
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80021a0:	e000      	b.n	80021a4 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021a2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80021ac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	376c      	adds	r7, #108	@ 0x6c
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	50000100 	.word	0x50000100
 80021c0:	50000400 	.word	0x50000400
 80021c4:	50000500 	.word	0x50000500
 80021c8:	20000000 	.word	0x20000000
 80021cc:	431bde83 	.word	0x431bde83

080021d0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b099      	sub	sp, #100	@ 0x64
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021e8:	d102      	bne.n	80021f0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80021ea:	4b6d      	ldr	r3, [pc, #436]	@ (80023a0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	e01a      	b.n	8002226 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a6a      	ldr	r2, [pc, #424]	@ (80023a0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d103      	bne.n	8002202 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80021fa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	e011      	b.n	8002226 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a67      	ldr	r2, [pc, #412]	@ (80023a4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d102      	bne.n	8002212 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800220c:	4b66      	ldr	r3, [pc, #408]	@ (80023a8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800220e:	60bb      	str	r3, [r7, #8]
 8002210:	e009      	b.n	8002226 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a64      	ldr	r2, [pc, #400]	@ (80023a8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d102      	bne.n	8002222 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800221c:	4b61      	ldr	r3, [pc, #388]	@ (80023a4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	e001      	b.n	8002226 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0b0      	b.n	8002392 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002236:	2b01      	cmp	r3, #1
 8002238:	d101      	bne.n	800223e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800223a:	2302      	movs	r3, #2
 800223c:	e0a9      	b.n	8002392 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	f040 808d 	bne.w	8002370 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	2b00      	cmp	r3, #0
 8002260:	f040 8086 	bne.w	8002370 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800226c:	d004      	beq.n	8002278 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a4b      	ldr	r2, [pc, #300]	@ (80023a0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d101      	bne.n	800227c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002278:	4b4c      	ldr	r3, [pc, #304]	@ (80023ac <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800227a:	e000      	b.n	800227e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800227c:	4b4c      	ldr	r3, [pc, #304]	@ (80023b0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800227e:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d040      	beq.n	800230a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002288:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	6859      	ldr	r1, [r3, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800229a:	035b      	lsls	r3, r3, #13
 800229c:	430b      	orrs	r3, r1
 800229e:	431a      	orrs	r2, r3
 80022a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022a2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d108      	bne.n	80022c4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d101      	bne.n	80022c4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80022c4:	2300      	movs	r3, #0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d15c      	bne.n	8002384 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d107      	bne.n	80022e6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d101      	bne.n	80022e6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80022e6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d14b      	bne.n	8002384 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80022ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80022f4:	f023 030f 	bic.w	r3, r3, #15
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	6811      	ldr	r1, [r2, #0]
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	6892      	ldr	r2, [r2, #8]
 8002300:	430a      	orrs	r2, r1
 8002302:	431a      	orrs	r2, r3
 8002304:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002306:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002308:	e03c      	b.n	8002384 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800230a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002312:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002314:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 0303 	and.w	r3, r3, #3
 8002320:	2b01      	cmp	r3, #1
 8002322:	d108      	bne.n	8002336 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002336:	2300      	movs	r3, #0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d123      	bne.n	8002384 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	2b01      	cmp	r3, #1
 8002346:	d107      	bne.n	8002358 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002354:	2301      	movs	r3, #1
 8002356:	e000      	b.n	800235a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002358:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800235a:	2b00      	cmp	r3, #0
 800235c:	d112      	bne.n	8002384 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800235e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002366:	f023 030f 	bic.w	r3, r3, #15
 800236a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800236c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800236e:	e009      	b.n	8002384 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002374:	f043 0220 	orr.w	r2, r3, #32
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002382:	e000      	b.n	8002386 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002384:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800238e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8002392:	4618      	mov	r0, r3
 8002394:	3764      	adds	r7, #100	@ 0x64
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	50000100 	.word	0x50000100
 80023a4:	50000400 	.word	0x50000400
 80023a8:	50000500 	.word	0x50000500
 80023ac:	50000300 	.word	0x50000300
 80023b0:	50000700 	.word	0x50000700

080023b4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d126      	bne.n	800241c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d115      	bne.n	8002414 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d111      	bne.n	8002414 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002400:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d105      	bne.n	8002414 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240c:	f043 0201 	orr.w	r2, r3, #1
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f7fe fd77 	bl	8000f08 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800241a:	e004      	b.n	8002426 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	4798      	blx	r3
}
 8002426:	bf00      	nop
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b084      	sub	sp, #16
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f7ff f8b3 	bl	80015a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002442:	bf00      	nop
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b084      	sub	sp, #16
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002456:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002468:	f043 0204 	orr.w	r2, r3, #4
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f7ff f8a3 	bl	80015bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002476:	bf00      	nop
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	2b01      	cmp	r3, #1
 8002498:	d108      	bne.n	80024ac <ADC_Enable+0x2c>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d101      	bne.n	80024ac <ADC_Enable+0x2c>
 80024a8:	2301      	movs	r3, #1
 80024aa:	e000      	b.n	80024ae <ADC_Enable+0x2e>
 80024ac:	2300      	movs	r3, #0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d143      	bne.n	800253a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	4b22      	ldr	r3, [pc, #136]	@ (8002544 <ADC_Enable+0xc4>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00d      	beq.n	80024dc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c4:	f043 0210 	orr.w	r2, r3, #16
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d0:	f043 0201 	orr.w	r2, r3, #1
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e02f      	b.n	800253c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0201 	orr.w	r2, r2, #1
 80024ea:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80024ec:	f7ff f82c 	bl	8001548 <HAL_GetTick>
 80024f0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024f2:	e01b      	b.n	800252c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024f4:	f7ff f828 	bl	8001548 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d914      	bls.n	800252c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b01      	cmp	r3, #1
 800250e:	d00d      	beq.n	800252c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002514:	f043 0210 	orr.w	r2, r3, #16
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002520:	f043 0201 	orr.w	r2, r3, #1
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e007      	b.n	800253c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b01      	cmp	r3, #1
 8002538:	d1dc      	bne.n	80024f4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	8000003f 	.word	0x8000003f

08002548 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	2b01      	cmp	r3, #1
 8002560:	d108      	bne.n	8002574 <ADC_Disable+0x2c>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b01      	cmp	r3, #1
 800256e:	d101      	bne.n	8002574 <ADC_Disable+0x2c>
 8002570:	2301      	movs	r3, #1
 8002572:	e000      	b.n	8002576 <ADC_Disable+0x2e>
 8002574:	2300      	movs	r3, #0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d047      	beq.n	800260a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 030d 	and.w	r3, r3, #13
 8002584:	2b01      	cmp	r3, #1
 8002586:	d10f      	bne.n	80025a8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0202 	orr.w	r2, r2, #2
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2203      	movs	r2, #3
 800259e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80025a0:	f7fe ffd2 	bl	8001548 <HAL_GetTick>
 80025a4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025a6:	e029      	b.n	80025fc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ac:	f043 0210 	orr.w	r2, r3, #16
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b8:	f043 0201 	orr.w	r2, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e023      	b.n	800260c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80025c4:	f7fe ffc0 	bl	8001548 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d914      	bls.n	80025fc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d10d      	bne.n	80025fc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e4:	f043 0210 	orr.w	r2, r3, #16
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f0:	f043 0201 	orr.w	r2, r3, #1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e007      	b.n	800260c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b01      	cmp	r3, #1
 8002608:	d0dc      	beq.n	80025c4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002624:	4b0c      	ldr	r3, [pc, #48]	@ (8002658 <__NVIC_SetPriorityGrouping+0x44>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002630:	4013      	ands	r3, r2
 8002632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800263c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002640:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002646:	4a04      	ldr	r2, [pc, #16]	@ (8002658 <__NVIC_SetPriorityGrouping+0x44>)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	60d3      	str	r3, [r2, #12]
}
 800264c:	bf00      	nop
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002660:	4b04      	ldr	r3, [pc, #16]	@ (8002674 <__NVIC_GetPriorityGrouping+0x18>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	0a1b      	lsrs	r3, r3, #8
 8002666:	f003 0307 	and.w	r3, r3, #7
}
 800266a:	4618      	mov	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002686:	2b00      	cmp	r3, #0
 8002688:	db0b      	blt.n	80026a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800268a:	79fb      	ldrb	r3, [r7, #7]
 800268c:	f003 021f 	and.w	r2, r3, #31
 8002690:	4907      	ldr	r1, [pc, #28]	@ (80026b0 <__NVIC_EnableIRQ+0x38>)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	2001      	movs	r0, #1
 800269a:	fa00 f202 	lsl.w	r2, r0, r2
 800269e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	e000e100 	.word	0xe000e100

080026b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	6039      	str	r1, [r7, #0]
 80026be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	db0a      	blt.n	80026de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	490c      	ldr	r1, [pc, #48]	@ (8002700 <__NVIC_SetPriority+0x4c>)
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	0112      	lsls	r2, r2, #4
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	440b      	add	r3, r1
 80026d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026dc:	e00a      	b.n	80026f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	4908      	ldr	r1, [pc, #32]	@ (8002704 <__NVIC_SetPriority+0x50>)
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	3b04      	subs	r3, #4
 80026ec:	0112      	lsls	r2, r2, #4
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	440b      	add	r3, r1
 80026f2:	761a      	strb	r2, [r3, #24]
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	e000e100 	.word	0xe000e100
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002708:	b480      	push	{r7}
 800270a:	b089      	sub	sp, #36	@ 0x24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f1c3 0307 	rsb	r3, r3, #7
 8002722:	2b04      	cmp	r3, #4
 8002724:	bf28      	it	cs
 8002726:	2304      	movcs	r3, #4
 8002728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3304      	adds	r3, #4
 800272e:	2b06      	cmp	r3, #6
 8002730:	d902      	bls.n	8002738 <NVIC_EncodePriority+0x30>
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3b03      	subs	r3, #3
 8002736:	e000      	b.n	800273a <NVIC_EncodePriority+0x32>
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800273c:	f04f 32ff 	mov.w	r2, #4294967295
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43da      	mvns	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	401a      	ands	r2, r3
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002750:	f04f 31ff 	mov.w	r1, #4294967295
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	fa01 f303 	lsl.w	r3, r1, r3
 800275a:	43d9      	mvns	r1, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002760:	4313      	orrs	r3, r2
         );
}
 8002762:	4618      	mov	r0, r3
 8002764:	3724      	adds	r7, #36	@ 0x24
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
	...

08002770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3b01      	subs	r3, #1
 800277c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002780:	d301      	bcc.n	8002786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002782:	2301      	movs	r3, #1
 8002784:	e00f      	b.n	80027a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002786:	4a0a      	ldr	r2, [pc, #40]	@ (80027b0 <SysTick_Config+0x40>)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3b01      	subs	r3, #1
 800278c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800278e:	210f      	movs	r1, #15
 8002790:	f04f 30ff 	mov.w	r0, #4294967295
 8002794:	f7ff ff8e 	bl	80026b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002798:	4b05      	ldr	r3, [pc, #20]	@ (80027b0 <SysTick_Config+0x40>)
 800279a:	2200      	movs	r2, #0
 800279c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800279e:	4b04      	ldr	r3, [pc, #16]	@ (80027b0 <SysTick_Config+0x40>)
 80027a0:	2207      	movs	r2, #7
 80027a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	e000e010 	.word	0xe000e010

080027b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7ff ff29 	bl	8002614 <__NVIC_SetPriorityGrouping>
}
 80027c2:	bf00      	nop
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b086      	sub	sp, #24
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	4603      	mov	r3, r0
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	607a      	str	r2, [r7, #4]
 80027d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027dc:	f7ff ff3e 	bl	800265c <__NVIC_GetPriorityGrouping>
 80027e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	68b9      	ldr	r1, [r7, #8]
 80027e6:	6978      	ldr	r0, [r7, #20]
 80027e8:	f7ff ff8e 	bl	8002708 <NVIC_EncodePriority>
 80027ec:	4602      	mov	r2, r0
 80027ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027f2:	4611      	mov	r1, r2
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff ff5d 	bl	80026b4 <__NVIC_SetPriority>
}
 80027fa:	bf00      	nop
 80027fc:	3718      	adds	r7, #24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	4603      	mov	r3, r0
 800280a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800280c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ff31 	bl	8002678 <__NVIC_EnableIRQ>
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7ff ffa2 	bl	8002770 <SysTick_Config>
 800282c:	4603      	mov	r3, r0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b084      	sub	sp, #16
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800283e:	2300      	movs	r3, #0
 8002840:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e037      	b.n	80028bc <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2202      	movs	r2, #2
 8002850:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002862:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002866:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002870:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800287c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002888:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	4313      	orrs	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f940 	bl	8002b24 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
 80028d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d101      	bne.n	80028e4 <HAL_DMA_Start_IT+0x20>
 80028e0:	2302      	movs	r3, #2
 80028e2:	e04a      	b.n	800297a <HAL_DMA_Start_IT+0xb6>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d13a      	bne.n	800296c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2202      	movs	r2, #2
 80028fa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0201 	bic.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	68b9      	ldr	r1, [r7, #8]
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 f8d4 	bl	8002ac8 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002924:	2b00      	cmp	r3, #0
 8002926:	d008      	beq.n	800293a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 020e 	orr.w	r2, r2, #14
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	e00f      	b.n	800295a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f042 020a 	orr.w	r2, r2, #10
 8002948:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0204 	bic.w	r2, r2, #4
 8002958:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f042 0201 	orr.w	r2, r2, #1
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	e005      	b.n	8002978 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002974:	2302      	movs	r3, #2
 8002976:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002978:	7dfb      	ldrb	r3, [r7, #23]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b084      	sub	sp, #16
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299e:	2204      	movs	r2, #4
 80029a0:	409a      	lsls	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d024      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x72>
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d01f      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0320 	and.w	r3, r3, #32
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d107      	bne.n	80029d2 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0204 	bic.w	r2, r2, #4
 80029d0:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029da:	2104      	movs	r1, #4
 80029dc:	fa01 f202 	lsl.w	r2, r1, r2
 80029e0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d06a      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80029f2:	e065      	b.n	8002ac0 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f8:	2202      	movs	r2, #2
 80029fa:	409a      	lsls	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4013      	ands	r3, r2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d02c      	beq.n	8002a5e <HAL_DMA_IRQHandler+0xdc>
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d027      	beq.n	8002a5e <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0320 	and.w	r3, r3, #32
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10b      	bne.n	8002a34 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 020a 	bic.w	r2, r2, #10
 8002a2a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a3c:	2102      	movs	r1, #2
 8002a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a42:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d035      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a5c:	e030      	b.n	8002ac0 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a62:	2208      	movs	r2, #8
 8002a64:	409a      	lsls	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d028      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x13e>
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	f003 0308 	and.w	r3, r3, #8
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d023      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 020e 	bic.w	r2, r2, #14
 8002a86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a90:	2101      	movs	r1, #1
 8002a92:	fa01 f202 	lsl.w	r2, r1, r2
 8002a96:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d004      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	4798      	blx	r3
    }
  }
}
 8002abe:	e7ff      	b.n	8002ac0 <HAL_DMA_IRQHandler+0x13e>
 8002ac0:	bf00      	nop
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
 8002ad4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ade:	2101      	movs	r1, #1
 8002ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b10      	cmp	r3, #16
 8002af4:	d108      	bne.n	8002b08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b06:	e007      	b.n	8002b18 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	60da      	str	r2, [r3, #12]
}
 8002b18:	bf00      	nop
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	461a      	mov	r2, r3
 8002b32:	4b14      	ldr	r3, [pc, #80]	@ (8002b84 <DMA_CalcBaseAndBitshift+0x60>)
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d80f      	bhi.n	8002b58 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4b12      	ldr	r3, [pc, #72]	@ (8002b88 <DMA_CalcBaseAndBitshift+0x64>)
 8002b40:	4413      	add	r3, r2
 8002b42:	4a12      	ldr	r2, [pc, #72]	@ (8002b8c <DMA_CalcBaseAndBitshift+0x68>)
 8002b44:	fba2 2303 	umull	r2, r3, r2, r3
 8002b48:	091b      	lsrs	r3, r3, #4
 8002b4a:	009a      	lsls	r2, r3, #2
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a0f      	ldr	r2, [pc, #60]	@ (8002b90 <DMA_CalcBaseAndBitshift+0x6c>)
 8002b54:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002b56:	e00e      	b.n	8002b76 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b94 <DMA_CalcBaseAndBitshift+0x70>)
 8002b60:	4413      	add	r3, r2
 8002b62:	4a0a      	ldr	r2, [pc, #40]	@ (8002b8c <DMA_CalcBaseAndBitshift+0x68>)
 8002b64:	fba2 2303 	umull	r2, r3, r2, r3
 8002b68:	091b      	lsrs	r3, r3, #4
 8002b6a:	009a      	lsls	r2, r3, #2
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a09      	ldr	r2, [pc, #36]	@ (8002b98 <DMA_CalcBaseAndBitshift+0x74>)
 8002b74:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40020407 	.word	0x40020407
 8002b88:	bffdfff8 	.word	0xbffdfff8
 8002b8c:	cccccccd 	.word	0xcccccccd
 8002b90:	40020000 	.word	0x40020000
 8002b94:	bffdfbf8 	.word	0xbffdfbf8
 8002b98:	40020400 	.word	0x40020400

08002b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b087      	sub	sp, #28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002baa:	e160      	b.n	8002e6e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb8:	4013      	ands	r3, r2
 8002bba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 8152 	beq.w	8002e68 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f003 0303 	and.w	r3, r3, #3
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d005      	beq.n	8002bdc <HAL_GPIO_Init+0x40>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 0303 	and.w	r3, r3, #3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d130      	bne.n	8002c3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	2203      	movs	r2, #3
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	43db      	mvns	r3, r3
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c12:	2201      	movs	r2, #1
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	091b      	lsrs	r3, r3, #4
 8002c28:	f003 0201 	and.w	r2, r3, #1
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	2b03      	cmp	r3, #3
 8002c48:	d017      	beq.n	8002c7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	2203      	movs	r2, #3
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d123      	bne.n	8002cce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	08da      	lsrs	r2, r3, #3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	3208      	adds	r2, #8
 8002c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	220f      	movs	r2, #15
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	691a      	ldr	r2, [r3, #16]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	08da      	lsrs	r2, r3, #3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3208      	adds	r2, #8
 8002cc8:	6939      	ldr	r1, [r7, #16]
 8002cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	2203      	movs	r2, #3
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f003 0203 	and.w	r2, r3, #3
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 80ac 	beq.w	8002e68 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d10:	4b5e      	ldr	r3, [pc, #376]	@ (8002e8c <HAL_GPIO_Init+0x2f0>)
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	4a5d      	ldr	r2, [pc, #372]	@ (8002e8c <HAL_GPIO_Init+0x2f0>)
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	6193      	str	r3, [r2, #24]
 8002d1c:	4b5b      	ldr	r3, [pc, #364]	@ (8002e8c <HAL_GPIO_Init+0x2f0>)
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d28:	4a59      	ldr	r2, [pc, #356]	@ (8002e90 <HAL_GPIO_Init+0x2f4>)
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	089b      	lsrs	r3, r3, #2
 8002d2e:	3302      	adds	r3, #2
 8002d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f003 0303 	and.w	r3, r3, #3
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	220f      	movs	r2, #15
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	43db      	mvns	r3, r3
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002d52:	d025      	beq.n	8002da0 <HAL_GPIO_Init+0x204>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a4f      	ldr	r2, [pc, #316]	@ (8002e94 <HAL_GPIO_Init+0x2f8>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d01f      	beq.n	8002d9c <HAL_GPIO_Init+0x200>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a4e      	ldr	r2, [pc, #312]	@ (8002e98 <HAL_GPIO_Init+0x2fc>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d019      	beq.n	8002d98 <HAL_GPIO_Init+0x1fc>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a4d      	ldr	r2, [pc, #308]	@ (8002e9c <HAL_GPIO_Init+0x300>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d013      	beq.n	8002d94 <HAL_GPIO_Init+0x1f8>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a4c      	ldr	r2, [pc, #304]	@ (8002ea0 <HAL_GPIO_Init+0x304>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d00d      	beq.n	8002d90 <HAL_GPIO_Init+0x1f4>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a4b      	ldr	r2, [pc, #300]	@ (8002ea4 <HAL_GPIO_Init+0x308>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d007      	beq.n	8002d8c <HAL_GPIO_Init+0x1f0>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a4a      	ldr	r2, [pc, #296]	@ (8002ea8 <HAL_GPIO_Init+0x30c>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d101      	bne.n	8002d88 <HAL_GPIO_Init+0x1ec>
 8002d84:	2306      	movs	r3, #6
 8002d86:	e00c      	b.n	8002da2 <HAL_GPIO_Init+0x206>
 8002d88:	2307      	movs	r3, #7
 8002d8a:	e00a      	b.n	8002da2 <HAL_GPIO_Init+0x206>
 8002d8c:	2305      	movs	r3, #5
 8002d8e:	e008      	b.n	8002da2 <HAL_GPIO_Init+0x206>
 8002d90:	2304      	movs	r3, #4
 8002d92:	e006      	b.n	8002da2 <HAL_GPIO_Init+0x206>
 8002d94:	2303      	movs	r3, #3
 8002d96:	e004      	b.n	8002da2 <HAL_GPIO_Init+0x206>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e002      	b.n	8002da2 <HAL_GPIO_Init+0x206>
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e000      	b.n	8002da2 <HAL_GPIO_Init+0x206>
 8002da0:	2300      	movs	r3, #0
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	f002 0203 	and.w	r2, r2, #3
 8002da8:	0092      	lsls	r2, r2, #2
 8002daa:	4093      	lsls	r3, r2
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002db2:	4937      	ldr	r1, [pc, #220]	@ (8002e90 <HAL_GPIO_Init+0x2f4>)
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	089b      	lsrs	r3, r3, #2
 8002db8:	3302      	adds	r3, #2
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dc0:	4b3a      	ldr	r3, [pc, #232]	@ (8002eac <HAL_GPIO_Init+0x310>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002de4:	4a31      	ldr	r2, [pc, #196]	@ (8002eac <HAL_GPIO_Init+0x310>)
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dea:	4b30      	ldr	r3, [pc, #192]	@ (8002eac <HAL_GPIO_Init+0x310>)
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	43db      	mvns	r3, r3
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	4013      	ands	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002e0e:	4a27      	ldr	r2, [pc, #156]	@ (8002eac <HAL_GPIO_Init+0x310>)
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e14:	4b25      	ldr	r3, [pc, #148]	@ (8002eac <HAL_GPIO_Init+0x310>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4013      	ands	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002e38:	4a1c      	ldr	r2, [pc, #112]	@ (8002eac <HAL_GPIO_Init+0x310>)
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002eac <HAL_GPIO_Init+0x310>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	43db      	mvns	r3, r3
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002e62:	4a12      	ldr	r2, [pc, #72]	@ (8002eac <HAL_GPIO_Init+0x310>)
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	fa22 f303 	lsr.w	r3, r2, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f47f ae97 	bne.w	8002bac <HAL_GPIO_Init+0x10>
  }
}
 8002e7e:	bf00      	nop
 8002e80:	bf00      	nop
 8002e82:	371c      	adds	r7, #28
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	40010000 	.word	0x40010000
 8002e94:	48000400 	.word	0x48000400
 8002e98:	48000800 	.word	0x48000800
 8002e9c:	48000c00 	.word	0x48000c00
 8002ea0:	48001000 	.word	0x48001000
 8002ea4:	48001400 	.word	0x48001400
 8002ea8:	48001800 	.word	0x48001800
 8002eac:	40010400 	.word	0x40010400

08002eb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ebc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ec0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ec2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ec6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d102      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	f001 b80a 	b.w	8003eea <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ed6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eda:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 8161 	beq.w	80031ae <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002eec:	4bae      	ldr	r3, [pc, #696]	@ (80031a8 <HAL_RCC_OscConfig+0x2f8>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 030c 	and.w	r3, r3, #12
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d00c      	beq.n	8002f12 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ef8:	4bab      	ldr	r3, [pc, #684]	@ (80031a8 <HAL_RCC_OscConfig+0x2f8>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f003 030c 	and.w	r3, r3, #12
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d157      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x104>
 8002f04:	4ba8      	ldr	r3, [pc, #672]	@ (80031a8 <HAL_RCC_OscConfig+0x2f8>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002f0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f10:	d150      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x104>
 8002f12:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f16:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002f1e:	fa93 f3a3 	rbit	r3, r3
 8002f22:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f26:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f2a:	fab3 f383 	clz	r3, r3
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b3f      	cmp	r3, #63	@ 0x3f
 8002f32:	d802      	bhi.n	8002f3a <HAL_RCC_OscConfig+0x8a>
 8002f34:	4b9c      	ldr	r3, [pc, #624]	@ (80031a8 <HAL_RCC_OscConfig+0x2f8>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	e015      	b.n	8002f66 <HAL_RCC_OscConfig+0xb6>
 8002f3a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f3e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f42:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8002f46:	fa93 f3a3 	rbit	r3, r3
 8002f4a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8002f4e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f52:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002f56:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8002f5a:	fa93 f3a3 	rbit	r3, r3
 8002f5e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002f62:	4b91      	ldr	r3, [pc, #580]	@ (80031a8 <HAL_RCC_OscConfig+0x2f8>)
 8002f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f66:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002f6a:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8002f6e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8002f72:	fa92 f2a2 	rbit	r2, r2
 8002f76:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8002f7a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002f7e:	fab2 f282 	clz	r2, r2
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	f042 0220 	orr.w	r2, r2, #32
 8002f88:	b2d2      	uxtb	r2, r2
 8002f8a:	f002 021f 	and.w	r2, r2, #31
 8002f8e:	2101      	movs	r1, #1
 8002f90:	fa01 f202 	lsl.w	r2, r1, r2
 8002f94:	4013      	ands	r3, r2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 8108 	beq.w	80031ac <HAL_RCC_OscConfig+0x2fc>
 8002f9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fa0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f040 80ff 	bne.w	80031ac <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	f000 bf9b 	b.w	8003eea <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fb8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fc4:	d106      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x124>
 8002fc6:	4b78      	ldr	r3, [pc, #480]	@ (80031a8 <HAL_RCC_OscConfig+0x2f8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a77      	ldr	r2, [pc, #476]	@ (80031a8 <HAL_RCC_OscConfig+0x2f8>)
 8002fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fd0:	6013      	str	r3, [r2, #0]
 8002fd2:	e036      	b.n	8003042 <HAL_RCC_OscConfig+0x192>
 8002fd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fd8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10c      	bne.n	8002ffe <HAL_RCC_OscConfig+0x14e>
 8002fe4:	4b70      	ldr	r3, [pc, #448]	@ (80031a8 <HAL_RCC_OscConfig+0x2f8>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a6f      	ldr	r2, [pc, #444]	@ (80031a8 <HAL_RCC_OscConfig+0x2f8>)
 8002fea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fee:	6013      	str	r3, [r2, #0]
 8002ff0:	4b6d      	ldr	r3, [pc, #436]	@ (80031a8 <HAL_RCC_OscConfig+0x2f8>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a6c      	ldr	r2, [pc, #432]	@ (80031a8 <HAL_RCC_OscConfig+0x2f8>)
 8002ff6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ffa:	6013      	str	r3, [r2, #0]
 8002ffc:	e021      	b.n	8003042 <HAL_RCC_OscConfig+0x192>
 8002ffe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003002:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800300e:	d10c      	bne.n	800302a <HAL_RCC_OscConfig+0x17a>
 8003010:	4b65      	ldr	r3, [pc, #404]	@ (80031a8 <HAL_RCC_OscConfig+0x2f8>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a64      	ldr	r2, [pc, #400]	@ (80031a8 <HAL_RCC_OscConfig+0x2f8>)
 8003016:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800301a:	6013      	str	r3, [r2, #0]
 800301c:	4b62      	ldr	r3, [pc, #392]	@ (80031a8 <HAL_RCC_OscConfig+0x2f8>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a61      	ldr	r2, [pc, #388]	@ (80031a8 <HAL_RCC_OscConfig+0x2f8>)
 8003022:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003026:	6013      	str	r3, [r2, #0]
 8003028:	e00b      	b.n	8003042 <HAL_RCC_OscConfig+0x192>
 800302a:	4b5f      	ldr	r3, [pc, #380]	@ (80031a8 <HAL_RCC_OscConfig+0x2f8>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a5e      	ldr	r2, [pc, #376]	@ (80031a8 <HAL_RCC_OscConfig+0x2f8>)
 8003030:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003034:	6013      	str	r3, [r2, #0]
 8003036:	4b5c      	ldr	r3, [pc, #368]	@ (80031a8 <HAL_RCC_OscConfig+0x2f8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a5b      	ldr	r2, [pc, #364]	@ (80031a8 <HAL_RCC_OscConfig+0x2f8>)
 800303c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003040:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003042:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003046:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d054      	beq.n	80030fc <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003052:	f7fe fa79 	bl	8001548 <HAL_GetTick>
 8003056:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800305a:	e00a      	b.n	8003072 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800305c:	f7fe fa74 	bl	8001548 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b64      	cmp	r3, #100	@ 0x64
 800306a:	d902      	bls.n	8003072 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	f000 bf3c 	b.w	8003eea <HAL_RCC_OscConfig+0x103a>
 8003072:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003076:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800307e:	fa93 f3a3 	rbit	r3, r3
 8003082:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8003086:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800308a:	fab3 f383 	clz	r3, r3
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b3f      	cmp	r3, #63	@ 0x3f
 8003092:	d802      	bhi.n	800309a <HAL_RCC_OscConfig+0x1ea>
 8003094:	4b44      	ldr	r3, [pc, #272]	@ (80031a8 <HAL_RCC_OscConfig+0x2f8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	e015      	b.n	80030c6 <HAL_RCC_OscConfig+0x216>
 800309a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800309e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80030a6:	fa93 f3a3 	rbit	r3, r3
 80030aa:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80030ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030b2:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80030b6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80030ba:	fa93 f3a3 	rbit	r3, r3
 80030be:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80030c2:	4b39      	ldr	r3, [pc, #228]	@ (80031a8 <HAL_RCC_OscConfig+0x2f8>)
 80030c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80030ca:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80030ce:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80030d2:	fa92 f2a2 	rbit	r2, r2
 80030d6:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80030da:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80030de:	fab2 f282 	clz	r2, r2
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	f042 0220 	orr.w	r2, r2, #32
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	f002 021f 	and.w	r2, r2, #31
 80030ee:	2101      	movs	r1, #1
 80030f0:	fa01 f202 	lsl.w	r2, r1, r2
 80030f4:	4013      	ands	r3, r2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0b0      	beq.n	800305c <HAL_RCC_OscConfig+0x1ac>
 80030fa:	e058      	b.n	80031ae <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fc:	f7fe fa24 	bl	8001548 <HAL_GetTick>
 8003100:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003104:	e00a      	b.n	800311c <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003106:	f7fe fa1f 	bl	8001548 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b64      	cmp	r3, #100	@ 0x64
 8003114:	d902      	bls.n	800311c <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	f000 bee7 	b.w	8003eea <HAL_RCC_OscConfig+0x103a>
 800311c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003120:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003124:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003128:	fa93 f3a3 	rbit	r3, r3
 800312c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8003130:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003134:	fab3 f383 	clz	r3, r3
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b3f      	cmp	r3, #63	@ 0x3f
 800313c:	d802      	bhi.n	8003144 <HAL_RCC_OscConfig+0x294>
 800313e:	4b1a      	ldr	r3, [pc, #104]	@ (80031a8 <HAL_RCC_OscConfig+0x2f8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	e015      	b.n	8003170 <HAL_RCC_OscConfig+0x2c0>
 8003144:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003148:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003150:	fa93 f3a3 	rbit	r3, r3
 8003154:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003158:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800315c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003160:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003164:	fa93 f3a3 	rbit	r3, r3
 8003168:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800316c:	4b0e      	ldr	r3, [pc, #56]	@ (80031a8 <HAL_RCC_OscConfig+0x2f8>)
 800316e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003170:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003174:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8003178:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800317c:	fa92 f2a2 	rbit	r2, r2
 8003180:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8003184:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003188:	fab2 f282 	clz	r2, r2
 800318c:	b2d2      	uxtb	r2, r2
 800318e:	f042 0220 	orr.w	r2, r2, #32
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	f002 021f 	and.w	r2, r2, #31
 8003198:	2101      	movs	r1, #1
 800319a:	fa01 f202 	lsl.w	r2, r1, r2
 800319e:	4013      	ands	r3, r2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1b0      	bne.n	8003106 <HAL_RCC_OscConfig+0x256>
 80031a4:	e003      	b.n	80031ae <HAL_RCC_OscConfig+0x2fe>
 80031a6:	bf00      	nop
 80031a8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 816d 	beq.w	800349e <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80031c4:	4bcd      	ldr	r3, [pc, #820]	@ (80034fc <HAL_RCC_OscConfig+0x64c>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f003 030c 	and.w	r3, r3, #12
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00c      	beq.n	80031ea <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80031d0:	4bca      	ldr	r3, [pc, #808]	@ (80034fc <HAL_RCC_OscConfig+0x64c>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 030c 	and.w	r3, r3, #12
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d16e      	bne.n	80032ba <HAL_RCC_OscConfig+0x40a>
 80031dc:	4bc7      	ldr	r3, [pc, #796]	@ (80034fc <HAL_RCC_OscConfig+0x64c>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80031e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031e8:	d167      	bne.n	80032ba <HAL_RCC_OscConfig+0x40a>
 80031ea:	2302      	movs	r3, #2
 80031ec:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80031f4:	fa93 f3a3 	rbit	r3, r3
 80031f8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80031fc:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003200:	fab3 f383 	clz	r3, r3
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b3f      	cmp	r3, #63	@ 0x3f
 8003208:	d802      	bhi.n	8003210 <HAL_RCC_OscConfig+0x360>
 800320a:	4bbc      	ldr	r3, [pc, #752]	@ (80034fc <HAL_RCC_OscConfig+0x64c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	e013      	b.n	8003238 <HAL_RCC_OscConfig+0x388>
 8003210:	2302      	movs	r3, #2
 8003212:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003216:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800321a:	fa93 f3a3 	rbit	r3, r3
 800321e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8003222:	2302      	movs	r3, #2
 8003224:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003228:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800322c:	fa93 f3a3 	rbit	r3, r3
 8003230:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003234:	4bb1      	ldr	r3, [pc, #708]	@ (80034fc <HAL_RCC_OscConfig+0x64c>)
 8003236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003238:	2202      	movs	r2, #2
 800323a:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800323e:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8003242:	fa92 f2a2 	rbit	r2, r2
 8003246:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 800324a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800324e:	fab2 f282 	clz	r2, r2
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	f042 0220 	orr.w	r2, r2, #32
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	f002 021f 	and.w	r2, r2, #31
 800325e:	2101      	movs	r1, #1
 8003260:	fa01 f202 	lsl.w	r2, r1, r2
 8003264:	4013      	ands	r3, r2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00a      	beq.n	8003280 <HAL_RCC_OscConfig+0x3d0>
 800326a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800326e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d002      	beq.n	8003280 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	f000 be35 	b.w	8003eea <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003280:	4b9e      	ldr	r3, [pc, #632]	@ (80034fc <HAL_RCC_OscConfig+0x64c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003288:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800328c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	21f8      	movs	r1, #248	@ 0xf8
 8003296:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329a:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 800329e:	fa91 f1a1 	rbit	r1, r1
 80032a2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80032a6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80032aa:	fab1 f181 	clz	r1, r1
 80032ae:	b2c9      	uxtb	r1, r1
 80032b0:	408b      	lsls	r3, r1
 80032b2:	4992      	ldr	r1, [pc, #584]	@ (80034fc <HAL_RCC_OscConfig+0x64c>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032b8:	e0f1      	b.n	800349e <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032be:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 8083 	beq.w	80033d2 <HAL_RCC_OscConfig+0x522>
 80032cc:	2301      	movs	r3, #1
 80032ce:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d2:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80032d6:	fa93 f3a3 	rbit	r3, r3
 80032da:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80032de:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032e2:	fab3 f383 	clz	r3, r3
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80032ec:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	461a      	mov	r2, r3
 80032f4:	2301      	movs	r3, #1
 80032f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f8:	f7fe f926 	bl	8001548 <HAL_GetTick>
 80032fc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003300:	e00a      	b.n	8003318 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003302:	f7fe f921 	bl	8001548 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d902      	bls.n	8003318 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	f000 bde9 	b.w	8003eea <HAL_RCC_OscConfig+0x103a>
 8003318:	2302      	movs	r3, #2
 800331a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8003322:	fa93 f3a3 	rbit	r3, r3
 8003326:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 800332a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332e:	fab3 f383 	clz	r3, r3
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b3f      	cmp	r3, #63	@ 0x3f
 8003336:	d802      	bhi.n	800333e <HAL_RCC_OscConfig+0x48e>
 8003338:	4b70      	ldr	r3, [pc, #448]	@ (80034fc <HAL_RCC_OscConfig+0x64c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	e013      	b.n	8003366 <HAL_RCC_OscConfig+0x4b6>
 800333e:	2302      	movs	r3, #2
 8003340:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003344:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003348:	fa93 f3a3 	rbit	r3, r3
 800334c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003350:	2302      	movs	r3, #2
 8003352:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003356:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800335a:	fa93 f3a3 	rbit	r3, r3
 800335e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003362:	4b66      	ldr	r3, [pc, #408]	@ (80034fc <HAL_RCC_OscConfig+0x64c>)
 8003364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003366:	2202      	movs	r2, #2
 8003368:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800336c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8003370:	fa92 f2a2 	rbit	r2, r2
 8003374:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8003378:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800337c:	fab2 f282 	clz	r2, r2
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	f042 0220 	orr.w	r2, r2, #32
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	f002 021f 	and.w	r2, r2, #31
 800338c:	2101      	movs	r1, #1
 800338e:	fa01 f202 	lsl.w	r2, r1, r2
 8003392:	4013      	ands	r3, r2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0b4      	beq.n	8003302 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003398:	4b58      	ldr	r3, [pc, #352]	@ (80034fc <HAL_RCC_OscConfig+0x64c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	21f8      	movs	r1, #248	@ 0xf8
 80033ae:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b2:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80033b6:	fa91 f1a1 	rbit	r1, r1
 80033ba:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80033be:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80033c2:	fab1 f181 	clz	r1, r1
 80033c6:	b2c9      	uxtb	r1, r1
 80033c8:	408b      	lsls	r3, r1
 80033ca:	494c      	ldr	r1, [pc, #304]	@ (80034fc <HAL_RCC_OscConfig+0x64c>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	600b      	str	r3, [r1, #0]
 80033d0:	e065      	b.n	800349e <HAL_RCC_OscConfig+0x5ee>
 80033d2:	2301      	movs	r3, #1
 80033d4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80033dc:	fa93 f3a3 	rbit	r3, r3
 80033e0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80033e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033e8:	fab3 f383 	clz	r3, r3
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80033f2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	461a      	mov	r2, r3
 80033fa:	2300      	movs	r3, #0
 80033fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fe:	f7fe f8a3 	bl	8001548 <HAL_GetTick>
 8003402:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003406:	e00a      	b.n	800341e <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003408:	f7fe f89e 	bl	8001548 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d902      	bls.n	800341e <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	f000 bd66 	b.w	8003eea <HAL_RCC_OscConfig+0x103a>
 800341e:	2302      	movs	r3, #2
 8003420:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003424:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003428:	fa93 f3a3 	rbit	r3, r3
 800342c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8003430:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003434:	fab3 f383 	clz	r3, r3
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b3f      	cmp	r3, #63	@ 0x3f
 800343c:	d802      	bhi.n	8003444 <HAL_RCC_OscConfig+0x594>
 800343e:	4b2f      	ldr	r3, [pc, #188]	@ (80034fc <HAL_RCC_OscConfig+0x64c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	e013      	b.n	800346c <HAL_RCC_OscConfig+0x5bc>
 8003444:	2302      	movs	r3, #2
 8003446:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800344e:	fa93 f3a3 	rbit	r3, r3
 8003452:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003456:	2302      	movs	r3, #2
 8003458:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800345c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003460:	fa93 f3a3 	rbit	r3, r3
 8003464:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003468:	4b24      	ldr	r3, [pc, #144]	@ (80034fc <HAL_RCC_OscConfig+0x64c>)
 800346a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346c:	2202      	movs	r2, #2
 800346e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8003472:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8003476:	fa92 f2a2 	rbit	r2, r2
 800347a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800347e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003482:	fab2 f282 	clz	r2, r2
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	f042 0220 	orr.w	r2, r2, #32
 800348c:	b2d2      	uxtb	r2, r2
 800348e:	f002 021f 	and.w	r2, r2, #31
 8003492:	2101      	movs	r1, #1
 8003494:	fa01 f202 	lsl.w	r2, r1, r2
 8003498:	4013      	ands	r3, r2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1b4      	bne.n	8003408 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800349e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034a2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 8119 	beq.w	80036e6 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034b8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 8082 	beq.w	80035ca <HAL_RCC_OscConfig+0x71a>
 80034c6:	2301      	movs	r3, #1
 80034c8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034d0:	fa93 f3a3 	rbit	r3, r3
 80034d4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80034d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034dc:	fab3 f383 	clz	r3, r3
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	461a      	mov	r2, r3
 80034e4:	4b06      	ldr	r3, [pc, #24]	@ (8003500 <HAL_RCC_OscConfig+0x650>)
 80034e6:	4413      	add	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	461a      	mov	r2, r3
 80034ec:	2301      	movs	r3, #1
 80034ee:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f0:	f7fe f82a 	bl	8001548 <HAL_GetTick>
 80034f4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f8:	e00f      	b.n	800351a <HAL_RCC_OscConfig+0x66a>
 80034fa:	bf00      	nop
 80034fc:	40021000 	.word	0x40021000
 8003500:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003504:	f7fe f820 	bl	8001548 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d902      	bls.n	800351a <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	f000 bce8 	b.w	8003eea <HAL_RCC_OscConfig+0x103a>
 800351a:	2302      	movs	r3, #2
 800351c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003520:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003524:	fa93 f2a3 	rbit	r2, r3
 8003528:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800352c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003536:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800353a:	2202      	movs	r2, #2
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003542:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	fa93 f2a3 	rbit	r2, r3
 800354c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003550:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800355a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800355e:	2202      	movs	r2, #2
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003566:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	fa93 f2a3 	rbit	r2, r3
 8003570:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003574:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003578:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800357a:	4bb0      	ldr	r3, [pc, #704]	@ (800383c <HAL_RCC_OscConfig+0x98c>)
 800357c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800357e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003582:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003586:	2102      	movs	r1, #2
 8003588:	6019      	str	r1, [r3, #0]
 800358a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800358e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	fa93 f1a3 	rbit	r1, r3
 8003598:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800359c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80035a0:	6019      	str	r1, [r3, #0]
  return result;
 80035a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035a6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	fab3 f383 	clz	r3, r3
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	f003 031f 	and.w	r3, r3, #31
 80035bc:	2101      	movs	r1, #1
 80035be:	fa01 f303 	lsl.w	r3, r1, r3
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d09d      	beq.n	8003504 <HAL_RCC_OscConfig+0x654>
 80035c8:	e08d      	b.n	80036e6 <HAL_RCC_OscConfig+0x836>
 80035ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035ce:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80035d2:	2201      	movs	r2, #1
 80035d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035da:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	fa93 f2a3 	rbit	r2, r3
 80035e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035e8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80035ec:	601a      	str	r2, [r3, #0]
  return result;
 80035ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035f2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80035f6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035f8:	fab3 f383 	clz	r3, r3
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	461a      	mov	r2, r3
 8003600:	4b8f      	ldr	r3, [pc, #572]	@ (8003840 <HAL_RCC_OscConfig+0x990>)
 8003602:	4413      	add	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	461a      	mov	r2, r3
 8003608:	2300      	movs	r3, #0
 800360a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800360c:	f7fd ff9c 	bl	8001548 <HAL_GetTick>
 8003610:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003614:	e00a      	b.n	800362c <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003616:	f7fd ff97 	bl	8001548 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d902      	bls.n	800362c <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	f000 bc5f 	b.w	8003eea <HAL_RCC_OscConfig+0x103a>
 800362c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003630:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003634:	2202      	movs	r2, #2
 8003636:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003638:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800363c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	fa93 f2a3 	rbit	r2, r3
 8003646:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800364a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003654:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003658:	2202      	movs	r2, #2
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003660:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	fa93 f2a3 	rbit	r2, r3
 800366a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800366e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003678:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800367c:	2202      	movs	r2, #2
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003684:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	fa93 f2a3 	rbit	r2, r3
 800368e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003692:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003696:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003698:	4b68      	ldr	r3, [pc, #416]	@ (800383c <HAL_RCC_OscConfig+0x98c>)
 800369a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800369c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036a0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80036a4:	2102      	movs	r1, #2
 80036a6:	6019      	str	r1, [r3, #0]
 80036a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036ac:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	fa93 f1a3 	rbit	r1, r3
 80036b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036ba:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80036be:	6019      	str	r1, [r3, #0]
  return result;
 80036c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036c4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	fab3 f383 	clz	r3, r3
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	f003 031f 	and.w	r3, r3, #31
 80036da:	2101      	movs	r1, #1
 80036dc:	fa01 f303 	lsl.w	r3, r1, r3
 80036e0:	4013      	ands	r3, r2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d197      	bne.n	8003616 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036ea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0304 	and.w	r3, r3, #4
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 819c 	beq.w	8003a34 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036fc:	2300      	movs	r3, #0
 80036fe:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003702:	4b4e      	ldr	r3, [pc, #312]	@ (800383c <HAL_RCC_OscConfig+0x98c>)
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d116      	bne.n	800373c <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800370e:	4b4b      	ldr	r3, [pc, #300]	@ (800383c <HAL_RCC_OscConfig+0x98c>)
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	4a4a      	ldr	r2, [pc, #296]	@ (800383c <HAL_RCC_OscConfig+0x98c>)
 8003714:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003718:	61d3      	str	r3, [r2, #28]
 800371a:	4b48      	ldr	r3, [pc, #288]	@ (800383c <HAL_RCC_OscConfig+0x98c>)
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003722:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003726:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003730:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003734:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003736:	2301      	movs	r3, #1
 8003738:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373c:	4b41      	ldr	r3, [pc, #260]	@ (8003844 <HAL_RCC_OscConfig+0x994>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003744:	2b00      	cmp	r3, #0
 8003746:	d11a      	bne.n	800377e <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003748:	4b3e      	ldr	r3, [pc, #248]	@ (8003844 <HAL_RCC_OscConfig+0x994>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a3d      	ldr	r2, [pc, #244]	@ (8003844 <HAL_RCC_OscConfig+0x994>)
 800374e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003752:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003754:	f7fd fef8 	bl	8001548 <HAL_GetTick>
 8003758:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375c:	e009      	b.n	8003772 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800375e:	f7fd fef3 	bl	8001548 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b64      	cmp	r3, #100	@ 0x64
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e3bb      	b.n	8003eea <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003772:	4b34      	ldr	r3, [pc, #208]	@ (8003844 <HAL_RCC_OscConfig+0x994>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0ef      	beq.n	800375e <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800377e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003782:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d106      	bne.n	800379c <HAL_RCC_OscConfig+0x8ec>
 800378e:	4b2b      	ldr	r3, [pc, #172]	@ (800383c <HAL_RCC_OscConfig+0x98c>)
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	4a2a      	ldr	r2, [pc, #168]	@ (800383c <HAL_RCC_OscConfig+0x98c>)
 8003794:	f043 0301 	orr.w	r3, r3, #1
 8003798:	6213      	str	r3, [r2, #32]
 800379a:	e035      	b.n	8003808 <HAL_RCC_OscConfig+0x958>
 800379c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10c      	bne.n	80037c6 <HAL_RCC_OscConfig+0x916>
 80037ac:	4b23      	ldr	r3, [pc, #140]	@ (800383c <HAL_RCC_OscConfig+0x98c>)
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	4a22      	ldr	r2, [pc, #136]	@ (800383c <HAL_RCC_OscConfig+0x98c>)
 80037b2:	f023 0301 	bic.w	r3, r3, #1
 80037b6:	6213      	str	r3, [r2, #32]
 80037b8:	4b20      	ldr	r3, [pc, #128]	@ (800383c <HAL_RCC_OscConfig+0x98c>)
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	4a1f      	ldr	r2, [pc, #124]	@ (800383c <HAL_RCC_OscConfig+0x98c>)
 80037be:	f023 0304 	bic.w	r3, r3, #4
 80037c2:	6213      	str	r3, [r2, #32]
 80037c4:	e020      	b.n	8003808 <HAL_RCC_OscConfig+0x958>
 80037c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2b05      	cmp	r3, #5
 80037d4:	d10c      	bne.n	80037f0 <HAL_RCC_OscConfig+0x940>
 80037d6:	4b19      	ldr	r3, [pc, #100]	@ (800383c <HAL_RCC_OscConfig+0x98c>)
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	4a18      	ldr	r2, [pc, #96]	@ (800383c <HAL_RCC_OscConfig+0x98c>)
 80037dc:	f043 0304 	orr.w	r3, r3, #4
 80037e0:	6213      	str	r3, [r2, #32]
 80037e2:	4b16      	ldr	r3, [pc, #88]	@ (800383c <HAL_RCC_OscConfig+0x98c>)
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	4a15      	ldr	r2, [pc, #84]	@ (800383c <HAL_RCC_OscConfig+0x98c>)
 80037e8:	f043 0301 	orr.w	r3, r3, #1
 80037ec:	6213      	str	r3, [r2, #32]
 80037ee:	e00b      	b.n	8003808 <HAL_RCC_OscConfig+0x958>
 80037f0:	4b12      	ldr	r3, [pc, #72]	@ (800383c <HAL_RCC_OscConfig+0x98c>)
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	4a11      	ldr	r2, [pc, #68]	@ (800383c <HAL_RCC_OscConfig+0x98c>)
 80037f6:	f023 0301 	bic.w	r3, r3, #1
 80037fa:	6213      	str	r3, [r2, #32]
 80037fc:	4b0f      	ldr	r3, [pc, #60]	@ (800383c <HAL_RCC_OscConfig+0x98c>)
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	4a0e      	ldr	r2, [pc, #56]	@ (800383c <HAL_RCC_OscConfig+0x98c>)
 8003802:	f023 0304 	bic.w	r3, r3, #4
 8003806:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003808:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800380c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 8085 	beq.w	8003924 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800381a:	f7fd fe95 	bl	8001548 <HAL_GetTick>
 800381e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003822:	e011      	b.n	8003848 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003824:	f7fd fe90 	bl	8001548 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003834:	4293      	cmp	r3, r2
 8003836:	d907      	bls.n	8003848 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e356      	b.n	8003eea <HAL_RCC_OscConfig+0x103a>
 800383c:	40021000 	.word	0x40021000
 8003840:	10908120 	.word	0x10908120
 8003844:	40007000 	.word	0x40007000
 8003848:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800384c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003850:	2202      	movs	r2, #2
 8003852:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003854:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003858:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	fa93 f2a3 	rbit	r2, r3
 8003862:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003866:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003870:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003874:	2202      	movs	r2, #2
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800387c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	fa93 f2a3 	rbit	r2, r3
 8003886:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800388a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800388e:	601a      	str	r2, [r3, #0]
  return result;
 8003890:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003894:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003898:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800389a:	fab3 f383 	clz	r3, r3
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d102      	bne.n	80038b0 <HAL_RCC_OscConfig+0xa00>
 80038aa:	4b98      	ldr	r3, [pc, #608]	@ (8003b0c <HAL_RCC_OscConfig+0xc5c>)
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	e013      	b.n	80038d8 <HAL_RCC_OscConfig+0xa28>
 80038b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038b4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80038b8:	2202      	movs	r2, #2
 80038ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038c0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	fa93 f2a3 	rbit	r2, r3
 80038ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038ce:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	4b8d      	ldr	r3, [pc, #564]	@ (8003b0c <HAL_RCC_OscConfig+0xc5c>)
 80038d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80038dc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80038e0:	2102      	movs	r1, #2
 80038e2:	6011      	str	r1, [r2, #0]
 80038e4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80038e8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80038ec:	6812      	ldr	r2, [r2, #0]
 80038ee:	fa92 f1a2 	rbit	r1, r2
 80038f2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80038f6:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80038fa:	6011      	str	r1, [r2, #0]
  return result;
 80038fc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003900:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003904:	6812      	ldr	r2, [r2, #0]
 8003906:	fab2 f282 	clz	r2, r2
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003910:	b2d2      	uxtb	r2, r2
 8003912:	f002 021f 	and.w	r2, r2, #31
 8003916:	2101      	movs	r1, #1
 8003918:	fa01 f202 	lsl.w	r2, r1, r2
 800391c:	4013      	ands	r3, r2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d080      	beq.n	8003824 <HAL_RCC_OscConfig+0x974>
 8003922:	e07d      	b.n	8003a20 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003924:	f7fd fe10 	bl	8001548 <HAL_GetTick>
 8003928:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800392c:	e00b      	b.n	8003946 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800392e:	f7fd fe0b 	bl	8001548 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e2d1      	b.n	8003eea <HAL_RCC_OscConfig+0x103a>
 8003946:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800394a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800394e:	2202      	movs	r2, #2
 8003950:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003952:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003956:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	fa93 f2a3 	rbit	r2, r3
 8003960:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003964:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800396e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003972:	2202      	movs	r2, #2
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800397a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	fa93 f2a3 	rbit	r2, r3
 8003984:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003988:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800398c:	601a      	str	r2, [r3, #0]
  return result;
 800398e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003992:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003996:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003998:	fab3 f383 	clz	r3, r3
 800399c:	b2db      	uxtb	r3, r3
 800399e:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d102      	bne.n	80039ae <HAL_RCC_OscConfig+0xafe>
 80039a8:	4b58      	ldr	r3, [pc, #352]	@ (8003b0c <HAL_RCC_OscConfig+0xc5c>)
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	e013      	b.n	80039d6 <HAL_RCC_OscConfig+0xb26>
 80039ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039b2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80039b6:	2202      	movs	r2, #2
 80039b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039be:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	fa93 f2a3 	rbit	r2, r3
 80039c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039cc:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	4b4e      	ldr	r3, [pc, #312]	@ (8003b0c <HAL_RCC_OscConfig+0xc5c>)
 80039d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80039da:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80039de:	2102      	movs	r1, #2
 80039e0:	6011      	str	r1, [r2, #0]
 80039e2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80039e6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80039ea:	6812      	ldr	r2, [r2, #0]
 80039ec:	fa92 f1a2 	rbit	r1, r2
 80039f0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80039f4:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80039f8:	6011      	str	r1, [r2, #0]
  return result;
 80039fa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80039fe:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003a02:	6812      	ldr	r2, [r2, #0]
 8003a04:	fab2 f282 	clz	r2, r2
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	f002 021f 	and.w	r2, r2, #31
 8003a14:	2101      	movs	r1, #1
 8003a16:	fa01 f202 	lsl.w	r2, r1, r2
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d186      	bne.n	800392e <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a20:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d105      	bne.n	8003a34 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a28:	4b38      	ldr	r3, [pc, #224]	@ (8003b0c <HAL_RCC_OscConfig+0xc5c>)
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	4a37      	ldr	r2, [pc, #220]	@ (8003b0c <HAL_RCC_OscConfig+0xc5c>)
 8003a2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a32:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a38:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 8251 	beq.w	8003ee8 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a46:	4b31      	ldr	r3, [pc, #196]	@ (8003b0c <HAL_RCC_OscConfig+0xc5c>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f003 030c 	and.w	r3, r3, #12
 8003a4e:	2b08      	cmp	r3, #8
 8003a50:	f000 820f 	beq.w	8003e72 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a58:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	f040 8165 	bne.w	8003d30 <HAL_RCC_OscConfig+0xe80>
 8003a66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a6a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003a6e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a78:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	fa93 f2a3 	rbit	r2, r3
 8003a82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a86:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003a8a:	601a      	str	r2, [r3, #0]
  return result;
 8003a8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a90:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003a94:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a96:	fab3 f383 	clz	r3, r3
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003aa0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aac:	f7fd fd4c 	bl	8001548 <HAL_GetTick>
 8003ab0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ab4:	e009      	b.n	8003aca <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ab6:	f7fd fd47 	bl	8001548 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e20f      	b.n	8003eea <HAL_RCC_OscConfig+0x103a>
 8003aca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ace:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003ad2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ad6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003adc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	fa93 f2a3 	rbit	r2, r3
 8003ae6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003aea:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003aee:	601a      	str	r2, [r3, #0]
  return result;
 8003af0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003af4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003af8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003afa:	fab3 f383 	clz	r3, r3
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b3f      	cmp	r3, #63	@ 0x3f
 8003b02:	d805      	bhi.n	8003b10 <HAL_RCC_OscConfig+0xc60>
 8003b04:	4b01      	ldr	r3, [pc, #4]	@ (8003b0c <HAL_RCC_OscConfig+0xc5c>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	e02a      	b.n	8003b60 <HAL_RCC_OscConfig+0xcb0>
 8003b0a:	bf00      	nop
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b14:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003b18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b22:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	fa93 f2a3 	rbit	r2, r3
 8003b2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b30:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b3a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003b3e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b48:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	fa93 f2a3 	rbit	r2, r3
 8003b52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b56:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	4bca      	ldr	r3, [pc, #808]	@ (8003e88 <HAL_RCC_OscConfig+0xfd8>)
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b60:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b64:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003b68:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003b6c:	6011      	str	r1, [r2, #0]
 8003b6e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b72:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003b76:	6812      	ldr	r2, [r2, #0]
 8003b78:	fa92 f1a2 	rbit	r1, r2
 8003b7c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b80:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003b84:	6011      	str	r1, [r2, #0]
  return result;
 8003b86:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b8a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003b8e:	6812      	ldr	r2, [r2, #0]
 8003b90:	fab2 f282 	clz	r2, r2
 8003b94:	b2d2      	uxtb	r2, r2
 8003b96:	f042 0220 	orr.w	r2, r2, #32
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	f002 021f 	and.w	r2, r2, #31
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d184      	bne.n	8003ab6 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bac:	4bb6      	ldr	r3, [pc, #728]	@ (8003e88 <HAL_RCC_OscConfig+0xfd8>)
 8003bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb0:	f023 020f 	bic.w	r2, r3, #15
 8003bb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bb8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc0:	49b1      	ldr	r1, [pc, #708]	@ (8003e88 <HAL_RCC_OscConfig+0xfd8>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8003bc6:	4bb0      	ldr	r3, [pc, #704]	@ (8003e88 <HAL_RCC_OscConfig+0xfd8>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8003bce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bd2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6a19      	ldr	r1, [r3, #32]
 8003bda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bde:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	430b      	orrs	r3, r1
 8003be8:	49a7      	ldr	r1, [pc, #668]	@ (8003e88 <HAL_RCC_OscConfig+0xfd8>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	604b      	str	r3, [r1, #4]
 8003bee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bf2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003bf6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003bfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c00:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	fa93 f2a3 	rbit	r2, r3
 8003c0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c0e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003c12:	601a      	str	r2, [r3, #0]
  return result;
 8003c14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c18:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003c1c:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c1e:	fab3 f383 	clz	r3, r3
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003c28:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	461a      	mov	r2, r3
 8003c30:	2301      	movs	r3, #1
 8003c32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c34:	f7fd fc88 	bl	8001548 <HAL_GetTick>
 8003c38:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c3c:	e009      	b.n	8003c52 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c3e:	f7fd fc83 	bl	8001548 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e14b      	b.n	8003eea <HAL_RCC_OscConfig+0x103a>
 8003c52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c56:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003c5a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c64:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	fa93 f2a3 	rbit	r2, r3
 8003c6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c72:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003c76:	601a      	str	r2, [r3, #0]
  return result;
 8003c78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c7c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003c80:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c82:	fab3 f383 	clz	r3, r3
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b3f      	cmp	r3, #63	@ 0x3f
 8003c8a:	d802      	bhi.n	8003c92 <HAL_RCC_OscConfig+0xde2>
 8003c8c:	4b7e      	ldr	r3, [pc, #504]	@ (8003e88 <HAL_RCC_OscConfig+0xfd8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	e027      	b.n	8003ce2 <HAL_RCC_OscConfig+0xe32>
 8003c92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c96:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003c9a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ca4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	fa93 f2a3 	rbit	r2, r3
 8003cae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cb2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cbc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003cc0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cca:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	fa93 f2a3 	rbit	r2, r3
 8003cd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cd8:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	4b6a      	ldr	r3, [pc, #424]	@ (8003e88 <HAL_RCC_OscConfig+0xfd8>)
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003ce6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003cea:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003cee:	6011      	str	r1, [r2, #0]
 8003cf0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003cf4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003cf8:	6812      	ldr	r2, [r2, #0]
 8003cfa:	fa92 f1a2 	rbit	r1, r2
 8003cfe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003d02:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003d06:	6011      	str	r1, [r2, #0]
  return result;
 8003d08:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003d0c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003d10:	6812      	ldr	r2, [r2, #0]
 8003d12:	fab2 f282 	clz	r2, r2
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	f042 0220 	orr.w	r2, r2, #32
 8003d1c:	b2d2      	uxtb	r2, r2
 8003d1e:	f002 021f 	and.w	r2, r2, #31
 8003d22:	2101      	movs	r1, #1
 8003d24:	fa01 f202 	lsl.w	r2, r1, r2
 8003d28:	4013      	ands	r3, r2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d087      	beq.n	8003c3e <HAL_RCC_OscConfig+0xd8e>
 8003d2e:	e0db      	b.n	8003ee8 <HAL_RCC_OscConfig+0x1038>
 8003d30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d34:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003d38:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003d3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d42:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	fa93 f2a3 	rbit	r2, r3
 8003d4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d50:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003d54:	601a      	str	r2, [r3, #0]
  return result;
 8003d56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d5a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003d5e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d60:	fab3 f383 	clz	r3, r3
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003d6a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	461a      	mov	r2, r3
 8003d72:	2300      	movs	r3, #0
 8003d74:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d76:	f7fd fbe7 	bl	8001548 <HAL_GetTick>
 8003d7a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d7e:	e009      	b.n	8003d94 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d80:	f7fd fbe2 	bl	8001548 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e0aa      	b.n	8003eea <HAL_RCC_OscConfig+0x103a>
 8003d94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d98:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003d9c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003da0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003da6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	fa93 f2a3 	rbit	r2, r3
 8003db0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003db4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003db8:	601a      	str	r2, [r3, #0]
  return result;
 8003dba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003dbe:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003dc2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dc4:	fab3 f383 	clz	r3, r3
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b3f      	cmp	r3, #63	@ 0x3f
 8003dcc:	d802      	bhi.n	8003dd4 <HAL_RCC_OscConfig+0xf24>
 8003dce:	4b2e      	ldr	r3, [pc, #184]	@ (8003e88 <HAL_RCC_OscConfig+0xfd8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	e027      	b.n	8003e24 <HAL_RCC_OscConfig+0xf74>
 8003dd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003dd8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003ddc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003de0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003de6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	fa93 f2a3 	rbit	r2, r3
 8003df0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003df4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003dfe:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003e02:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e0c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	fa93 f2a3 	rbit	r2, r3
 8003e16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e1a:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	4b19      	ldr	r3, [pc, #100]	@ (8003e88 <HAL_RCC_OscConfig+0xfd8>)
 8003e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e24:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003e28:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003e2c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003e30:	6011      	str	r1, [r2, #0]
 8003e32:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003e36:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003e3a:	6812      	ldr	r2, [r2, #0]
 8003e3c:	fa92 f1a2 	rbit	r1, r2
 8003e40:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003e44:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003e48:	6011      	str	r1, [r2, #0]
  return result;
 8003e4a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003e4e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003e52:	6812      	ldr	r2, [r2, #0]
 8003e54:	fab2 f282 	clz	r2, r2
 8003e58:	b2d2      	uxtb	r2, r2
 8003e5a:	f042 0220 	orr.w	r2, r2, #32
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	f002 021f 	and.w	r2, r2, #31
 8003e64:	2101      	movs	r1, #1
 8003e66:	fa01 f202 	lsl.w	r2, r1, r2
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d187      	bne.n	8003d80 <HAL_RCC_OscConfig+0xed0>
 8003e70:	e03a      	b.n	8003ee8 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e76:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d104      	bne.n	8003e8c <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e031      	b.n	8003eea <HAL_RCC_OscConfig+0x103a>
 8003e86:	bf00      	nop
 8003e88:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e8c:	4b19      	ldr	r3, [pc, #100]	@ (8003ef4 <HAL_RCC_OscConfig+0x1044>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003e94:	4b17      	ldr	r3, [pc, #92]	@ (8003ef4 <HAL_RCC_OscConfig+0x1044>)
 8003e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e98:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003e9c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003ea0:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003ea4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ea8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d117      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003eb4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003eb8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003ebc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ec0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d10b      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003ecc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ed0:	f003 020f 	and.w	r2, r3, #15
 8003ed4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ed8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d001      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e000      	b.n	8003eea <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40021000 	.word	0x40021000

08003ef8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b09e      	sub	sp, #120	@ 0x78
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e154      	b.n	80041ba <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f10:	4b89      	ldr	r3, [pc, #548]	@ (8004138 <HAL_RCC_ClockConfig+0x240>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d910      	bls.n	8003f40 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f1e:	4b86      	ldr	r3, [pc, #536]	@ (8004138 <HAL_RCC_ClockConfig+0x240>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f023 0207 	bic.w	r2, r3, #7
 8003f26:	4984      	ldr	r1, [pc, #528]	@ (8004138 <HAL_RCC_ClockConfig+0x240>)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2e:	4b82      	ldr	r3, [pc, #520]	@ (8004138 <HAL_RCC_ClockConfig+0x240>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0307 	and.w	r3, r3, #7
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d001      	beq.n	8003f40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e13c      	b.n	80041ba <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d008      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f4c:	4b7b      	ldr	r3, [pc, #492]	@ (800413c <HAL_RCC_ClockConfig+0x244>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	4978      	ldr	r1, [pc, #480]	@ (800413c <HAL_RCC_ClockConfig+0x244>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f000 80cd 	beq.w	8004106 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d137      	bne.n	8003fe4 <HAL_RCC_ClockConfig+0xec>
 8003f74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f78:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f7c:	fa93 f3a3 	rbit	r3, r3
 8003f80:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003f82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f84:	fab3 f383 	clz	r3, r3
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b3f      	cmp	r3, #63	@ 0x3f
 8003f8c:	d802      	bhi.n	8003f94 <HAL_RCC_ClockConfig+0x9c>
 8003f8e:	4b6b      	ldr	r3, [pc, #428]	@ (800413c <HAL_RCC_ClockConfig+0x244>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	e00f      	b.n	8003fb4 <HAL_RCC_ClockConfig+0xbc>
 8003f94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f9c:	fa93 f3a3 	rbit	r3, r3
 8003fa0:	667b      	str	r3, [r7, #100]	@ 0x64
 8003fa2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003fa6:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fa8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003faa:	fa93 f3a3 	rbit	r3, r3
 8003fae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fb0:	4b62      	ldr	r3, [pc, #392]	@ (800413c <HAL_RCC_ClockConfig+0x244>)
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003fb8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003fba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003fbc:	fa92 f2a2 	rbit	r2, r2
 8003fc0:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003fc2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003fc4:	fab2 f282 	clz	r2, r2
 8003fc8:	b2d2      	uxtb	r2, r2
 8003fca:	f042 0220 	orr.w	r2, r2, #32
 8003fce:	b2d2      	uxtb	r2, r2
 8003fd0:	f002 021f 	and.w	r2, r2, #31
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	fa01 f202 	lsl.w	r2, r1, r2
 8003fda:	4013      	ands	r3, r2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d171      	bne.n	80040c4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e0ea      	b.n	80041ba <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d137      	bne.n	800405c <HAL_RCC_ClockConfig+0x164>
 8003fec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ff0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ff4:	fa93 f3a3 	rbit	r3, r3
 8003ff8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003ffa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ffc:	fab3 f383 	clz	r3, r3
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b3f      	cmp	r3, #63	@ 0x3f
 8004004:	d802      	bhi.n	800400c <HAL_RCC_ClockConfig+0x114>
 8004006:	4b4d      	ldr	r3, [pc, #308]	@ (800413c <HAL_RCC_ClockConfig+0x244>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	e00f      	b.n	800402c <HAL_RCC_ClockConfig+0x134>
 800400c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004010:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004012:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004014:	fa93 f3a3 	rbit	r3, r3
 8004018:	647b      	str	r3, [r7, #68]	@ 0x44
 800401a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800401e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004020:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004022:	fa93 f3a3 	rbit	r3, r3
 8004026:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004028:	4b44      	ldr	r3, [pc, #272]	@ (800413c <HAL_RCC_ClockConfig+0x244>)
 800402a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004030:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004032:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004034:	fa92 f2a2 	rbit	r2, r2
 8004038:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800403a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800403c:	fab2 f282 	clz	r2, r2
 8004040:	b2d2      	uxtb	r2, r2
 8004042:	f042 0220 	orr.w	r2, r2, #32
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	f002 021f 	and.w	r2, r2, #31
 800404c:	2101      	movs	r1, #1
 800404e:	fa01 f202 	lsl.w	r2, r1, r2
 8004052:	4013      	ands	r3, r2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d135      	bne.n	80040c4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e0ae      	b.n	80041ba <HAL_RCC_ClockConfig+0x2c2>
 800405c:	2302      	movs	r3, #2
 800405e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004062:	fa93 f3a3 	rbit	r3, r3
 8004066:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800406a:	fab3 f383 	clz	r3, r3
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b3f      	cmp	r3, #63	@ 0x3f
 8004072:	d802      	bhi.n	800407a <HAL_RCC_ClockConfig+0x182>
 8004074:	4b31      	ldr	r3, [pc, #196]	@ (800413c <HAL_RCC_ClockConfig+0x244>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	e00d      	b.n	8004096 <HAL_RCC_ClockConfig+0x19e>
 800407a:	2302      	movs	r3, #2
 800407c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004080:	fa93 f3a3 	rbit	r3, r3
 8004084:	627b      	str	r3, [r7, #36]	@ 0x24
 8004086:	2302      	movs	r3, #2
 8004088:	623b      	str	r3, [r7, #32]
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	fa93 f3a3 	rbit	r3, r3
 8004090:	61fb      	str	r3, [r7, #28]
 8004092:	4b2a      	ldr	r3, [pc, #168]	@ (800413c <HAL_RCC_ClockConfig+0x244>)
 8004094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004096:	2202      	movs	r2, #2
 8004098:	61ba      	str	r2, [r7, #24]
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	fa92 f2a2 	rbit	r2, r2
 80040a0:	617a      	str	r2, [r7, #20]
  return result;
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	fab2 f282 	clz	r2, r2
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	f042 0220 	orr.w	r2, r2, #32
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	f002 021f 	and.w	r2, r2, #31
 80040b4:	2101      	movs	r1, #1
 80040b6:	fa01 f202 	lsl.w	r2, r1, r2
 80040ba:	4013      	ands	r3, r2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e07a      	b.n	80041ba <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040c4:	4b1d      	ldr	r3, [pc, #116]	@ (800413c <HAL_RCC_ClockConfig+0x244>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f023 0203 	bic.w	r2, r3, #3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	491a      	ldr	r1, [pc, #104]	@ (800413c <HAL_RCC_ClockConfig+0x244>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040d6:	f7fd fa37 	bl	8001548 <HAL_GetTick>
 80040da:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040dc:	e00a      	b.n	80040f4 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040de:	f7fd fa33 	bl	8001548 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e062      	b.n	80041ba <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f4:	4b11      	ldr	r3, [pc, #68]	@ (800413c <HAL_RCC_ClockConfig+0x244>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f003 020c 	and.w	r2, r3, #12
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	429a      	cmp	r2, r3
 8004104:	d1eb      	bne.n	80040de <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004106:	4b0c      	ldr	r3, [pc, #48]	@ (8004138 <HAL_RCC_ClockConfig+0x240>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d215      	bcs.n	8004140 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004114:	4b08      	ldr	r3, [pc, #32]	@ (8004138 <HAL_RCC_ClockConfig+0x240>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f023 0207 	bic.w	r2, r3, #7
 800411c:	4906      	ldr	r1, [pc, #24]	@ (8004138 <HAL_RCC_ClockConfig+0x240>)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	4313      	orrs	r3, r2
 8004122:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004124:	4b04      	ldr	r3, [pc, #16]	@ (8004138 <HAL_RCC_ClockConfig+0x240>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0307 	and.w	r3, r3, #7
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	429a      	cmp	r2, r3
 8004130:	d006      	beq.n	8004140 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e041      	b.n	80041ba <HAL_RCC_ClockConfig+0x2c2>
 8004136:	bf00      	nop
 8004138:	40022000 	.word	0x40022000
 800413c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b00      	cmp	r3, #0
 800414a:	d008      	beq.n	800415e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800414c:	4b1d      	ldr	r3, [pc, #116]	@ (80041c4 <HAL_RCC_ClockConfig+0x2cc>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	491a      	ldr	r1, [pc, #104]	@ (80041c4 <HAL_RCC_ClockConfig+0x2cc>)
 800415a:	4313      	orrs	r3, r2
 800415c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0308 	and.w	r3, r3, #8
 8004166:	2b00      	cmp	r3, #0
 8004168:	d009      	beq.n	800417e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800416a:	4b16      	ldr	r3, [pc, #88]	@ (80041c4 <HAL_RCC_ClockConfig+0x2cc>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	4912      	ldr	r1, [pc, #72]	@ (80041c4 <HAL_RCC_ClockConfig+0x2cc>)
 800417a:	4313      	orrs	r3, r2
 800417c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800417e:	f000 f829 	bl	80041d4 <HAL_RCC_GetSysClockFreq>
 8004182:	4601      	mov	r1, r0
 8004184:	4b0f      	ldr	r3, [pc, #60]	@ (80041c4 <HAL_RCC_ClockConfig+0x2cc>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800418c:	22f0      	movs	r2, #240	@ 0xf0
 800418e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	fa92 f2a2 	rbit	r2, r2
 8004196:	60fa      	str	r2, [r7, #12]
  return result;
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	fab2 f282 	clz	r2, r2
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	40d3      	lsrs	r3, r2
 80041a2:	4a09      	ldr	r2, [pc, #36]	@ (80041c8 <HAL_RCC_ClockConfig+0x2d0>)
 80041a4:	5cd3      	ldrb	r3, [r2, r3]
 80041a6:	fa21 f303 	lsr.w	r3, r1, r3
 80041aa:	4a08      	ldr	r2, [pc, #32]	@ (80041cc <HAL_RCC_ClockConfig+0x2d4>)
 80041ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80041ae:	4b08      	ldr	r3, [pc, #32]	@ (80041d0 <HAL_RCC_ClockConfig+0x2d8>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fd f984 	bl	80014c0 <HAL_InitTick>
  
  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3778      	adds	r7, #120	@ 0x78
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	40021000 	.word	0x40021000
 80041c8:	08005958 	.word	0x08005958
 80041cc:	20000000 	.word	0x20000000
 80041d0:	20000004 	.word	0x20000004

080041d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041da:	2300      	movs	r3, #0
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	2300      	movs	r3, #0
 80041e0:	60bb      	str	r3, [r7, #8]
 80041e2:	2300      	movs	r3, #0
 80041e4:	617b      	str	r3, [r7, #20]
 80041e6:	2300      	movs	r3, #0
 80041e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80041ee:	4b1f      	ldr	r3, [pc, #124]	@ (800426c <HAL_RCC_GetSysClockFreq+0x98>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f003 030c 	and.w	r3, r3, #12
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d002      	beq.n	8004204 <HAL_RCC_GetSysClockFreq+0x30>
 80041fe:	2b08      	cmp	r3, #8
 8004200:	d003      	beq.n	800420a <HAL_RCC_GetSysClockFreq+0x36>
 8004202:	e029      	b.n	8004258 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004204:	4b1a      	ldr	r3, [pc, #104]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004206:	613b      	str	r3, [r7, #16]
      break;
 8004208:	e029      	b.n	800425e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	0c9b      	lsrs	r3, r3, #18
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	4a18      	ldr	r2, [pc, #96]	@ (8004274 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004214:	5cd3      	ldrb	r3, [r2, r3]
 8004216:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004218:	4b14      	ldr	r3, [pc, #80]	@ (800426c <HAL_RCC_GetSysClockFreq+0x98>)
 800421a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421c:	f003 030f 	and.w	r3, r3, #15
 8004220:	4a15      	ldr	r2, [pc, #84]	@ (8004278 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004222:	5cd3      	ldrb	r3, [r2, r3]
 8004224:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d008      	beq.n	8004242 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004230:	4a0f      	ldr	r2, [pc, #60]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	fbb2 f2f3 	udiv	r2, r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	fb02 f303 	mul.w	r3, r2, r3
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	e007      	b.n	8004252 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004242:	4a0b      	ldr	r2, [pc, #44]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	fbb2 f2f3 	udiv	r2, r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	fb02 f303 	mul.w	r3, r2, r3
 8004250:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	613b      	str	r3, [r7, #16]
      break;
 8004256:	e002      	b.n	800425e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004258:	4b05      	ldr	r3, [pc, #20]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x9c>)
 800425a:	613b      	str	r3, [r7, #16]
      break;
 800425c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800425e:	693b      	ldr	r3, [r7, #16]
}
 8004260:	4618      	mov	r0, r3
 8004262:	371c      	adds	r7, #28
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	40021000 	.word	0x40021000
 8004270:	007a1200 	.word	0x007a1200
 8004274:	08005968 	.word	0x08005968
 8004278:	08005978 	.word	0x08005978

0800427c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b092      	sub	sp, #72	@ 0x48
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004284:	2300      	movs	r3, #0
 8004286:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800428c:	2300      	movs	r3, #0
 800428e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 80d2 	beq.w	8004444 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042a0:	4b4d      	ldr	r3, [pc, #308]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80042a2:	69db      	ldr	r3, [r3, #28]
 80042a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10e      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ac:	4b4a      	ldr	r3, [pc, #296]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	4a49      	ldr	r2, [pc, #292]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80042b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042b6:	61d3      	str	r3, [r2, #28]
 80042b8:	4b47      	ldr	r3, [pc, #284]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042c0:	60bb      	str	r3, [r7, #8]
 80042c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042c4:	2301      	movs	r3, #1
 80042c6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ca:	4b44      	ldr	r3, [pc, #272]	@ (80043dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d118      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042d6:	4b41      	ldr	r3, [pc, #260]	@ (80043dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a40      	ldr	r2, [pc, #256]	@ (80043dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042e2:	f7fd f931 	bl	8001548 <HAL_GetTick>
 80042e6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e8:	e008      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ea:	f7fd f92d 	bl	8001548 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b64      	cmp	r3, #100	@ 0x64
 80042f6:	d901      	bls.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e1d4      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fc:	4b37      	ldr	r3, [pc, #220]	@ (80043dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0f0      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004308:	4b33      	ldr	r3, [pc, #204]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004310:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 8082 	beq.w	800441e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004322:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004324:	429a      	cmp	r2, r3
 8004326:	d07a      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004328:	4b2b      	ldr	r3, [pc, #172]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004330:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004332:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004336:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800433a:	fa93 f3a3 	rbit	r3, r3
 800433e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004342:	fab3 f383 	clz	r3, r3
 8004346:	b2db      	uxtb	r3, r3
 8004348:	461a      	mov	r2, r3
 800434a:	4b25      	ldr	r3, [pc, #148]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800434c:	4413      	add	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	461a      	mov	r2, r3
 8004352:	2301      	movs	r3, #1
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800435a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800435e:	fa93 f3a3 	rbit	r3, r3
 8004362:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004366:	fab3 f383 	clz	r3, r3
 800436a:	b2db      	uxtb	r3, r3
 800436c:	461a      	mov	r2, r3
 800436e:	4b1c      	ldr	r3, [pc, #112]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004370:	4413      	add	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	461a      	mov	r2, r3
 8004376:	2300      	movs	r3, #0
 8004378:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800437a:	4a17      	ldr	r2, [pc, #92]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800437c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800437e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d049      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800438a:	f7fd f8dd 	bl	8001548 <HAL_GetTick>
 800438e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004390:	e00a      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004392:	f7fd f8d9 	bl	8001548 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e17e      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80043a8:	2302      	movs	r3, #2
 80043aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ae:	fa93 f3a3 	rbit	r3, r3
 80043b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80043b4:	2302      	movs	r3, #2
 80043b6:	623b      	str	r3, [r7, #32]
 80043b8:	6a3b      	ldr	r3, [r7, #32]
 80043ba:	fa93 f3a3 	rbit	r3, r3
 80043be:	61fb      	str	r3, [r7, #28]
  return result;
 80043c0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c2:	fab3 f383 	clz	r3, r3
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d108      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80043d2:	4b01      	ldr	r3, [pc, #4]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	e00d      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80043d8:	40021000 	.word	0x40021000
 80043dc:	40007000 	.word	0x40007000
 80043e0:	10908100 	.word	0x10908100
 80043e4:	2302      	movs	r3, #2
 80043e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	fa93 f3a3 	rbit	r3, r3
 80043ee:	617b      	str	r3, [r7, #20]
 80043f0:	4b9a      	ldr	r3, [pc, #616]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f4:	2202      	movs	r2, #2
 80043f6:	613a      	str	r2, [r7, #16]
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	fa92 f2a2 	rbit	r2, r2
 80043fe:	60fa      	str	r2, [r7, #12]
  return result;
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	fab2 f282 	clz	r2, r2
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	f002 021f 	and.w	r2, r2, #31
 8004412:	2101      	movs	r1, #1
 8004414:	fa01 f202 	lsl.w	r2, r1, r2
 8004418:	4013      	ands	r3, r2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0b9      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800441e:	4b8f      	ldr	r3, [pc, #572]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	498c      	ldr	r1, [pc, #560]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800442c:	4313      	orrs	r3, r2
 800442e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004430:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004434:	2b01      	cmp	r3, #1
 8004436:	d105      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004438:	4b88      	ldr	r3, [pc, #544]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	4a87      	ldr	r2, [pc, #540]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800443e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004442:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b00      	cmp	r3, #0
 800444e:	d008      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004450:	4b82      	ldr	r3, [pc, #520]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004454:	f023 0203 	bic.w	r2, r3, #3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	497f      	ldr	r1, [pc, #508]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800445e:	4313      	orrs	r3, r2
 8004460:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d008      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800446e:	4b7b      	ldr	r3, [pc, #492]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004472:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	4978      	ldr	r1, [pc, #480]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800447c:	4313      	orrs	r3, r2
 800447e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0304 	and.w	r3, r3, #4
 8004488:	2b00      	cmp	r3, #0
 800448a:	d008      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800448c:	4b73      	ldr	r3, [pc, #460]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800448e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004490:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	4970      	ldr	r1, [pc, #448]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800449a:	4313      	orrs	r3, r2
 800449c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0320 	and.w	r3, r3, #32
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d008      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044aa:	4b6c      	ldr	r3, [pc, #432]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ae:	f023 0210 	bic.w	r2, r3, #16
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	4969      	ldr	r1, [pc, #420]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d008      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80044c8:	4b64      	ldr	r3, [pc, #400]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044d4:	4961      	ldr	r1, [pc, #388]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d008      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044e6:	4b5d      	ldr	r3, [pc, #372]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ea:	f023 0220 	bic.w	r2, r3, #32
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	495a      	ldr	r1, [pc, #360]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d008      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004504:	4b55      	ldr	r3, [pc, #340]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004508:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004510:	4952      	ldr	r1, [pc, #328]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004512:	4313      	orrs	r3, r2
 8004514:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0308 	and.w	r3, r3, #8
 800451e:	2b00      	cmp	r3, #0
 8004520:	d008      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004522:	4b4e      	ldr	r3, [pc, #312]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004526:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	494b      	ldr	r1, [pc, #300]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004530:	4313      	orrs	r3, r2
 8004532:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0310 	and.w	r3, r3, #16
 800453c:	2b00      	cmp	r3, #0
 800453e:	d008      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004540:	4b46      	ldr	r3, [pc, #280]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004544:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	4943      	ldr	r1, [pc, #268]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800454e:	4313      	orrs	r3, r2
 8004550:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800455a:	2b00      	cmp	r3, #0
 800455c:	d008      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800455e:	4b3f      	ldr	r3, [pc, #252]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800456a:	493c      	ldr	r1, [pc, #240]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800456c:	4313      	orrs	r3, r2
 800456e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004578:	2b00      	cmp	r3, #0
 800457a:	d008      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800457c:	4b37      	ldr	r3, [pc, #220]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800457e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004580:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004588:	4934      	ldr	r1, [pc, #208]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800458a:	4313      	orrs	r3, r2
 800458c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004596:	2b00      	cmp	r3, #0
 8004598:	d008      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800459a:	4b30      	ldr	r3, [pc, #192]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800459c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800459e:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a6:	492d      	ldr	r1, [pc, #180]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d008      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80045b8:	4b28      	ldr	r3, [pc, #160]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045c4:	4925      	ldr	r1, [pc, #148]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d008      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80045d6:	4b21      	ldr	r3, [pc, #132]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045da:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e2:	491e      	ldr	r1, [pc, #120]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d008      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80045f4:	4b19      	ldr	r3, [pc, #100]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004600:	4916      	ldr	r1, [pc, #88]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004602:	4313      	orrs	r3, r2
 8004604:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d008      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004612:	4b12      	ldr	r3, [pc, #72]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004616:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800461e:	490f      	ldr	r1, [pc, #60]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004620:	4313      	orrs	r3, r2
 8004622:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d008      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004630:	4b0a      	ldr	r3, [pc, #40]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004634:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800463c:	4907      	ldr	r1, [pc, #28]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800463e:	4313      	orrs	r3, r2
 8004640:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00c      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800464e:	4b03      	ldr	r3, [pc, #12]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004652:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	e002      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800465a:	bf00      	nop
 800465c:	40021000 	.word	0x40021000
 8004660:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004662:	4913      	ldr	r1, [pc, #76]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004664:	4313      	orrs	r3, r2
 8004666:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d008      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004674:	4b0e      	ldr	r3, [pc, #56]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004678:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004680:	490b      	ldr	r1, [pc, #44]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004682:	4313      	orrs	r3, r2
 8004684:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d008      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004692:	4b07      	ldr	r3, [pc, #28]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004696:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800469e:	4904      	ldr	r1, [pc, #16]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3748      	adds	r7, #72	@ 0x48
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	40021000 	.word	0x40021000

080046b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e049      	b.n	800475a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d106      	bne.n	80046e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7fc fdec 	bl	80012b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3304      	adds	r3, #4
 80046f0:	4619      	mov	r1, r3
 80046f2:	4610      	mov	r0, r2
 80046f4:	f000 fb76 	bl	8004de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b082      	sub	sp, #8
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e049      	b.n	8004808 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	d106      	bne.n	800478e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7fc fdb5 	bl	80012f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2202      	movs	r2, #2
 8004792:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	3304      	adds	r3, #4
 800479e:	4619      	mov	r1, r3
 80047a0:	4610      	mov	r0, r2
 80047a2:	f000 fb1f 	bl	8004de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3708      	adds	r7, #8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d109      	bne.n	8004834 <HAL_TIM_PWM_Start+0x24>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b01      	cmp	r3, #1
 800482a:	bf14      	ite	ne
 800482c:	2301      	movne	r3, #1
 800482e:	2300      	moveq	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	e03c      	b.n	80048ae <HAL_TIM_PWM_Start+0x9e>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	2b04      	cmp	r3, #4
 8004838:	d109      	bne.n	800484e <HAL_TIM_PWM_Start+0x3e>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b01      	cmp	r3, #1
 8004844:	bf14      	ite	ne
 8004846:	2301      	movne	r3, #1
 8004848:	2300      	moveq	r3, #0
 800484a:	b2db      	uxtb	r3, r3
 800484c:	e02f      	b.n	80048ae <HAL_TIM_PWM_Start+0x9e>
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b08      	cmp	r3, #8
 8004852:	d109      	bne.n	8004868 <HAL_TIM_PWM_Start+0x58>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b01      	cmp	r3, #1
 800485e:	bf14      	ite	ne
 8004860:	2301      	movne	r3, #1
 8004862:	2300      	moveq	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	e022      	b.n	80048ae <HAL_TIM_PWM_Start+0x9e>
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	2b0c      	cmp	r3, #12
 800486c:	d109      	bne.n	8004882 <HAL_TIM_PWM_Start+0x72>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b01      	cmp	r3, #1
 8004878:	bf14      	ite	ne
 800487a:	2301      	movne	r3, #1
 800487c:	2300      	moveq	r3, #0
 800487e:	b2db      	uxtb	r3, r3
 8004880:	e015      	b.n	80048ae <HAL_TIM_PWM_Start+0x9e>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	2b10      	cmp	r3, #16
 8004886:	d109      	bne.n	800489c <HAL_TIM_PWM_Start+0x8c>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b01      	cmp	r3, #1
 8004892:	bf14      	ite	ne
 8004894:	2301      	movne	r3, #1
 8004896:	2300      	moveq	r3, #0
 8004898:	b2db      	uxtb	r3, r3
 800489a:	e008      	b.n	80048ae <HAL_TIM_PWM_Start+0x9e>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	bf14      	ite	ne
 80048a8:	2301      	movne	r3, #1
 80048aa:	2300      	moveq	r3, #0
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e0a1      	b.n	80049fa <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d104      	bne.n	80048c6 <HAL_TIM_PWM_Start+0xb6>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048c4:	e023      	b.n	800490e <HAL_TIM_PWM_Start+0xfe>
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	d104      	bne.n	80048d6 <HAL_TIM_PWM_Start+0xc6>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048d4:	e01b      	b.n	800490e <HAL_TIM_PWM_Start+0xfe>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d104      	bne.n	80048e6 <HAL_TIM_PWM_Start+0xd6>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2202      	movs	r2, #2
 80048e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048e4:	e013      	b.n	800490e <HAL_TIM_PWM_Start+0xfe>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b0c      	cmp	r3, #12
 80048ea:	d104      	bne.n	80048f6 <HAL_TIM_PWM_Start+0xe6>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80048f4:	e00b      	b.n	800490e <HAL_TIM_PWM_Start+0xfe>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b10      	cmp	r3, #16
 80048fa:	d104      	bne.n	8004906 <HAL_TIM_PWM_Start+0xf6>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004904:	e003      	b.n	800490e <HAL_TIM_PWM_Start+0xfe>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2202      	movs	r2, #2
 800490a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2201      	movs	r2, #1
 8004914:	6839      	ldr	r1, [r7, #0]
 8004916:	4618      	mov	r0, r3
 8004918:	f000 feae 	bl	8005678 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a38      	ldr	r2, [pc, #224]	@ (8004a04 <HAL_TIM_PWM_Start+0x1f4>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d018      	beq.n	8004958 <HAL_TIM_PWM_Start+0x148>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a37      	ldr	r2, [pc, #220]	@ (8004a08 <HAL_TIM_PWM_Start+0x1f8>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d013      	beq.n	8004958 <HAL_TIM_PWM_Start+0x148>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a35      	ldr	r2, [pc, #212]	@ (8004a0c <HAL_TIM_PWM_Start+0x1fc>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d00e      	beq.n	8004958 <HAL_TIM_PWM_Start+0x148>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a34      	ldr	r2, [pc, #208]	@ (8004a10 <HAL_TIM_PWM_Start+0x200>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d009      	beq.n	8004958 <HAL_TIM_PWM_Start+0x148>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a32      	ldr	r2, [pc, #200]	@ (8004a14 <HAL_TIM_PWM_Start+0x204>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d004      	beq.n	8004958 <HAL_TIM_PWM_Start+0x148>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a31      	ldr	r2, [pc, #196]	@ (8004a18 <HAL_TIM_PWM_Start+0x208>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d101      	bne.n	800495c <HAL_TIM_PWM_Start+0x14c>
 8004958:	2301      	movs	r3, #1
 800495a:	e000      	b.n	800495e <HAL_TIM_PWM_Start+0x14e>
 800495c:	2300      	movs	r3, #0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d007      	beq.n	8004972 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004970:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a23      	ldr	r2, [pc, #140]	@ (8004a04 <HAL_TIM_PWM_Start+0x1f4>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d01d      	beq.n	80049b8 <HAL_TIM_PWM_Start+0x1a8>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004984:	d018      	beq.n	80049b8 <HAL_TIM_PWM_Start+0x1a8>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a24      	ldr	r2, [pc, #144]	@ (8004a1c <HAL_TIM_PWM_Start+0x20c>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d013      	beq.n	80049b8 <HAL_TIM_PWM_Start+0x1a8>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a22      	ldr	r2, [pc, #136]	@ (8004a20 <HAL_TIM_PWM_Start+0x210>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d00e      	beq.n	80049b8 <HAL_TIM_PWM_Start+0x1a8>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a1a      	ldr	r2, [pc, #104]	@ (8004a08 <HAL_TIM_PWM_Start+0x1f8>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d009      	beq.n	80049b8 <HAL_TIM_PWM_Start+0x1a8>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a18      	ldr	r2, [pc, #96]	@ (8004a0c <HAL_TIM_PWM_Start+0x1fc>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d004      	beq.n	80049b8 <HAL_TIM_PWM_Start+0x1a8>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a19      	ldr	r2, [pc, #100]	@ (8004a18 <HAL_TIM_PWM_Start+0x208>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d115      	bne.n	80049e4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689a      	ldr	r2, [r3, #8]
 80049be:	4b19      	ldr	r3, [pc, #100]	@ (8004a24 <HAL_TIM_PWM_Start+0x214>)
 80049c0:	4013      	ands	r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2b06      	cmp	r3, #6
 80049c8:	d015      	beq.n	80049f6 <HAL_TIM_PWM_Start+0x1e6>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049d0:	d011      	beq.n	80049f6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f042 0201 	orr.w	r2, r2, #1
 80049e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e2:	e008      	b.n	80049f6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0201 	orr.w	r2, r2, #1
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	e000      	b.n	80049f8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	40012c00 	.word	0x40012c00
 8004a08:	40013400 	.word	0x40013400
 8004a0c:	40014000 	.word	0x40014000
 8004a10:	40014400 	.word	0x40014400
 8004a14:	40014800 	.word	0x40014800
 8004a18:	40015000 	.word	0x40015000
 8004a1c:	40000400 	.word	0x40000400
 8004a20:	40000800 	.word	0x40000800
 8004a24:	00010007 	.word	0x00010007

08004a28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d101      	bne.n	8004a46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a42:	2302      	movs	r3, #2
 8004a44:	e0ff      	b.n	8004c46 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b14      	cmp	r3, #20
 8004a52:	f200 80f0 	bhi.w	8004c36 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004a56:	a201      	add	r2, pc, #4	@ (adr r2, 8004a5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5c:	08004ab1 	.word	0x08004ab1
 8004a60:	08004c37 	.word	0x08004c37
 8004a64:	08004c37 	.word	0x08004c37
 8004a68:	08004c37 	.word	0x08004c37
 8004a6c:	08004af1 	.word	0x08004af1
 8004a70:	08004c37 	.word	0x08004c37
 8004a74:	08004c37 	.word	0x08004c37
 8004a78:	08004c37 	.word	0x08004c37
 8004a7c:	08004b33 	.word	0x08004b33
 8004a80:	08004c37 	.word	0x08004c37
 8004a84:	08004c37 	.word	0x08004c37
 8004a88:	08004c37 	.word	0x08004c37
 8004a8c:	08004b73 	.word	0x08004b73
 8004a90:	08004c37 	.word	0x08004c37
 8004a94:	08004c37 	.word	0x08004c37
 8004a98:	08004c37 	.word	0x08004c37
 8004a9c:	08004bb5 	.word	0x08004bb5
 8004aa0:	08004c37 	.word	0x08004c37
 8004aa4:	08004c37 	.word	0x08004c37
 8004aa8:	08004c37 	.word	0x08004c37
 8004aac:	08004bf5 	.word	0x08004bf5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68b9      	ldr	r1, [r7, #8]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 fa3e 	bl	8004f38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	699a      	ldr	r2, [r3, #24]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f042 0208 	orr.w	r2, r2, #8
 8004aca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699a      	ldr	r2, [r3, #24]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0204 	bic.w	r2, r2, #4
 8004ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6999      	ldr	r1, [r3, #24]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	691a      	ldr	r2, [r3, #16]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	619a      	str	r2, [r3, #24]
      break;
 8004aee:	e0a5      	b.n	8004c3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68b9      	ldr	r1, [r7, #8]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 fab8 	bl	800506c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	699a      	ldr	r2, [r3, #24]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	699a      	ldr	r2, [r3, #24]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6999      	ldr	r1, [r3, #24]
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	021a      	lsls	r2, r3, #8
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	619a      	str	r2, [r3, #24]
      break;
 8004b30:	e084      	b.n	8004c3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68b9      	ldr	r1, [r7, #8]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 fb2b 	bl	8005194 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	69da      	ldr	r2, [r3, #28]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f042 0208 	orr.w	r2, r2, #8
 8004b4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	69da      	ldr	r2, [r3, #28]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 0204 	bic.w	r2, r2, #4
 8004b5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	69d9      	ldr	r1, [r3, #28]
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	691a      	ldr	r2, [r3, #16]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	61da      	str	r2, [r3, #28]
      break;
 8004b70:	e064      	b.n	8004c3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68b9      	ldr	r1, [r7, #8]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 fb9d 	bl	80052b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	69da      	ldr	r2, [r3, #28]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	69da      	ldr	r2, [r3, #28]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	69d9      	ldr	r1, [r3, #28]
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	021a      	lsls	r2, r3, #8
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	61da      	str	r2, [r3, #28]
      break;
 8004bb2:	e043      	b.n	8004c3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68b9      	ldr	r1, [r7, #8]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 fbec 	bl	8005398 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 0208 	orr.w	r2, r2, #8
 8004bce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 0204 	bic.w	r2, r2, #4
 8004bde:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	691a      	ldr	r2, [r3, #16]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004bf2:	e023      	b.n	8004c3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68b9      	ldr	r1, [r7, #8]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 fc36 	bl	800546c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c0e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c1e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	021a      	lsls	r2, r3, #8
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004c34:	e002      	b.n	8004c3c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	75fb      	strb	r3, [r7, #23]
      break;
 8004c3a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3718      	adds	r7, #24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop

08004c50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d101      	bne.n	8004c6c <HAL_TIM_ConfigClockSource+0x1c>
 8004c68:	2302      	movs	r3, #2
 8004c6a:	e0b6      	b.n	8004dda <HAL_TIM_ConfigClockSource+0x18a>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c8a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ca8:	d03e      	beq.n	8004d28 <HAL_TIM_ConfigClockSource+0xd8>
 8004caa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cae:	f200 8087 	bhi.w	8004dc0 <HAL_TIM_ConfigClockSource+0x170>
 8004cb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cb6:	f000 8086 	beq.w	8004dc6 <HAL_TIM_ConfigClockSource+0x176>
 8004cba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cbe:	d87f      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x170>
 8004cc0:	2b70      	cmp	r3, #112	@ 0x70
 8004cc2:	d01a      	beq.n	8004cfa <HAL_TIM_ConfigClockSource+0xaa>
 8004cc4:	2b70      	cmp	r3, #112	@ 0x70
 8004cc6:	d87b      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x170>
 8004cc8:	2b60      	cmp	r3, #96	@ 0x60
 8004cca:	d050      	beq.n	8004d6e <HAL_TIM_ConfigClockSource+0x11e>
 8004ccc:	2b60      	cmp	r3, #96	@ 0x60
 8004cce:	d877      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x170>
 8004cd0:	2b50      	cmp	r3, #80	@ 0x50
 8004cd2:	d03c      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0xfe>
 8004cd4:	2b50      	cmp	r3, #80	@ 0x50
 8004cd6:	d873      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x170>
 8004cd8:	2b40      	cmp	r3, #64	@ 0x40
 8004cda:	d058      	beq.n	8004d8e <HAL_TIM_ConfigClockSource+0x13e>
 8004cdc:	2b40      	cmp	r3, #64	@ 0x40
 8004cde:	d86f      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x170>
 8004ce0:	2b30      	cmp	r3, #48	@ 0x30
 8004ce2:	d064      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0x15e>
 8004ce4:	2b30      	cmp	r3, #48	@ 0x30
 8004ce6:	d86b      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x170>
 8004ce8:	2b20      	cmp	r3, #32
 8004cea:	d060      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0x15e>
 8004cec:	2b20      	cmp	r3, #32
 8004cee:	d867      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x170>
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d05c      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0x15e>
 8004cf4:	2b10      	cmp	r3, #16
 8004cf6:	d05a      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0x15e>
 8004cf8:	e062      	b.n	8004dc0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d0a:	f000 fc95 	bl	8005638 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	609a      	str	r2, [r3, #8]
      break;
 8004d26:	e04f      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d38:	f000 fc7e 	bl	8005638 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d4a:	609a      	str	r2, [r3, #8]
      break;
 8004d4c:	e03c      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	f000 fbf2 	bl	8005544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2150      	movs	r1, #80	@ 0x50
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 fc4b 	bl	8005602 <TIM_ITRx_SetConfig>
      break;
 8004d6c:	e02c      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	f000 fc11 	bl	80055a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2160      	movs	r1, #96	@ 0x60
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 fc3b 	bl	8005602 <TIM_ITRx_SetConfig>
      break;
 8004d8c:	e01c      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f000 fbd2 	bl	8005544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2140      	movs	r1, #64	@ 0x40
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fc2b 	bl	8005602 <TIM_ITRx_SetConfig>
      break;
 8004dac:	e00c      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4619      	mov	r1, r3
 8004db8:	4610      	mov	r0, r2
 8004dba:	f000 fc22 	bl	8005602 <TIM_ITRx_SetConfig>
      break;
 8004dbe:	e003      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8004dc4:	e000      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004dc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a48      	ldr	r2, [pc, #288]	@ (8004f18 <TIM_Base_SetConfig+0x134>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d013      	beq.n	8004e24 <TIM_Base_SetConfig+0x40>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e02:	d00f      	beq.n	8004e24 <TIM_Base_SetConfig+0x40>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a45      	ldr	r2, [pc, #276]	@ (8004f1c <TIM_Base_SetConfig+0x138>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d00b      	beq.n	8004e24 <TIM_Base_SetConfig+0x40>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a44      	ldr	r2, [pc, #272]	@ (8004f20 <TIM_Base_SetConfig+0x13c>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d007      	beq.n	8004e24 <TIM_Base_SetConfig+0x40>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a43      	ldr	r2, [pc, #268]	@ (8004f24 <TIM_Base_SetConfig+0x140>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d003      	beq.n	8004e24 <TIM_Base_SetConfig+0x40>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a42      	ldr	r2, [pc, #264]	@ (8004f28 <TIM_Base_SetConfig+0x144>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d108      	bne.n	8004e36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a37      	ldr	r2, [pc, #220]	@ (8004f18 <TIM_Base_SetConfig+0x134>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d01f      	beq.n	8004e7e <TIM_Base_SetConfig+0x9a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e44:	d01b      	beq.n	8004e7e <TIM_Base_SetConfig+0x9a>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a34      	ldr	r2, [pc, #208]	@ (8004f1c <TIM_Base_SetConfig+0x138>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d017      	beq.n	8004e7e <TIM_Base_SetConfig+0x9a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a33      	ldr	r2, [pc, #204]	@ (8004f20 <TIM_Base_SetConfig+0x13c>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d013      	beq.n	8004e7e <TIM_Base_SetConfig+0x9a>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a32      	ldr	r2, [pc, #200]	@ (8004f24 <TIM_Base_SetConfig+0x140>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d00f      	beq.n	8004e7e <TIM_Base_SetConfig+0x9a>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a32      	ldr	r2, [pc, #200]	@ (8004f2c <TIM_Base_SetConfig+0x148>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d00b      	beq.n	8004e7e <TIM_Base_SetConfig+0x9a>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a31      	ldr	r2, [pc, #196]	@ (8004f30 <TIM_Base_SetConfig+0x14c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d007      	beq.n	8004e7e <TIM_Base_SetConfig+0x9a>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a30      	ldr	r2, [pc, #192]	@ (8004f34 <TIM_Base_SetConfig+0x150>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d003      	beq.n	8004e7e <TIM_Base_SetConfig+0x9a>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a2b      	ldr	r2, [pc, #172]	@ (8004f28 <TIM_Base_SetConfig+0x144>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d108      	bne.n	8004e90 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a18      	ldr	r2, [pc, #96]	@ (8004f18 <TIM_Base_SetConfig+0x134>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d013      	beq.n	8004ee4 <TIM_Base_SetConfig+0x100>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a19      	ldr	r2, [pc, #100]	@ (8004f24 <TIM_Base_SetConfig+0x140>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d00f      	beq.n	8004ee4 <TIM_Base_SetConfig+0x100>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a19      	ldr	r2, [pc, #100]	@ (8004f2c <TIM_Base_SetConfig+0x148>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d00b      	beq.n	8004ee4 <TIM_Base_SetConfig+0x100>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a18      	ldr	r2, [pc, #96]	@ (8004f30 <TIM_Base_SetConfig+0x14c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d007      	beq.n	8004ee4 <TIM_Base_SetConfig+0x100>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a17      	ldr	r2, [pc, #92]	@ (8004f34 <TIM_Base_SetConfig+0x150>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d003      	beq.n	8004ee4 <TIM_Base_SetConfig+0x100>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a12      	ldr	r2, [pc, #72]	@ (8004f28 <TIM_Base_SetConfig+0x144>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d103      	bne.n	8004eec <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d105      	bne.n	8004f0a <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	f023 0201 	bic.w	r2, r3, #1
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	611a      	str	r2, [r3, #16]
  }
}
 8004f0a:	bf00      	nop
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	40012c00 	.word	0x40012c00
 8004f1c:	40000400 	.word	0x40000400
 8004f20:	40000800 	.word	0x40000800
 8004f24:	40013400 	.word	0x40013400
 8004f28:	40015000 	.word	0x40015000
 8004f2c:	40014000 	.word	0x40014000
 8004f30:	40014400 	.word	0x40014400
 8004f34:	40014800 	.word	0x40014800

08004f38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b087      	sub	sp, #28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	f023 0201 	bic.w	r2, r3, #1
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f023 0303 	bic.w	r3, r3, #3
 8004f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f023 0302 	bic.w	r3, r3, #2
 8004f84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a30      	ldr	r2, [pc, #192]	@ (8005054 <TIM_OC1_SetConfig+0x11c>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d013      	beq.n	8004fc0 <TIM_OC1_SetConfig+0x88>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a2f      	ldr	r2, [pc, #188]	@ (8005058 <TIM_OC1_SetConfig+0x120>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d00f      	beq.n	8004fc0 <TIM_OC1_SetConfig+0x88>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a2e      	ldr	r2, [pc, #184]	@ (800505c <TIM_OC1_SetConfig+0x124>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d00b      	beq.n	8004fc0 <TIM_OC1_SetConfig+0x88>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a2d      	ldr	r2, [pc, #180]	@ (8005060 <TIM_OC1_SetConfig+0x128>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d007      	beq.n	8004fc0 <TIM_OC1_SetConfig+0x88>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a2c      	ldr	r2, [pc, #176]	@ (8005064 <TIM_OC1_SetConfig+0x12c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d003      	beq.n	8004fc0 <TIM_OC1_SetConfig+0x88>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a2b      	ldr	r2, [pc, #172]	@ (8005068 <TIM_OC1_SetConfig+0x130>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d10c      	bne.n	8004fda <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f023 0308 	bic.w	r3, r3, #8
 8004fc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	697a      	ldr	r2, [r7, #20]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f023 0304 	bic.w	r3, r3, #4
 8004fd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8005054 <TIM_OC1_SetConfig+0x11c>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d013      	beq.n	800500a <TIM_OC1_SetConfig+0xd2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a1c      	ldr	r2, [pc, #112]	@ (8005058 <TIM_OC1_SetConfig+0x120>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d00f      	beq.n	800500a <TIM_OC1_SetConfig+0xd2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a1b      	ldr	r2, [pc, #108]	@ (800505c <TIM_OC1_SetConfig+0x124>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d00b      	beq.n	800500a <TIM_OC1_SetConfig+0xd2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a1a      	ldr	r2, [pc, #104]	@ (8005060 <TIM_OC1_SetConfig+0x128>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d007      	beq.n	800500a <TIM_OC1_SetConfig+0xd2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a19      	ldr	r2, [pc, #100]	@ (8005064 <TIM_OC1_SetConfig+0x12c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d003      	beq.n	800500a <TIM_OC1_SetConfig+0xd2>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a18      	ldr	r2, [pc, #96]	@ (8005068 <TIM_OC1_SetConfig+0x130>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d111      	bne.n	800502e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005010:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005018:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	4313      	orrs	r3, r2
 8005022:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	4313      	orrs	r3, r2
 800502c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	621a      	str	r2, [r3, #32]
}
 8005048:	bf00      	nop
 800504a:	371c      	adds	r7, #28
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr
 8005054:	40012c00 	.word	0x40012c00
 8005058:	40013400 	.word	0x40013400
 800505c:	40014000 	.word	0x40014000
 8005060:	40014400 	.word	0x40014400
 8005064:	40014800 	.word	0x40014800
 8005068:	40015000 	.word	0x40015000

0800506c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800506c:	b480      	push	{r7}
 800506e:	b087      	sub	sp, #28
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	f023 0210 	bic.w	r2, r3, #16
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800509a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800509e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	021b      	lsls	r3, r3, #8
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	f023 0320 	bic.w	r3, r3, #32
 80050ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	011b      	lsls	r3, r3, #4
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a2c      	ldr	r2, [pc, #176]	@ (800517c <TIM_OC2_SetConfig+0x110>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d007      	beq.n	80050e0 <TIM_OC2_SetConfig+0x74>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a2b      	ldr	r2, [pc, #172]	@ (8005180 <TIM_OC2_SetConfig+0x114>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d003      	beq.n	80050e0 <TIM_OC2_SetConfig+0x74>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a2a      	ldr	r2, [pc, #168]	@ (8005184 <TIM_OC2_SetConfig+0x118>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d10d      	bne.n	80050fc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	011b      	lsls	r3, r3, #4
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a1f      	ldr	r2, [pc, #124]	@ (800517c <TIM_OC2_SetConfig+0x110>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d013      	beq.n	800512c <TIM_OC2_SetConfig+0xc0>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a1e      	ldr	r2, [pc, #120]	@ (8005180 <TIM_OC2_SetConfig+0x114>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d00f      	beq.n	800512c <TIM_OC2_SetConfig+0xc0>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a1e      	ldr	r2, [pc, #120]	@ (8005188 <TIM_OC2_SetConfig+0x11c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d00b      	beq.n	800512c <TIM_OC2_SetConfig+0xc0>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a1d      	ldr	r2, [pc, #116]	@ (800518c <TIM_OC2_SetConfig+0x120>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d007      	beq.n	800512c <TIM_OC2_SetConfig+0xc0>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a1c      	ldr	r2, [pc, #112]	@ (8005190 <TIM_OC2_SetConfig+0x124>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d003      	beq.n	800512c <TIM_OC2_SetConfig+0xc0>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a17      	ldr	r2, [pc, #92]	@ (8005184 <TIM_OC2_SetConfig+0x118>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d113      	bne.n	8005154 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005132:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800513a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	4313      	orrs	r3, r2
 8005152:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	621a      	str	r2, [r3, #32]
}
 800516e:	bf00      	nop
 8005170:	371c      	adds	r7, #28
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	40012c00 	.word	0x40012c00
 8005180:	40013400 	.word	0x40013400
 8005184:	40015000 	.word	0x40015000
 8005188:	40014000 	.word	0x40014000
 800518c:	40014400 	.word	0x40014400
 8005190:	40014800 	.word	0x40014800

08005194 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a1b      	ldr	r3, [r3, #32]
 80051a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f023 0303 	bic.w	r3, r3, #3
 80051ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80051e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	021b      	lsls	r3, r3, #8
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a2b      	ldr	r2, [pc, #172]	@ (80052a0 <TIM_OC3_SetConfig+0x10c>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d007      	beq.n	8005206 <TIM_OC3_SetConfig+0x72>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a2a      	ldr	r2, [pc, #168]	@ (80052a4 <TIM_OC3_SetConfig+0x110>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d003      	beq.n	8005206 <TIM_OC3_SetConfig+0x72>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a29      	ldr	r2, [pc, #164]	@ (80052a8 <TIM_OC3_SetConfig+0x114>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d10d      	bne.n	8005222 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800520c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	021b      	lsls	r3, r3, #8
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	4313      	orrs	r3, r2
 8005218:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005220:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a1e      	ldr	r2, [pc, #120]	@ (80052a0 <TIM_OC3_SetConfig+0x10c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d013      	beq.n	8005252 <TIM_OC3_SetConfig+0xbe>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a1d      	ldr	r2, [pc, #116]	@ (80052a4 <TIM_OC3_SetConfig+0x110>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d00f      	beq.n	8005252 <TIM_OC3_SetConfig+0xbe>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a1d      	ldr	r2, [pc, #116]	@ (80052ac <TIM_OC3_SetConfig+0x118>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d00b      	beq.n	8005252 <TIM_OC3_SetConfig+0xbe>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a1c      	ldr	r2, [pc, #112]	@ (80052b0 <TIM_OC3_SetConfig+0x11c>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d007      	beq.n	8005252 <TIM_OC3_SetConfig+0xbe>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a1b      	ldr	r2, [pc, #108]	@ (80052b4 <TIM_OC3_SetConfig+0x120>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d003      	beq.n	8005252 <TIM_OC3_SetConfig+0xbe>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a16      	ldr	r2, [pc, #88]	@ (80052a8 <TIM_OC3_SetConfig+0x114>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d113      	bne.n	800527a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005258:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005260:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	4313      	orrs	r3, r2
 800526c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	011b      	lsls	r3, r3, #4
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	4313      	orrs	r3, r2
 8005278:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	621a      	str	r2, [r3, #32]
}
 8005294:	bf00      	nop
 8005296:	371c      	adds	r7, #28
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	40012c00 	.word	0x40012c00
 80052a4:	40013400 	.word	0x40013400
 80052a8:	40015000 	.word	0x40015000
 80052ac:	40014000 	.word	0x40014000
 80052b0:	40014400 	.word	0x40014400
 80052b4:	40014800 	.word	0x40014800

080052b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b087      	sub	sp, #28
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	021b      	lsls	r3, r3, #8
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005306:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	031b      	lsls	r3, r3, #12
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	4313      	orrs	r3, r2
 8005312:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a1a      	ldr	r2, [pc, #104]	@ (8005380 <TIM_OC4_SetConfig+0xc8>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d013      	beq.n	8005344 <TIM_OC4_SetConfig+0x8c>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a19      	ldr	r2, [pc, #100]	@ (8005384 <TIM_OC4_SetConfig+0xcc>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d00f      	beq.n	8005344 <TIM_OC4_SetConfig+0x8c>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a18      	ldr	r2, [pc, #96]	@ (8005388 <TIM_OC4_SetConfig+0xd0>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d00b      	beq.n	8005344 <TIM_OC4_SetConfig+0x8c>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a17      	ldr	r2, [pc, #92]	@ (800538c <TIM_OC4_SetConfig+0xd4>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d007      	beq.n	8005344 <TIM_OC4_SetConfig+0x8c>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a16      	ldr	r2, [pc, #88]	@ (8005390 <TIM_OC4_SetConfig+0xd8>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d003      	beq.n	8005344 <TIM_OC4_SetConfig+0x8c>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a15      	ldr	r2, [pc, #84]	@ (8005394 <TIM_OC4_SetConfig+0xdc>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d109      	bne.n	8005358 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800534a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	019b      	lsls	r3, r3, #6
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	4313      	orrs	r3, r2
 8005356:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	621a      	str	r2, [r3, #32]
}
 8005372:	bf00      	nop
 8005374:	371c      	adds	r7, #28
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	40012c00 	.word	0x40012c00
 8005384:	40013400 	.word	0x40013400
 8005388:	40014000 	.word	0x40014000
 800538c:	40014400 	.word	0x40014400
 8005390:	40014800 	.word	0x40014800
 8005394:	40015000 	.word	0x40015000

08005398 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005398:	b480      	push	{r7}
 800539a:	b087      	sub	sp, #28
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80053dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	041b      	lsls	r3, r3, #16
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a19      	ldr	r2, [pc, #100]	@ (8005454 <TIM_OC5_SetConfig+0xbc>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d013      	beq.n	800541a <TIM_OC5_SetConfig+0x82>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a18      	ldr	r2, [pc, #96]	@ (8005458 <TIM_OC5_SetConfig+0xc0>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d00f      	beq.n	800541a <TIM_OC5_SetConfig+0x82>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a17      	ldr	r2, [pc, #92]	@ (800545c <TIM_OC5_SetConfig+0xc4>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d00b      	beq.n	800541a <TIM_OC5_SetConfig+0x82>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a16      	ldr	r2, [pc, #88]	@ (8005460 <TIM_OC5_SetConfig+0xc8>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d007      	beq.n	800541a <TIM_OC5_SetConfig+0x82>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a15      	ldr	r2, [pc, #84]	@ (8005464 <TIM_OC5_SetConfig+0xcc>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d003      	beq.n	800541a <TIM_OC5_SetConfig+0x82>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a14      	ldr	r2, [pc, #80]	@ (8005468 <TIM_OC5_SetConfig+0xd0>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d109      	bne.n	800542e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005420:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	021b      	lsls	r3, r3, #8
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	4313      	orrs	r3, r2
 800542c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	621a      	str	r2, [r3, #32]
}
 8005448:	bf00      	nop
 800544a:	371c      	adds	r7, #28
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr
 8005454:	40012c00 	.word	0x40012c00
 8005458:	40013400 	.word	0x40013400
 800545c:	40014000 	.word	0x40014000
 8005460:	40014400 	.word	0x40014400
 8005464:	40014800 	.word	0x40014800
 8005468:	40015000 	.word	0x40015000

0800546c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800546c:	b480      	push	{r7}
 800546e:	b087      	sub	sp, #28
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800549a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800549e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	021b      	lsls	r3, r3, #8
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80054b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	051b      	lsls	r3, r3, #20
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	4313      	orrs	r3, r2
 80054be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a1a      	ldr	r2, [pc, #104]	@ (800552c <TIM_OC6_SetConfig+0xc0>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d013      	beq.n	80054f0 <TIM_OC6_SetConfig+0x84>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a19      	ldr	r2, [pc, #100]	@ (8005530 <TIM_OC6_SetConfig+0xc4>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d00f      	beq.n	80054f0 <TIM_OC6_SetConfig+0x84>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a18      	ldr	r2, [pc, #96]	@ (8005534 <TIM_OC6_SetConfig+0xc8>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d00b      	beq.n	80054f0 <TIM_OC6_SetConfig+0x84>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a17      	ldr	r2, [pc, #92]	@ (8005538 <TIM_OC6_SetConfig+0xcc>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d007      	beq.n	80054f0 <TIM_OC6_SetConfig+0x84>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a16      	ldr	r2, [pc, #88]	@ (800553c <TIM_OC6_SetConfig+0xd0>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d003      	beq.n	80054f0 <TIM_OC6_SetConfig+0x84>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a15      	ldr	r2, [pc, #84]	@ (8005540 <TIM_OC6_SetConfig+0xd4>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d109      	bne.n	8005504 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	029b      	lsls	r3, r3, #10
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	4313      	orrs	r3, r2
 8005502:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	621a      	str	r2, [r3, #32]
}
 800551e:	bf00      	nop
 8005520:	371c      	adds	r7, #28
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	40012c00 	.word	0x40012c00
 8005530:	40013400 	.word	0x40013400
 8005534:	40014000 	.word	0x40014000
 8005538:	40014400 	.word	0x40014400
 800553c:	40014800 	.word	0x40014800
 8005540:	40015000 	.word	0x40015000

08005544 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005544:	b480      	push	{r7}
 8005546:	b087      	sub	sp, #28
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	f023 0201 	bic.w	r2, r3, #1
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800556e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	4313      	orrs	r3, r2
 8005578:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f023 030a 	bic.w	r3, r3, #10
 8005580:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	4313      	orrs	r3, r2
 8005588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	621a      	str	r2, [r3, #32]
}
 8005596:	bf00      	nop
 8005598:	371c      	adds	r7, #28
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b087      	sub	sp, #28
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	60f8      	str	r0, [r7, #12]
 80055aa:	60b9      	str	r1, [r7, #8]
 80055ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	f023 0210 	bic.w	r2, r3, #16
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	031b      	lsls	r3, r3, #12
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80055de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	621a      	str	r2, [r3, #32]
}
 80055f6:	bf00      	nop
 80055f8:	371c      	adds	r7, #28
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005602:	b480      	push	{r7}
 8005604:	b085      	sub	sp, #20
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005618:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4313      	orrs	r3, r2
 8005620:	f043 0307 	orr.w	r3, r3, #7
 8005624:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	609a      	str	r2, [r3, #8]
}
 800562c:	bf00      	nop
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005638:	b480      	push	{r7}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
 8005644:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005652:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	021a      	lsls	r2, r3, #8
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	431a      	orrs	r2, r3
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	4313      	orrs	r3, r2
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	4313      	orrs	r3, r2
 8005664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	609a      	str	r2, [r3, #8]
}
 800566c:	bf00      	nop
 800566e:	371c      	adds	r7, #28
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005678:	b480      	push	{r7}
 800567a:	b087      	sub	sp, #28
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f003 031f 	and.w	r3, r3, #31
 800568a:	2201      	movs	r2, #1
 800568c:	fa02 f303 	lsl.w	r3, r2, r3
 8005690:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6a1a      	ldr	r2, [r3, #32]
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	43db      	mvns	r3, r3
 800569a:	401a      	ands	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6a1a      	ldr	r2, [r3, #32]
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	f003 031f 	and.w	r3, r3, #31
 80056aa:	6879      	ldr	r1, [r7, #4]
 80056ac:	fa01 f303 	lsl.w	r3, r1, r3
 80056b0:	431a      	orrs	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	621a      	str	r2, [r3, #32]
}
 80056b6:	bf00      	nop
 80056b8:	371c      	adds	r7, #28
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
	...

080056c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d101      	bne.n	80056dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056d8:	2302      	movs	r3, #2
 80056da:	e06d      	b.n	80057b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a30      	ldr	r2, [pc, #192]	@ (80057c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d009      	beq.n	800571a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a2f      	ldr	r2, [pc, #188]	@ (80057c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d004      	beq.n	800571a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a2d      	ldr	r2, [pc, #180]	@ (80057cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d108      	bne.n	800572c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005720:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	4313      	orrs	r3, r2
 800572a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005732:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	4313      	orrs	r3, r2
 800573c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a1e      	ldr	r2, [pc, #120]	@ (80057c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d01d      	beq.n	800578c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005758:	d018      	beq.n	800578c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a1c      	ldr	r2, [pc, #112]	@ (80057d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d013      	beq.n	800578c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a1a      	ldr	r2, [pc, #104]	@ (80057d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d00e      	beq.n	800578c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a15      	ldr	r2, [pc, #84]	@ (80057c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d009      	beq.n	800578c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a16      	ldr	r2, [pc, #88]	@ (80057d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d004      	beq.n	800578c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a11      	ldr	r2, [pc, #68]	@ (80057cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d10c      	bne.n	80057a6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005792:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	4313      	orrs	r3, r2
 800579c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3714      	adds	r7, #20
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr
 80057c4:	40012c00 	.word	0x40012c00
 80057c8:	40013400 	.word	0x40013400
 80057cc:	40015000 	.word	0x40015000
 80057d0:	40000400 	.word	0x40000400
 80057d4:	40000800 	.word	0x40000800
 80057d8:	40014000 	.word	0x40014000

080057dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80057e6:	2300      	movs	r3, #0
 80057e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d101      	bne.n	80057f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80057f4:	2302      	movs	r3, #2
 80057f6:	e06a      	b.n	80058ce <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	4313      	orrs	r3, r2
 800580c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	4313      	orrs	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	4313      	orrs	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4313      	orrs	r3, r2
 8005836:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	4313      	orrs	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	4313      	orrs	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800585e:	4313      	orrs	r3, r2
 8005860:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	041b      	lsls	r3, r3, #16
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a19      	ldr	r2, [pc, #100]	@ (80058dc <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d009      	beq.n	8005890 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a17      	ldr	r2, [pc, #92]	@ (80058e0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d004      	beq.n	8005890 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a16      	ldr	r2, [pc, #88]	@ (80058e4 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d115      	bne.n	80058bc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800589a:	051b      	lsls	r3, r3, #20
 800589c:	4313      	orrs	r3, r2
 800589e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	40012c00 	.word	0x40012c00
 80058e0:	40013400 	.word	0x40013400
 80058e4:	40015000 	.word	0x40015000

080058e8 <memset>:
 80058e8:	4402      	add	r2, r0
 80058ea:	4603      	mov	r3, r0
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d100      	bne.n	80058f2 <memset+0xa>
 80058f0:	4770      	bx	lr
 80058f2:	f803 1b01 	strb.w	r1, [r3], #1
 80058f6:	e7f9      	b.n	80058ec <memset+0x4>

080058f8 <__libc_init_array>:
 80058f8:	b570      	push	{r4, r5, r6, lr}
 80058fa:	4d0d      	ldr	r5, [pc, #52]	@ (8005930 <__libc_init_array+0x38>)
 80058fc:	4c0d      	ldr	r4, [pc, #52]	@ (8005934 <__libc_init_array+0x3c>)
 80058fe:	1b64      	subs	r4, r4, r5
 8005900:	10a4      	asrs	r4, r4, #2
 8005902:	2600      	movs	r6, #0
 8005904:	42a6      	cmp	r6, r4
 8005906:	d109      	bne.n	800591c <__libc_init_array+0x24>
 8005908:	4d0b      	ldr	r5, [pc, #44]	@ (8005938 <__libc_init_array+0x40>)
 800590a:	4c0c      	ldr	r4, [pc, #48]	@ (800593c <__libc_init_array+0x44>)
 800590c:	f000 f818 	bl	8005940 <_init>
 8005910:	1b64      	subs	r4, r4, r5
 8005912:	10a4      	asrs	r4, r4, #2
 8005914:	2600      	movs	r6, #0
 8005916:	42a6      	cmp	r6, r4
 8005918:	d105      	bne.n	8005926 <__libc_init_array+0x2e>
 800591a:	bd70      	pop	{r4, r5, r6, pc}
 800591c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005920:	4798      	blx	r3
 8005922:	3601      	adds	r6, #1
 8005924:	e7ee      	b.n	8005904 <__libc_init_array+0xc>
 8005926:	f855 3b04 	ldr.w	r3, [r5], #4
 800592a:	4798      	blx	r3
 800592c:	3601      	adds	r6, #1
 800592e:	e7f2      	b.n	8005916 <__libc_init_array+0x1e>
 8005930:	08005988 	.word	0x08005988
 8005934:	08005988 	.word	0x08005988
 8005938:	08005988 	.word	0x08005988
 800593c:	0800598c 	.word	0x0800598c

08005940 <_init>:
 8005940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005942:	bf00      	nop
 8005944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005946:	bc08      	pop	{r3}
 8005948:	469e      	mov	lr, r3
 800594a:	4770      	bx	lr

0800594c <_fini>:
 800594c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594e:	bf00      	nop
 8005950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005952:	bc08      	pop	{r3}
 8005954:	469e      	mov	lr, r3
 8005956:	4770      	bx	lr
