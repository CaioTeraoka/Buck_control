
Buck_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057f4  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800598c  0800598c  0000698c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059bc  080059bc  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080059bc  080059bc  0000700c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080059bc  080059bc  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059bc  080059bc  000069bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059c0  080059c0  000069c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080059c4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000700c  2**0
                  CONTENTS
 10 .bss          00000184  2000000c  2000000c  0000700c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000190  20000190  0000700c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cc1b  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f5f  00000000  00000000  00013c57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb0  00000000  00000000  00015bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009d4  00000000  00000000  00016868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020524  00000000  00000000  0001723c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010287  00000000  00000000  00037760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cac39  00000000  00000000  000479e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00112620  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003674  00000000  00000000  00112664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  00115cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005974 	.word	0x08005974

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08005974 	.word	0x08005974

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	Buck.setPoint = BUCK_SETPOINT;
 8000a18:	4b28      	ldr	r3, [pc, #160]	@ (8000abc <main+0xa8>)
 8000a1a:	4a29      	ldr	r2, [pc, #164]	@ (8000ac0 <main+0xac>)
 8000a1c:	609a      	str	r2, [r3, #8]
	PID_Init(&pid, 1, 1, 1, 12, 0, 100);
 8000a1e:	eddf 2a29 	vldr	s5, [pc, #164]	@ 8000ac4 <main+0xb0>
 8000a22:	ed9f 2a29 	vldr	s4, [pc, #164]	@ 8000ac8 <main+0xb4>
 8000a26:	eef2 1a08 	vmov.f32	s3, #40	@ 0x41400000  12.0
 8000a2a:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8000a2e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8000a32:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000a36:	4825      	ldr	r0, [pc, #148]	@ (8000acc <main+0xb8>)
 8000a38:	f000 fabe 	bl	8000fb8 <PID_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3c:	f000 fd44 	bl	80014c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a40:	f000 f854 	bl	8000aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a44:	f000 fa4e 	bl	8000ee4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a48:	f000 fa2e 	bl	8000ea8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000a4c:	f000 f8b2 	bl	8000bb4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000a50:	f000 f930 	bl	8000cb4 <MX_TIM3_Init>
  MX_TIM15_Init();
 8000a54:	f000 f9a4 	bl	8000da0 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000a58:	210c      	movs	r1, #12
 8000a5a:	481d      	ldr	r0, [pc, #116]	@ (8000ad0 <main+0xbc>)
 8000a5c:	f003 fef2 	bl	8004844 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000a60:	2100      	movs	r1, #0
 8000a62:	481c      	ldr	r0, [pc, #112]	@ (8000ad4 <main+0xc0>)
 8000a64:	f003 feee 	bl	8004844 <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) internalAdcRawData, 2);
 8000a68:	2202      	movs	r2, #2
 8000a6a:	491b      	ldr	r1, [pc, #108]	@ (8000ad8 <main+0xc4>)
 8000a6c:	481b      	ldr	r0, [pc, #108]	@ (8000adc <main+0xc8>)
 8000a6e:	f000 ffc3 	bl	80019f8 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  dutyCycle = PID_run(&pid, Buck.Vout, 0.1);
 8000a72:	4b12      	ldr	r3, [pc, #72]	@ (8000abc <main+0xa8>)
 8000a74:	edd3 7a00 	vldr	s15, [r3]
 8000a78:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8000ae0 <main+0xcc>
 8000a7c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a80:	4812      	ldr	r0, [pc, #72]	@ (8000acc <main+0xb8>)
 8000a82:	f000 facd 	bl	8001020 <PID_run>
 8000a86:	eef0 7a40 	vmov.f32	s15, s0
 8000a8a:	4b16      	ldr	r3, [pc, #88]	@ (8000ae4 <main+0xd0>)
 8000a8c:	edc3 7a00 	vstr	s15, [r3]
	  TIM3->CCR1 = (uint32_t) (htim3.Init.Period * dutyCycle);
 8000a90:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad0 <main+0xbc>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	ee07 3a90 	vmov	s15, r3
 8000a98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <main+0xd0>)
 8000a9e:	edd3 7a00 	vldr	s15, [r3]
 8000aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aa6:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <main+0xd4>)
 8000aa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000aac:	ee17 2a90 	vmov	r2, s15
 8000ab0:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_Delay(100);
 8000ab2:	2064      	movs	r0, #100	@ 0x64
 8000ab4:	f000 fd6e 	bl	8001594 <HAL_Delay>
	  dutyCycle = PID_run(&pid, Buck.Vout, 0.1);
 8000ab8:	bf00      	nop
 8000aba:	e7da      	b.n	8000a72 <main+0x5e>
 8000abc:	20000178 	.word	0x20000178
 8000ac0:	40a00000 	.word	0x40a00000
 8000ac4:	42c80000 	.word	0x42c80000
 8000ac8:	00000000 	.word	0x00000000
 8000acc:	20000154 	.word	0x20000154
 8000ad0:	200000bc 	.word	0x200000bc
 8000ad4:	20000108 	.word	0x20000108
 8000ad8:	20000184 	.word	0x20000184
 8000adc:	20000028 	.word	0x20000028
 8000ae0:	3dcccccd 	.word	0x3dcccccd
 8000ae4:	20000188 	.word	0x20000188
 8000ae8:	40000400 	.word	0x40000400

08000aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b0a6      	sub	sp, #152	@ 0x98
 8000af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000af6:	2228      	movs	r2, #40	@ 0x28
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f004 ff0e 	bl	800591c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b00:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2258      	movs	r2, #88	@ 0x58
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f004 ff00 	bl	800591c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b20:	2301      	movs	r3, #1
 8000b22:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b24:	2310      	movs	r3, #16
 8000b26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b44:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f002 f9cb 	bl	8002ee4 <HAL_RCC_OscConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000b54:	f000 fb1d 	bl	8001192 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b58:	230f      	movs	r3, #15
 8000b5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b6c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f003 f9da 	bl	8003f2c <HAL_RCC_ClockConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b7e:	f000 fb08 	bl	8001192 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM15|RCC_PERIPHCLK_ADC12
 8000b82:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb0 <SystemClock_Config+0xc4>)
 8000b84:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000b86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000b90:	2300      	movs	r3, #0
 8000b92:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	4618      	mov	r0, r3
 8000b98:	f003 fb8a 	bl	80042b0 <HAL_RCCEx_PeriphCLKConfig>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000ba2:	f000 faf6 	bl	8001192 <Error_Handler>
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	3798      	adds	r7, #152	@ 0x98
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	00600080 	.word	0x00600080

08000bb4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08a      	sub	sp, #40	@ 0x28
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
 8000bd4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bd6:	4b36      	ldr	r3, [pc, #216]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000bd8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000bdc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bde:	4b34      	ldr	r3, [pc, #208]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000be4:	4b32      	ldr	r3, [pc, #200]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bea:	4b31      	ldr	r3, [pc, #196]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bf0:	4b2f      	ldr	r3, [pc, #188]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bf6:	4b2e      	ldr	r3, [pc, #184]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000bfe:	4b2c      	ldr	r3, [pc, #176]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000c00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c04:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 8000c06:	4b2a      	ldr	r3, [pc, #168]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000c08:	f44f 7260 	mov.w	r2, #896	@ 0x380
 8000c0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c0e:	4b28      	ldr	r3, [pc, #160]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000c14:	4b26      	ldr	r3, [pc, #152]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000c16:	2202      	movs	r2, #2
 8000c18:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000c1a:	4b25      	ldr	r3, [pc, #148]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c22:	4b23      	ldr	r3, [pc, #140]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000c24:	2204      	movs	r2, #4
 8000c26:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c28:	4b21      	ldr	r3, [pc, #132]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c2e:	4b20      	ldr	r3, [pc, #128]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c34:	481e      	ldr	r0, [pc, #120]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000c36:	f000 fce5 	bl	8001604 <HAL_ADC_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c40:	f000 faa7 	bl	8001192 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c48:	f107 031c 	add.w	r3, r7, #28
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4818      	ldr	r0, [pc, #96]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000c50:	f001 fad8 	bl	8002204 <HAL_ADCEx_MultiModeConfigChannel>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000c5a:	f000 fa9a 	bl	8001192 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c62:	2301      	movs	r3, #1
 8000c64:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480d      	ldr	r0, [pc, #52]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000c7c:	f000 ffd8 	bl	8001c30 <HAL_ADC_ConfigChannel>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8000c86:	f000 fa84 	bl	8001192 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c8a:	2307      	movs	r3, #7
 8000c8c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	4619      	mov	r1, r3
 8000c96:	4806      	ldr	r0, [pc, #24]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000c98:	f000 ffca 	bl	8001c30 <HAL_ADC_ConfigChannel>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 8000ca2:	f000 fa76 	bl	8001192 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	3728      	adds	r7, #40	@ 0x28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000028 	.word	0x20000028

08000cb4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08e      	sub	sp, #56	@ 0x38
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc8:	f107 031c 	add.w	r3, r7, #28
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	611a      	str	r2, [r3, #16]
 8000ce2:	615a      	str	r2, [r3, #20]
 8000ce4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ce6:	4b2c      	ldr	r3, [pc, #176]	@ (8000d98 <MX_TIM3_Init+0xe4>)
 8000ce8:	4a2c      	ldr	r2, [pc, #176]	@ (8000d9c <MX_TIM3_Init+0xe8>)
 8000cea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 8000cec:	4b2a      	ldr	r3, [pc, #168]	@ (8000d98 <MX_TIM3_Init+0xe4>)
 8000cee:	2203      	movs	r2, #3
 8000cf0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf2:	4b29      	ldr	r3, [pc, #164]	@ (8000d98 <MX_TIM3_Init+0xe4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000cf8:	4b27      	ldr	r3, [pc, #156]	@ (8000d98 <MX_TIM3_Init+0xe4>)
 8000cfa:	2263      	movs	r2, #99	@ 0x63
 8000cfc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cfe:	4b26      	ldr	r3, [pc, #152]	@ (8000d98 <MX_TIM3_Init+0xe4>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d04:	4b24      	ldr	r3, [pc, #144]	@ (8000d98 <MX_TIM3_Init+0xe4>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d0a:	4823      	ldr	r0, [pc, #140]	@ (8000d98 <MX_TIM3_Init+0xe4>)
 8000d0c:	f003 fcec 	bl	80046e8 <HAL_TIM_Base_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000d16:	f000 fa3c 	bl	8001192 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d24:	4619      	mov	r1, r3
 8000d26:	481c      	ldr	r0, [pc, #112]	@ (8000d98 <MX_TIM3_Init+0xe4>)
 8000d28:	f003 ffac 	bl	8004c84 <HAL_TIM_ConfigClockSource>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000d32:	f000 fa2e 	bl	8001192 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d36:	4818      	ldr	r0, [pc, #96]	@ (8000d98 <MX_TIM3_Init+0xe4>)
 8000d38:	f003 fd2d 	bl	8004796 <HAL_TIM_PWM_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d42:	f000 fa26 	bl	8001192 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d4e:	f107 031c 	add.w	r3, r7, #28
 8000d52:	4619      	mov	r1, r3
 8000d54:	4810      	ldr	r0, [pc, #64]	@ (8000d98 <MX_TIM3_Init+0xe4>)
 8000d56:	f004 fccf 	bl	80056f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000d60:	f000 fa17 	bl	8001192 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d64:	2360      	movs	r3, #96	@ 0x60
 8000d66:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d74:	463b      	mov	r3, r7
 8000d76:	220c      	movs	r2, #12
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4807      	ldr	r0, [pc, #28]	@ (8000d98 <MX_TIM3_Init+0xe4>)
 8000d7c:	f003 fe6e 	bl	8004a5c <HAL_TIM_PWM_ConfigChannel>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000d86:	f000 fa04 	bl	8001192 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d8a:	4803      	ldr	r0, [pc, #12]	@ (8000d98 <MX_TIM3_Init+0xe4>)
 8000d8c:	f000 faee 	bl	800136c <HAL_TIM_MspPostInit>

}
 8000d90:	bf00      	nop
 8000d92:	3738      	adds	r7, #56	@ 0x38
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	200000bc 	.word	0x200000bc
 8000d9c:	40000400 	.word	0x40000400

08000da0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b096      	sub	sp, #88	@ 0x58
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000db2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
 8000dc0:	611a      	str	r2, [r3, #16]
 8000dc2:	615a      	str	r2, [r3, #20]
 8000dc4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	222c      	movs	r2, #44	@ 0x2c
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f004 fda5 	bl	800591c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000dd2:	4b33      	ldr	r3, [pc, #204]	@ (8000ea0 <MX_TIM15_Init+0x100>)
 8000dd4:	4a33      	ldr	r2, [pc, #204]	@ (8000ea4 <MX_TIM15_Init+0x104>)
 8000dd6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 8;
 8000dd8:	4b31      	ldr	r3, [pc, #196]	@ (8000ea0 <MX_TIM15_Init+0x100>)
 8000dda:	2208      	movs	r2, #8
 8000ddc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dde:	4b30      	ldr	r3, [pc, #192]	@ (8000ea0 <MX_TIM15_Init+0x100>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1000;
 8000de4:	4b2e      	ldr	r3, [pc, #184]	@ (8000ea0 <MX_TIM15_Init+0x100>)
 8000de6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000dea:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dec:	4b2c      	ldr	r3, [pc, #176]	@ (8000ea0 <MX_TIM15_Init+0x100>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000df2:	4b2b      	ldr	r3, [pc, #172]	@ (8000ea0 <MX_TIM15_Init+0x100>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df8:	4b29      	ldr	r3, [pc, #164]	@ (8000ea0 <MX_TIM15_Init+0x100>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000dfe:	4828      	ldr	r0, [pc, #160]	@ (8000ea0 <MX_TIM15_Init+0x100>)
 8000e00:	f003 fcc9 	bl	8004796 <HAL_TIM_PWM_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000e0a:	f000 f9c2 	bl	8001192 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e0e:	2320      	movs	r3, #32
 8000e10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000e16:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4820      	ldr	r0, [pc, #128]	@ (8000ea0 <MX_TIM15_Init+0x100>)
 8000e1e:	f004 fc6b 	bl	80056f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000e28:	f000 f9b3 	bl	8001192 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e2c:	2360      	movs	r3, #96	@ 0x60
 8000e2e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e34:	2300      	movs	r3, #0
 8000e36:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e40:	2300      	movs	r3, #0
 8000e42:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e44:	2300      	movs	r3, #0
 8000e46:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e48:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4813      	ldr	r0, [pc, #76]	@ (8000ea0 <MX_TIM15_Init+0x100>)
 8000e52:	f003 fe03 	bl	8004a5c <HAL_TIM_PWM_ConfigChannel>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000e5c:	f000 f999 	bl	8001192 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e78:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	4619      	mov	r1, r3
 8000e86:	4806      	ldr	r0, [pc, #24]	@ (8000ea0 <MX_TIM15_Init+0x100>)
 8000e88:	f004 fcc2 	bl	8005810 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8000e92:	f000 f97e 	bl	8001192 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	3758      	adds	r7, #88	@ 0x58
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000108 	.word	0x20000108
 8000ea4:	40014000 	.word	0x40014000

08000ea8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee0 <MX_DMA_Init+0x38>)
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	4a0b      	ldr	r2, [pc, #44]	@ (8000ee0 <MX_DMA_Init+0x38>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6153      	str	r3, [r2, #20]
 8000eba:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <MX_DMA_Init+0x38>)
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2100      	movs	r1, #0
 8000eca:	200b      	movs	r0, #11
 8000ecc:	f001 fc97 	bl	80027fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ed0:	200b      	movs	r0, #11
 8000ed2:	f001 fcb0 	bl	8002836 <HAL_NVIC_EnableIRQ>

}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eea:	4b0f      	ldr	r3, [pc, #60]	@ (8000f28 <MX_GPIO_Init+0x44>)
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	4a0e      	ldr	r2, [pc, #56]	@ (8000f28 <MX_GPIO_Init+0x44>)
 8000ef0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ef4:	6153      	str	r3, [r2, #20]
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f28 <MX_GPIO_Init+0x44>)
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	4b09      	ldr	r3, [pc, #36]	@ (8000f28 <MX_GPIO_Init+0x44>)
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	4a08      	ldr	r2, [pc, #32]	@ (8000f28 <MX_GPIO_Init+0x44>)
 8000f08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f0c:	6153      	str	r3, [r2, #20]
 8000f0e:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <MX_GPIO_Init+0x44>)
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f16:	603b      	str	r3, [r7, #0]
 8000f18:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	00000000 	.word	0x00000000

08000f30 <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN 4 */
/**
 * @brief Internal ADC Conversion Complete callback
 * @retval None
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	Buck.Vout = internalAdcRawData[0] * VOUT_SCALE;
 8000f38:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb0 <HAL_ADC_ConvCpltCallback+0x80>)
 8000f3a:	881b      	ldrh	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4613      	mov	r3, r2
 8000f40:	015b      	lsls	r3, r3, #5
 8000f42:	4413      	add	r3, r2
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	da01      	bge.n	8000f4c <HAL_ADC_ConvCpltCallback+0x1c>
 8000f48:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000f4c:	131b      	asrs	r3, r3, #12
 8000f4e:	ee07 3a90 	vmov	s15, r3
 8000f52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f56:	4b17      	ldr	r3, [pc, #92]	@ (8000fb4 <HAL_ADC_ConvCpltCallback+0x84>)
 8000f58:	edc3 7a00 	vstr	s15, [r3]
	Buck.IL = internalAdcRawData[1] * IL_SCALE;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	@ (8000fb0 <HAL_ADC_ConvCpltCallback+0x80>)
 8000f5e:	885b      	ldrh	r3, [r3, #2]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fa8b 	bl	800047c <__aeabi_i2d>
 8000f66:	a30e      	add	r3, pc, #56	@ (adr r3, 8000fa0 <HAL_ADC_ConvCpltCallback+0x70>)
 8000f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6c:	f7ff faf0 	bl	8000550 <__aeabi_dmul>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	4610      	mov	r0, r2
 8000f76:	4619      	mov	r1, r3
 8000f78:	a30b      	add	r3, pc, #44	@ (adr r3, 8000fa8 <HAL_ADC_ConvCpltCallback+0x78>)
 8000f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7e:	f7ff fc11 	bl	80007a4 <__aeabi_ddiv>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	4610      	mov	r0, r2
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f7ff fcf3 	bl	8000974 <__aeabi_d2f>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	4a08      	ldr	r2, [pc, #32]	@ (8000fb4 <HAL_ADC_ConvCpltCallback+0x84>)
 8000f92:	6053      	str	r3, [r2, #4]
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	f3af 8000 	nop.w
 8000fa0:	66666666 	.word	0x66666666
 8000fa4:	400a6666 	.word	0x400a6666
 8000fa8:	9999999a 	.word	0x9999999a
 8000fac:	40a19999 	.word	0x40a19999
 8000fb0:	20000184 	.word	0x20000184
 8000fb4:	20000178 	.word	0x20000178

08000fb8 <PID_Init>:


void PID_Init(PID *pid, float Kp, float Ki, float Kd, float setpoint, float min_output, float max_output) {
 8000fb8:	b480      	push	{r7}
 8000fba:	b089      	sub	sp, #36	@ 0x24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	61f8      	str	r0, [r7, #28]
 8000fc0:	ed87 0a06 	vstr	s0, [r7, #24]
 8000fc4:	edc7 0a05 	vstr	s1, [r7, #20]
 8000fc8:	ed87 1a04 	vstr	s2, [r7, #16]
 8000fcc:	edc7 1a03 	vstr	s3, [r7, #12]
 8000fd0:	ed87 2a02 	vstr	s4, [r7, #8]
 8000fd4:	edc7 2a01 	vstr	s5, [r7, #4]
    pid->Kp = Kp;
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	697a      	ldr	r2, [r7, #20]
 8000fe2:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	609a      	str	r2, [r3, #8]
    pid->setpoint = setpoint;
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	68fa      	ldr	r2, [r7, #12]
 8000fee:	60da      	str	r2, [r3, #12]
    pid->integral = 0.0f;
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f04f 0200 	mov.w	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
    pid->prev_error = 0.0f;
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f04f 0200 	mov.w	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
    pid->output = 0.0f;
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	f04f 0200 	mov.w	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
    pid->min_output = min_output;
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	61da      	str	r2, [r3, #28]
	pid->max_output = max_output;
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	621a      	str	r2, [r3, #32]
}
 8001014:	bf00      	nop
 8001016:	3724      	adds	r7, #36	@ 0x24
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <PID_run>:

float PID_run(PID *pid, float measured_value, float dt)
{
 8001020:	b480      	push	{r7}
 8001022:	b089      	sub	sp, #36	@ 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	ed87 0a02 	vstr	s0, [r7, #8]
 800102c:	edc7 0a01 	vstr	s1, [r7, #4]
	float error = pid->setpoint - measured_value;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	ed93 7a03 	vldr	s14, [r3, #12]
 8001036:	edd7 7a02 	vldr	s15, [r7, #8]
 800103a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800103e:	edc7 7a07 	vstr	s15, [r7, #28]
	pid->integral += error * dt;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	ed93 7a04 	vldr	s14, [r3, #16]
 8001048:	edd7 6a07 	vldr	s13, [r7, #28]
 800104c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001050:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001054:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	edc3 7a04 	vstr	s15, [r3, #16]

	 // Limita integral com base nos limites de saída e ganho Ki
	float max_integral = pid->max_output / (pid->Ki > 0.0f ? pid->Ki : 1.0f);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	edd3 6a08 	vldr	s13, [r3, #32]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	edd3 7a01 	vldr	s15, [r3, #4]
 800106a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800106e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001072:	dd03      	ble.n	800107c <PID_run+0x5c>
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	edd3 7a01 	vldr	s15, [r3, #4]
 800107a:	e001      	b.n	8001080 <PID_run+0x60>
 800107c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001080:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001084:	ed87 7a06 	vstr	s14, [r7, #24]
	float min_integral = pid->min_output / (pid->Ki > 0.0f ? pid->Ki : 1.0f);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	edd3 6a07 	vldr	s13, [r3, #28]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	edd3 7a01 	vldr	s15, [r3, #4]
 8001094:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109c:	dd03      	ble.n	80010a6 <PID_run+0x86>
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80010a4:	e001      	b.n	80010aa <PID_run+0x8a>
 80010a6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80010aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80010ae:	ed87 7a05 	vstr	s14, [r7, #20]
	if (pid->integral > max_integral) pid->integral = max_integral;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80010b8:	ed97 7a06 	vldr	s14, [r7, #24]
 80010bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c4:	d502      	bpl.n	80010cc <PID_run+0xac>
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	611a      	str	r2, [r3, #16]
	if (pid->integral < min_integral) pid->integral = min_integral;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	edd3 7a04 	vldr	s15, [r3, #16]
 80010d2:	ed97 7a05 	vldr	s14, [r7, #20]
 80010d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010de:	dd02      	ble.n	80010e6 <PID_run+0xc6>
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	611a      	str	r2, [r3, #16]

	float derivative = (error - pid->prev_error) / dt;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	edd3 7a05 	vldr	s15, [r3, #20]
 80010ec:	ed97 7a07 	vldr	s14, [r7, #28]
 80010f0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80010f4:	ed97 7a01 	vldr	s14, [r7, #4]
 80010f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010fc:	edc7 7a04 	vstr	s15, [r7, #16]

	pid->output = pid->Kp * error + pid->Ki * pid->integral + pid->Kd * derivative;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	ed93 7a00 	vldr	s14, [r3]
 8001106:	edd7 7a07 	vldr	s15, [r7, #28]
 800110a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	edd3 6a01 	vldr	s13, [r3, #4]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	edd3 7a04 	vldr	s15, [r3, #16]
 800111a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800111e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	edd3 6a02 	vldr	s13, [r3, #8]
 8001128:	edd7 7a04 	vldr	s15, [r7, #16]
 800112c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	edc3 7a06 	vstr	s15, [r3, #24]

	// Limita a saída usando os valores da struct
	if (pid->output > pid->max_output) pid->output = pid->max_output;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	edd3 7a08 	vldr	s15, [r3, #32]
 8001146:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800114a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114e:	dd03      	ble.n	8001158 <PID_run+0x138>
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	6a1a      	ldr	r2, [r3, #32]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	619a      	str	r2, [r3, #24]
	if (pid->output < pid->min_output) pid->output = pid->min_output;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	ed93 7a06 	vldr	s14, [r3, #24]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	edd3 7a07 	vldr	s15, [r3, #28]
 8001164:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116c:	d503      	bpl.n	8001176 <PID_run+0x156>
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	69da      	ldr	r2, [r3, #28]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	619a      	str	r2, [r3, #24]

	pid->prev_error = error;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	69fa      	ldr	r2, [r7, #28]
 800117a:	615a      	str	r2, [r3, #20]

	return pid->output;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	ee07 3a90 	vmov	s15, r3
}
 8001184:	eeb0 0a67 	vmov.f32	s0, s15
 8001188:	3724      	adds	r7, #36	@ 0x24
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001196:	b672      	cpsid	i
}
 8001198:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800119a:	bf00      	nop
 800119c:	e7fd      	b.n	800119a <Error_Handler+0x8>
	...

080011a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a6:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <HAL_MspInit+0x44>)
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	4a0e      	ldr	r2, [pc, #56]	@ (80011e4 <HAL_MspInit+0x44>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6193      	str	r3, [r2, #24]
 80011b2:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <HAL_MspInit+0x44>)
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <HAL_MspInit+0x44>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	4a08      	ldr	r2, [pc, #32]	@ (80011e4 <HAL_MspInit+0x44>)
 80011c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011c8:	61d3      	str	r3, [r2, #28]
 80011ca:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <HAL_MspInit+0x44>)
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d2:	603b      	str	r3, [r7, #0]
 80011d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40021000 	.word	0x40021000

080011e8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	@ 0x28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001208:	d164      	bne.n	80012d4 <HAL_ADC_MspInit+0xec>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800120a:	4b34      	ldr	r3, [pc, #208]	@ (80012dc <HAL_ADC_MspInit+0xf4>)
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	4a33      	ldr	r2, [pc, #204]	@ (80012dc <HAL_ADC_MspInit+0xf4>)
 8001210:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001214:	6153      	str	r3, [r2, #20]
 8001216:	4b31      	ldr	r3, [pc, #196]	@ (80012dc <HAL_ADC_MspInit+0xf4>)
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001222:	4b2e      	ldr	r3, [pc, #184]	@ (80012dc <HAL_ADC_MspInit+0xf4>)
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	4a2d      	ldr	r2, [pc, #180]	@ (80012dc <HAL_ADC_MspInit+0xf4>)
 8001228:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800122c:	6153      	str	r3, [r2, #20]
 800122e:	4b2b      	ldr	r3, [pc, #172]	@ (80012dc <HAL_ADC_MspInit+0xf4>)
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	4b28      	ldr	r3, [pc, #160]	@ (80012dc <HAL_ADC_MspInit+0xf4>)
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	4a27      	ldr	r2, [pc, #156]	@ (80012dc <HAL_ADC_MspInit+0xf4>)
 8001240:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001244:	6153      	str	r3, [r2, #20]
 8001246:	4b25      	ldr	r3, [pc, #148]	@ (80012dc <HAL_ADC_MspInit+0xf4>)
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN7
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001252:	2302      	movs	r3, #2
 8001254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001256:	2303      	movs	r3, #3
 8001258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	481e      	ldr	r0, [pc, #120]	@ (80012e0 <HAL_ADC_MspInit+0xf8>)
 8001266:	f001 fcb3 	bl	8002bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800126a:	2301      	movs	r3, #1
 800126c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800126e:	2303      	movs	r3, #3
 8001270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001280:	f001 fca6 	bl	8002bd0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001284:	4b17      	ldr	r3, [pc, #92]	@ (80012e4 <HAL_ADC_MspInit+0xfc>)
 8001286:	4a18      	ldr	r2, [pc, #96]	@ (80012e8 <HAL_ADC_MspInit+0x100>)
 8001288:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800128a:	4b16      	ldr	r3, [pc, #88]	@ (80012e4 <HAL_ADC_MspInit+0xfc>)
 800128c:	2200      	movs	r2, #0
 800128e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001290:	4b14      	ldr	r3, [pc, #80]	@ (80012e4 <HAL_ADC_MspInit+0xfc>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001296:	4b13      	ldr	r3, [pc, #76]	@ (80012e4 <HAL_ADC_MspInit+0xfc>)
 8001298:	2280      	movs	r2, #128	@ 0x80
 800129a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800129c:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <HAL_ADC_MspInit+0xfc>)
 800129e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012a2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	@ (80012e4 <HAL_ADC_MspInit+0xfc>)
 80012a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012aa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012ac:	4b0d      	ldr	r3, [pc, #52]	@ (80012e4 <HAL_ADC_MspInit+0xfc>)
 80012ae:	2220      	movs	r2, #32
 80012b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012b2:	4b0c      	ldr	r3, [pc, #48]	@ (80012e4 <HAL_ADC_MspInit+0xfc>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012b8:	480a      	ldr	r0, [pc, #40]	@ (80012e4 <HAL_ADC_MspInit+0xfc>)
 80012ba:	f001 fad6 	bl	800286a <HAL_DMA_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <HAL_ADC_MspInit+0xe0>
    {
      Error_Handler();
 80012c4:	f7ff ff65 	bl	8001192 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a06      	ldr	r2, [pc, #24]	@ (80012e4 <HAL_ADC_MspInit+0xfc>)
 80012cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80012ce:	4a05      	ldr	r2, [pc, #20]	@ (80012e4 <HAL_ADC_MspInit+0xfc>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80012d4:	bf00      	nop
 80012d6:	3728      	adds	r7, #40	@ 0x28
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40021000 	.word	0x40021000
 80012e0:	48000800 	.word	0x48000800
 80012e4:	20000078 	.word	0x20000078
 80012e8:	40020008 	.word	0x40020008

080012ec <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001324 <HAL_TIM_Base_MspInit+0x38>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d10b      	bne.n	8001316 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001328 <HAL_TIM_Base_MspInit+0x3c>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	4a09      	ldr	r2, [pc, #36]	@ (8001328 <HAL_TIM_Base_MspInit+0x3c>)
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	61d3      	str	r3, [r2, #28]
 800130a:	4b07      	ldr	r3, [pc, #28]	@ (8001328 <HAL_TIM_Base_MspInit+0x3c>)
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001316:	bf00      	nop
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40000400 	.word	0x40000400
 8001328:	40021000 	.word	0x40021000

0800132c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a0a      	ldr	r2, [pc, #40]	@ (8001364 <HAL_TIM_PWM_MspInit+0x38>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d10b      	bne.n	8001356 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM15_MspInit 0 */

    /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800133e:	4b0a      	ldr	r3, [pc, #40]	@ (8001368 <HAL_TIM_PWM_MspInit+0x3c>)
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	4a09      	ldr	r2, [pc, #36]	@ (8001368 <HAL_TIM_PWM_MspInit+0x3c>)
 8001344:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001348:	6193      	str	r3, [r2, #24]
 800134a:	4b07      	ldr	r3, [pc, #28]	@ (8001368 <HAL_TIM_PWM_MspInit+0x3c>)
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM15_MspInit 1 */

  }

}
 8001356:	bf00      	nop
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40014000 	.word	0x40014000
 8001368:	40021000 	.word	0x40021000

0800136c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a11      	ldr	r2, [pc, #68]	@ (80013d0 <HAL_TIM_MspPostInit+0x64>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d11c      	bne.n	80013c8 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800138e:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <HAL_TIM_MspPostInit+0x68>)
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	4a10      	ldr	r2, [pc, #64]	@ (80013d4 <HAL_TIM_MspPostInit+0x68>)
 8001394:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001398:	6153      	str	r3, [r2, #20]
 800139a:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <HAL_TIM_MspPostInit+0x68>)
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013b8:	2302      	movs	r3, #2
 80013ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	4619      	mov	r1, r3
 80013c2:	4805      	ldr	r0, [pc, #20]	@ (80013d8 <HAL_TIM_MspPostInit+0x6c>)
 80013c4:	f001 fc04 	bl	8002bd0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80013c8:	bf00      	nop
 80013ca:	3720      	adds	r7, #32
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40000400 	.word	0x40000400
 80013d4:	40021000 	.word	0x40021000
 80013d8:	48000800 	.word	0x48000800

080013dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <NMI_Handler+0x4>

080013e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <HardFault_Handler+0x4>

080013ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <MemManage_Handler+0x4>

080013f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <BusFault_Handler+0x4>

080013fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <UsageFault_Handler+0x4>

08001404 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001432:	f000 f88f 	bl	8001554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001440:	4802      	ldr	r0, [pc, #8]	@ (800144c <DMA1_Channel1_IRQHandler+0x10>)
 8001442:	f001 fab8 	bl	80029b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000078 	.word	0x20000078

08001450 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001454:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <SystemInit+0x20>)
 8001456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800145a:	4a05      	ldr	r2, [pc, #20]	@ (8001470 <SystemInit+0x20>)
 800145c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001460:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001474:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014ac <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001478:	f7ff ffea 	bl	8001450 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800147c:	480c      	ldr	r0, [pc, #48]	@ (80014b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800147e:	490d      	ldr	r1, [pc, #52]	@ (80014b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001480:	4a0d      	ldr	r2, [pc, #52]	@ (80014b8 <LoopForever+0xe>)
  movs r3, #0
 8001482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001484:	e002      	b.n	800148c <LoopCopyDataInit>

08001486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148a:	3304      	adds	r3, #4

0800148c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800148c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001490:	d3f9      	bcc.n	8001486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001492:	4a0a      	ldr	r2, [pc, #40]	@ (80014bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001494:	4c0a      	ldr	r4, [pc, #40]	@ (80014c0 <LoopForever+0x16>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001498:	e001      	b.n	800149e <LoopFillZerobss>

0800149a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800149c:	3204      	adds	r2, #4

0800149e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a0:	d3fb      	bcc.n	800149a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014a2:	f004 fa43 	bl	800592c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014a6:	f7ff fab5 	bl	8000a14 <main>

080014aa <LoopForever>:

LoopForever:
    b LoopForever
 80014aa:	e7fe      	b.n	80014aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014ac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80014b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014b8:	080059c4 	.word	0x080059c4
  ldr r2, =_sbss
 80014bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014c0:	20000190 	.word	0x20000190

080014c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014c4:	e7fe      	b.n	80014c4 <ADC1_2_IRQHandler>
	...

080014c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014cc:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <HAL_Init+0x28>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a07      	ldr	r2, [pc, #28]	@ (80014f0 <HAL_Init+0x28>)
 80014d2:	f043 0310 	orr.w	r3, r3, #16
 80014d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d8:	2003      	movs	r0, #3
 80014da:	f001 f985 	bl	80027e8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014de:	200f      	movs	r0, #15
 80014e0:	f000 f808 	bl	80014f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e4:	f7ff fe5c 	bl	80011a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40022000 	.word	0x40022000

080014f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014fc:	4b12      	ldr	r3, [pc, #72]	@ (8001548 <HAL_InitTick+0x54>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b12      	ldr	r3, [pc, #72]	@ (800154c <HAL_InitTick+0x58>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800150a:	fbb3 f3f1 	udiv	r3, r3, r1
 800150e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f001 f99d 	bl	8002852 <HAL_SYSTICK_Config>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e00e      	b.n	8001540 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b0f      	cmp	r3, #15
 8001526:	d80a      	bhi.n	800153e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001528:	2200      	movs	r2, #0
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	f001 f965 	bl	80027fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001534:	4a06      	ldr	r2, [pc, #24]	@ (8001550 <HAL_InitTick+0x5c>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	e000      	b.n	8001540 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000000 	.word	0x20000000
 800154c:	20000008 	.word	0x20000008
 8001550:	20000004 	.word	0x20000004

08001554 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001558:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <HAL_IncTick+0x20>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <HAL_IncTick+0x24>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4413      	add	r3, r2
 8001564:	4a04      	ldr	r2, [pc, #16]	@ (8001578 <HAL_IncTick+0x24>)
 8001566:	6013      	str	r3, [r2, #0]
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000008 	.word	0x20000008
 8001578:	2000018c 	.word	0x2000018c

0800157c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001580:	4b03      	ldr	r3, [pc, #12]	@ (8001590 <HAL_GetTick+0x14>)
 8001582:	681b      	ldr	r3, [r3, #0]
}
 8001584:	4618      	mov	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	2000018c 	.word	0x2000018c

08001594 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800159c:	f7ff ffee 	bl	800157c <HAL_GetTick>
 80015a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ac:	d005      	beq.n	80015ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ae:	4b0a      	ldr	r3, [pc, #40]	@ (80015d8 <HAL_Delay+0x44>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	461a      	mov	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80015ba:	bf00      	nop
 80015bc:	f7ff ffde 	bl	800157c <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d8f7      	bhi.n	80015bc <HAL_Delay+0x28>
  {
  }
}
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000008 	.word	0x20000008

080015dc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b09a      	sub	sp, #104	@ 0x68
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800160c:	2300      	movs	r3, #0
 800160e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001612:	2300      	movs	r3, #0
 8001614:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e1e3      	b.n	80019ec <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162e:	f003 0310 	and.w	r3, r3, #16
 8001632:	2b00      	cmp	r3, #0
 8001634:	d176      	bne.n	8001724 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163a:	2b00      	cmp	r3, #0
 800163c:	d152      	bne.n	80016e4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff fdc5 	bl	80011e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d13b      	bne.n	80016e4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 ff85 	bl	800257c <ADC_Disable>
 8001672:	4603      	mov	r3, r0
 8001674:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167c:	f003 0310 	and.w	r3, r3, #16
 8001680:	2b00      	cmp	r3, #0
 8001682:	d12f      	bne.n	80016e4 <HAL_ADC_Init+0xe0>
 8001684:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001688:	2b00      	cmp	r3, #0
 800168a:	d12b      	bne.n	80016e4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001690:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001694:	f023 0302 	bic.w	r3, r3, #2
 8001698:	f043 0202 	orr.w	r2, r3, #2
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80016ae:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80016be:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016c0:	4b92      	ldr	r3, [pc, #584]	@ (800190c <HAL_ADC_Init+0x308>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a92      	ldr	r2, [pc, #584]	@ (8001910 <HAL_ADC_Init+0x30c>)
 80016c6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ca:	0c9a      	lsrs	r2, r3, #18
 80016cc:	4613      	mov	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016d6:	e002      	b.n	80016de <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	3b01      	subs	r3, #1
 80016dc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1f9      	bne.n	80016d8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d007      	beq.n	8001702 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80016fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001700:	d110      	bne.n	8001724 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001706:	f023 0312 	bic.w	r3, r3, #18
 800170a:	f043 0210 	orr.w	r2, r3, #16
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001716:	f043 0201 	orr.w	r2, r3, #1
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001728:	f003 0310 	and.w	r3, r3, #16
 800172c:	2b00      	cmp	r3, #0
 800172e:	f040 8150 	bne.w	80019d2 <HAL_ADC_Init+0x3ce>
 8001732:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001736:	2b00      	cmp	r3, #0
 8001738:	f040 814b 	bne.w	80019d2 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001746:	2b00      	cmp	r3, #0
 8001748:	f040 8143 	bne.w	80019d2 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001750:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001754:	f043 0202 	orr.w	r2, r3, #2
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001764:	d004      	beq.n	8001770 <HAL_ADC_Init+0x16c>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a6a      	ldr	r2, [pc, #424]	@ (8001914 <HAL_ADC_Init+0x310>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d101      	bne.n	8001774 <HAL_ADC_Init+0x170>
 8001770:	4b69      	ldr	r3, [pc, #420]	@ (8001918 <HAL_ADC_Init+0x314>)
 8001772:	e000      	b.n	8001776 <HAL_ADC_Init+0x172>
 8001774:	4b69      	ldr	r3, [pc, #420]	@ (800191c <HAL_ADC_Init+0x318>)
 8001776:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001780:	d102      	bne.n	8001788 <HAL_ADC_Init+0x184>
 8001782:	4b64      	ldr	r3, [pc, #400]	@ (8001914 <HAL_ADC_Init+0x310>)
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	e01a      	b.n	80017be <HAL_ADC_Init+0x1ba>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a61      	ldr	r2, [pc, #388]	@ (8001914 <HAL_ADC_Init+0x310>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d103      	bne.n	800179a <HAL_ADC_Init+0x196>
 8001792:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	e011      	b.n	80017be <HAL_ADC_Init+0x1ba>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a60      	ldr	r2, [pc, #384]	@ (8001920 <HAL_ADC_Init+0x31c>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d102      	bne.n	80017aa <HAL_ADC_Init+0x1a6>
 80017a4:	4b5f      	ldr	r3, [pc, #380]	@ (8001924 <HAL_ADC_Init+0x320>)
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	e009      	b.n	80017be <HAL_ADC_Init+0x1ba>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a5d      	ldr	r2, [pc, #372]	@ (8001924 <HAL_ADC_Init+0x320>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d102      	bne.n	80017ba <HAL_ADC_Init+0x1b6>
 80017b4:	4b5a      	ldr	r3, [pc, #360]	@ (8001920 <HAL_ADC_Init+0x31c>)
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	e001      	b.n	80017be <HAL_ADC_Init+0x1ba>
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d108      	bne.n	80017de <HAL_ADC_Init+0x1da>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d101      	bne.n	80017de <HAL_ADC_Init+0x1da>
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <HAL_ADC_Init+0x1dc>
 80017de:	2300      	movs	r3, #0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d11c      	bne.n	800181e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80017e4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d010      	beq.n	800180c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d107      	bne.n	8001806 <HAL_ADC_Init+0x202>
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d101      	bne.n	8001806 <HAL_ADC_Init+0x202>
 8001802:	2301      	movs	r3, #1
 8001804:	e000      	b.n	8001808 <HAL_ADC_Init+0x204>
 8001806:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001808:	2b00      	cmp	r3, #0
 800180a:	d108      	bne.n	800181e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800180c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	431a      	orrs	r2, r3
 800181a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800181c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	7e5b      	ldrb	r3, [r3, #25]
 8001822:	035b      	lsls	r3, r3, #13
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001828:	2a01      	cmp	r2, #1
 800182a:	d002      	beq.n	8001832 <HAL_ADC_Init+0x22e>
 800182c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001830:	e000      	b.n	8001834 <HAL_ADC_Init+0x230>
 8001832:	2200      	movs	r2, #0
 8001834:	431a      	orrs	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	4313      	orrs	r3, r2
 8001842:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001844:	4313      	orrs	r3, r2
 8001846:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d11b      	bne.n	800188a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	7e5b      	ldrb	r3, [r3, #25]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d109      	bne.n	800186e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185e:	3b01      	subs	r3, #1
 8001860:	045a      	lsls	r2, r3, #17
 8001862:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001864:	4313      	orrs	r3, r2
 8001866:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800186a:	663b      	str	r3, [r7, #96]	@ 0x60
 800186c:	e00d      	b.n	800188a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001876:	f043 0220 	orr.w	r2, r3, #32
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001882:	f043 0201 	orr.w	r2, r3, #1
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800188e:	2b01      	cmp	r3, #1
 8001890:	d054      	beq.n	800193c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a22      	ldr	r2, [pc, #136]	@ (8001920 <HAL_ADC_Init+0x31c>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d004      	beq.n	80018a6 <HAL_ADC_Init+0x2a2>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a20      	ldr	r2, [pc, #128]	@ (8001924 <HAL_ADC_Init+0x320>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d140      	bne.n	8001928 <HAL_ADC_Init+0x324>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018aa:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 80018ae:	d02a      	beq.n	8001906 <HAL_ADC_Init+0x302>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018b8:	d022      	beq.n	8001900 <HAL_ADC_Init+0x2fc>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018be:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 80018c2:	d01a      	beq.n	80018fa <HAL_ADC_Init+0x2f6>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c8:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 80018cc:	d012      	beq.n	80018f4 <HAL_ADC_Init+0x2f0>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d2:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 80018d6:	d00a      	beq.n	80018ee <HAL_ADC_Init+0x2ea>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018dc:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 80018e0:	d002      	beq.n	80018e8 <HAL_ADC_Init+0x2e4>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e6:	e023      	b.n	8001930 <HAL_ADC_Init+0x32c>
 80018e8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80018ec:	e020      	b.n	8001930 <HAL_ADC_Init+0x32c>
 80018ee:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80018f2:	e01d      	b.n	8001930 <HAL_ADC_Init+0x32c>
 80018f4:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80018f8:	e01a      	b.n	8001930 <HAL_ADC_Init+0x32c>
 80018fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018fe:	e017      	b.n	8001930 <HAL_ADC_Init+0x32c>
 8001900:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8001904:	e014      	b.n	8001930 <HAL_ADC_Init+0x32c>
 8001906:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800190a:	e011      	b.n	8001930 <HAL_ADC_Init+0x32c>
 800190c:	20000000 	.word	0x20000000
 8001910:	431bde83 	.word	0x431bde83
 8001914:	50000100 	.word	0x50000100
 8001918:	50000300 	.word	0x50000300
 800191c:	50000700 	.word	0x50000700
 8001920:	50000400 	.word	0x50000400
 8001924:	50000500 	.word	0x50000500
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800192c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001934:	4313      	orrs	r3, r2
 8001936:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001938:	4313      	orrs	r3, r2
 800193a:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 030c 	and.w	r3, r3, #12
 8001946:	2b00      	cmp	r3, #0
 8001948:	d114      	bne.n	8001974 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001958:	f023 0302 	bic.w	r3, r3, #2
 800195c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	7e1b      	ldrb	r3, [r3, #24]
 8001962:	039a      	lsls	r2, r3, #14
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	4313      	orrs	r3, r2
 800196e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001970:	4313      	orrs	r3, r2
 8001972:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	68da      	ldr	r2, [r3, #12]
 800197a:	4b1e      	ldr	r3, [pc, #120]	@ (80019f4 <HAL_ADC_Init+0x3f0>)
 800197c:	4013      	ands	r3, r2
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6812      	ldr	r2, [r2, #0]
 8001982:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001984:	430b      	orrs	r3, r1
 8001986:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d10c      	bne.n	80019aa <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	f023 010f 	bic.w	r1, r3, #15
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	1e5a      	subs	r2, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80019a8:	e007      	b.n	80019ba <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 020f 	bic.w	r2, r2, #15
 80019b8:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c4:	f023 0303 	bic.w	r3, r3, #3
 80019c8:	f043 0201 	orr.w	r2, r3, #1
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	641a      	str	r2, [r3, #64]	@ 0x40
 80019d0:	e00a      	b.n	80019e8 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d6:	f023 0312 	bic.w	r3, r3, #18
 80019da:	f043 0210 	orr.w	r2, r3, #16
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80019e2:	2301      	movs	r3, #1
 80019e4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80019e8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3768      	adds	r7, #104	@ 0x68
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	fff0c007 	.word	0xfff0c007

080019f8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a04:	2300      	movs	r3, #0
 8001a06:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f040 80f7 	bne.w	8001c06 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d101      	bne.n	8001a26 <HAL_ADC_Start_DMA+0x2e>
 8001a22:	2302      	movs	r3, #2
 8001a24:	e0f2      	b.n	8001c0c <HAL_ADC_Start_DMA+0x214>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a36:	d004      	beq.n	8001a42 <HAL_ADC_Start_DMA+0x4a>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a75      	ldr	r2, [pc, #468]	@ (8001c14 <HAL_ADC_Start_DMA+0x21c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d109      	bne.n	8001a56 <HAL_ADC_Start_DMA+0x5e>
 8001a42:	4b75      	ldr	r3, [pc, #468]	@ (8001c18 <HAL_ADC_Start_DMA+0x220>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f003 031f 	and.w	r3, r3, #31
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	bf0c      	ite	eq
 8001a4e:	2301      	moveq	r3, #1
 8001a50:	2300      	movne	r3, #0
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	e008      	b.n	8001a68 <HAL_ADC_Start_DMA+0x70>
 8001a56:	4b71      	ldr	r3, [pc, #452]	@ (8001c1c <HAL_ADC_Start_DMA+0x224>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 031f 	and.w	r3, r3, #31
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	bf0c      	ite	eq
 8001a62:	2301      	moveq	r3, #1
 8001a64:	2300      	movne	r3, #0
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 80c5 	beq.w	8001bf8 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f000 fd20 	bl	80024b4 <ADC_Enable>
 8001a74:	4603      	mov	r3, r0
 8001a76:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001a78:	7dfb      	ldrb	r3, [r7, #23]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f040 80b7 	bne.w	8001bee <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a84:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a88:	f023 0301 	bic.w	r3, r3, #1
 8001a8c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a9c:	d004      	beq.n	8001aa8 <HAL_ADC_Start_DMA+0xb0>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a5c      	ldr	r2, [pc, #368]	@ (8001c14 <HAL_ADC_Start_DMA+0x21c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d106      	bne.n	8001ab6 <HAL_ADC_Start_DMA+0xbe>
 8001aa8:	4b5b      	ldr	r3, [pc, #364]	@ (8001c18 <HAL_ADC_Start_DMA+0x220>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 031f 	and.w	r3, r3, #31
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d010      	beq.n	8001ad6 <HAL_ADC_Start_DMA+0xde>
 8001ab4:	e005      	b.n	8001ac2 <HAL_ADC_Start_DMA+0xca>
 8001ab6:	4b59      	ldr	r3, [pc, #356]	@ (8001c1c <HAL_ADC_Start_DMA+0x224>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 031f 	and.w	r3, r3, #31
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d009      	beq.n	8001ad6 <HAL_ADC_Start_DMA+0xde>
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001aca:	d004      	beq.n	8001ad6 <HAL_ADC_Start_DMA+0xde>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a53      	ldr	r2, [pc, #332]	@ (8001c20 <HAL_ADC_Start_DMA+0x228>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d115      	bne.n	8001b02 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ada:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d036      	beq.n	8001b5e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001af8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001b00:	e02d      	b.n	8001b5e <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b16:	d004      	beq.n	8001b22 <HAL_ADC_Start_DMA+0x12a>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a3d      	ldr	r2, [pc, #244]	@ (8001c14 <HAL_ADC_Start_DMA+0x21c>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d10a      	bne.n	8001b38 <HAL_ADC_Start_DMA+0x140>
 8001b22:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	bf14      	ite	ne
 8001b30:	2301      	movne	r3, #1
 8001b32:	2300      	moveq	r3, #0
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	e008      	b.n	8001b4a <HAL_ADC_Start_DMA+0x152>
 8001b38:	4b39      	ldr	r3, [pc, #228]	@ (8001c20 <HAL_ADC_Start_DMA+0x228>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	bf14      	ite	ne
 8001b44:	2301      	movne	r3, #1
 8001b46:	2300      	moveq	r3, #0
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d007      	beq.n	8001b5e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b52:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b56:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b6a:	d106      	bne.n	8001b7a <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b70:	f023 0206 	bic.w	r2, r3, #6
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	645a      	str	r2, [r3, #68]	@ 0x44
 8001b78:	e002      	b.n	8001b80 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b8c:	4a25      	ldr	r2, [pc, #148]	@ (8001c24 <HAL_ADC_Start_DMA+0x22c>)
 8001b8e:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b94:	4a24      	ldr	r2, [pc, #144]	@ (8001c28 <HAL_ADC_Start_DMA+0x230>)
 8001b96:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b9c:	4a23      	ldr	r2, [pc, #140]	@ (8001c2c <HAL_ADC_Start_DMA+0x234>)
 8001b9e:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	221c      	movs	r2, #28
 8001ba6:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 0210 	orr.w	r2, r2, #16
 8001bb6:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68da      	ldr	r2, [r3, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 0201 	orr.w	r2, r2, #1
 8001bc6:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	3340      	adds	r3, #64	@ 0x40
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f000 fe8e 	bl	80028f8 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0204 	orr.w	r2, r2, #4
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	e00d      	b.n	8001c0a <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001bf6:	e008      	b.n	8001c0a <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001c04:	e001      	b.n	8001c0a <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c06:	2302      	movs	r3, #2
 8001c08:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	50000100 	.word	0x50000100
 8001c18:	50000300 	.word	0x50000300
 8001c1c:	50000700 	.word	0x50000700
 8001c20:	50000400 	.word	0x50000400
 8001c24:	080023e9 	.word	0x080023e9
 8001c28:	08002463 	.word	0x08002463
 8001c2c:	0800247f 	.word	0x0800247f

08001c30 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b09b      	sub	sp, #108	@ 0x6c
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d101      	bne.n	8001c52 <HAL_ADC_ConfigChannel+0x22>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e2c8      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x5b4>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f040 82ac 	bne.w	80021c2 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d81c      	bhi.n	8001cac <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	4413      	add	r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	461a      	mov	r2, r3
 8001c86:	231f      	movs	r3, #31
 8001c88:	4093      	lsls	r3, r2
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	4019      	ands	r1, r3
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	6818      	ldr	r0, [r3, #0]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	4613      	mov	r3, r2
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	4413      	add	r3, r2
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	631a      	str	r2, [r3, #48]	@ 0x30
 8001caa:	e063      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b09      	cmp	r3, #9
 8001cb2:	d81e      	bhi.n	8001cf2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	3b1e      	subs	r3, #30
 8001cc8:	221f      	movs	r2, #31
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	4019      	ands	r1, r3
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	6818      	ldr	r0, [r3, #0]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	4413      	add	r3, r2
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	3b1e      	subs	r3, #30
 8001ce4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	430a      	orrs	r2, r1
 8001cee:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cf0:	e040      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b0e      	cmp	r3, #14
 8001cf8:	d81e      	bhi.n	8001d38 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	4613      	mov	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	3b3c      	subs	r3, #60	@ 0x3c
 8001d0e:	221f      	movs	r2, #31
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	4019      	ands	r1, r3
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	6818      	ldr	r0, [r3, #0]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	4613      	mov	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4413      	add	r3, r2
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	3b3c      	subs	r3, #60	@ 0x3c
 8001d2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d36:	e01d      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	4413      	add	r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	3b5a      	subs	r3, #90	@ 0x5a
 8001d4c:	221f      	movs	r2, #31
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	4019      	ands	r1, r3
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	6818      	ldr	r0, [r3, #0]
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	3b5a      	subs	r3, #90	@ 0x5a
 8001d68:	fa00 f203 	lsl.w	r2, r0, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f040 80e5 	bne.w	8001f4e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b09      	cmp	r3, #9
 8001d8a:	d91c      	bls.n	8001dc6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6999      	ldr	r1, [r3, #24]
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	4613      	mov	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3b1e      	subs	r3, #30
 8001d9e:	2207      	movs	r2, #7
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	4019      	ands	r1, r3
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	6898      	ldr	r0, [r3, #8]
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4613      	mov	r3, r2
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	4413      	add	r3, r2
 8001db6:	3b1e      	subs	r3, #30
 8001db8:	fa00 f203 	lsl.w	r2, r0, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	619a      	str	r2, [r3, #24]
 8001dc4:	e019      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6959      	ldr	r1, [r3, #20]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	2207      	movs	r2, #7
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	4019      	ands	r1, r3
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	6898      	ldr	r0, [r3, #8]
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4613      	mov	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	4413      	add	r3, r2
 8001dee:	fa00 f203 	lsl.w	r2, r0, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	695a      	ldr	r2, [r3, #20]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	08db      	lsrs	r3, r3, #3
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	2b03      	cmp	r3, #3
 8001e1a:	d84f      	bhi.n	8001ebc <HAL_ADC_ConfigChannel+0x28c>
 8001e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8001e24 <HAL_ADC_ConfigChannel+0x1f4>)
 8001e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e22:	bf00      	nop
 8001e24:	08001e35 	.word	0x08001e35
 8001e28:	08001e57 	.word	0x08001e57
 8001e2c:	08001e79 	.word	0x08001e79
 8001e30:	08001e9b 	.word	0x08001e9b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e3a:	4b99      	ldr	r3, [pc, #612]	@ (80020a0 <HAL_ADC_ConfigChannel+0x470>)
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	6812      	ldr	r2, [r2, #0]
 8001e42:	0691      	lsls	r1, r2, #26
 8001e44:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001e46:	430a      	orrs	r2, r1
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001e52:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e54:	e07b      	b.n	8001f4e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001e5c:	4b90      	ldr	r3, [pc, #576]	@ (80020a0 <HAL_ADC_ConfigChannel+0x470>)
 8001e5e:	4013      	ands	r3, r2
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	6812      	ldr	r2, [r2, #0]
 8001e64:	0691      	lsls	r1, r2, #26
 8001e66:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001e74:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e76:	e06a      	b.n	8001f4e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001e7e:	4b88      	ldr	r3, [pc, #544]	@ (80020a0 <HAL_ADC_ConfigChannel+0x470>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	6812      	ldr	r2, [r2, #0]
 8001e86:	0691      	lsls	r1, r2, #26
 8001e88:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001e96:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e98:	e059      	b.n	8001f4e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001ea0:	4b7f      	ldr	r3, [pc, #508]	@ (80020a0 <HAL_ADC_ConfigChannel+0x470>)
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	6812      	ldr	r2, [r2, #0]
 8001ea8:	0691      	lsls	r1, r2, #26
 8001eaa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001eac:	430a      	orrs	r2, r1
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001eb8:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001eba:	e048      	b.n	8001f4e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ec2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	069b      	lsls	r3, r3, #26
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d107      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001ede:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ee6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	069b      	lsls	r3, r3, #26
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d107      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001f02:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f0a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	069b      	lsls	r3, r3, #26
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d107      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001f26:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f2e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	069b      	lsls	r3, r3, #26
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d107      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001f4a:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001f4c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d108      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x33e>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x33e>
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x340>
 8001f6e:	2300      	movs	r3, #0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f040 8131 	bne.w	80021d8 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d00f      	beq.n	8001f9e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43da      	mvns	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	400a      	ands	r2, r1
 8001f98:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001f9c:	e049      	b.n	8002032 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2201      	movs	r2, #1
 8001fac:	409a      	lsls	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b09      	cmp	r3, #9
 8001fbe:	d91c      	bls.n	8001ffa <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6999      	ldr	r1, [r3, #24]
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4413      	add	r3, r2
 8001fd0:	3b1b      	subs	r3, #27
 8001fd2:	2207      	movs	r2, #7
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	4019      	ands	r1, r3
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	6898      	ldr	r0, [r3, #8]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4413      	add	r3, r2
 8001fea:	3b1b      	subs	r3, #27
 8001fec:	fa00 f203 	lsl.w	r2, r0, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	619a      	str	r2, [r3, #24]
 8001ff8:	e01b      	b.n	8002032 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6959      	ldr	r1, [r3, #20]
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	1c5a      	adds	r2, r3, #1
 8002006:	4613      	mov	r3, r2
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	4413      	add	r3, r2
 800200c:	2207      	movs	r2, #7
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	4019      	ands	r1, r3
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	6898      	ldr	r0, [r3, #8]
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	1c5a      	adds	r2, r3, #1
 8002020:	4613      	mov	r3, r2
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	4413      	add	r3, r2
 8002026:	fa00 f203 	lsl.w	r2, r0, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800203a:	d004      	beq.n	8002046 <HAL_ADC_ConfigChannel+0x416>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a18      	ldr	r2, [pc, #96]	@ (80020a4 <HAL_ADC_ConfigChannel+0x474>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d101      	bne.n	800204a <HAL_ADC_ConfigChannel+0x41a>
 8002046:	4b18      	ldr	r3, [pc, #96]	@ (80020a8 <HAL_ADC_ConfigChannel+0x478>)
 8002048:	e000      	b.n	800204c <HAL_ADC_ConfigChannel+0x41c>
 800204a:	4b18      	ldr	r3, [pc, #96]	@ (80020ac <HAL_ADC_ConfigChannel+0x47c>)
 800204c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2b10      	cmp	r3, #16
 8002054:	d105      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002056:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800205e:	2b00      	cmp	r3, #0
 8002060:	d015      	beq.n	800208e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002066:	2b11      	cmp	r3, #17
 8002068:	d105      	bne.n	8002076 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800206a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00b      	beq.n	800208e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800207a:	2b12      	cmp	r3, #18
 800207c:	f040 80ac 	bne.w	80021d8 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002080:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002088:	2b00      	cmp	r3, #0
 800208a:	f040 80a5 	bne.w	80021d8 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002096:	d10b      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x480>
 8002098:	4b02      	ldr	r3, [pc, #8]	@ (80020a4 <HAL_ADC_ConfigChannel+0x474>)
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	e023      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x4b6>
 800209e:	bf00      	nop
 80020a0:	83fff000 	.word	0x83fff000
 80020a4:	50000100 	.word	0x50000100
 80020a8:	50000300 	.word	0x50000300
 80020ac:	50000700 	.word	0x50000700
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a4e      	ldr	r2, [pc, #312]	@ (80021f0 <HAL_ADC_ConfigChannel+0x5c0>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d103      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x492>
 80020ba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	e011      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x4b6>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a4b      	ldr	r2, [pc, #300]	@ (80021f4 <HAL_ADC_ConfigChannel+0x5c4>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d102      	bne.n	80020d2 <HAL_ADC_ConfigChannel+0x4a2>
 80020cc:	4b4a      	ldr	r3, [pc, #296]	@ (80021f8 <HAL_ADC_ConfigChannel+0x5c8>)
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	e009      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x4b6>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a48      	ldr	r2, [pc, #288]	@ (80021f8 <HAL_ADC_ConfigChannel+0x5c8>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d102      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x4b2>
 80020dc:	4b45      	ldr	r3, [pc, #276]	@ (80021f4 <HAL_ADC_ConfigChannel+0x5c4>)
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	e001      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x4b6>
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d108      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x4d6>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d101      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x4d6>
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <HAL_ADC_ConfigChannel+0x4d8>
 8002106:	2300      	movs	r3, #0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d150      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800210c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800210e:	2b00      	cmp	r3, #0
 8002110:	d010      	beq.n	8002134 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	2b01      	cmp	r3, #1
 800211c:	d107      	bne.n	800212e <HAL_ADC_ConfigChannel+0x4fe>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b01      	cmp	r3, #1
 8002128:	d101      	bne.n	800212e <HAL_ADC_ConfigChannel+0x4fe>
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <HAL_ADC_ConfigChannel+0x500>
 800212e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002130:	2b00      	cmp	r3, #0
 8002132:	d13c      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b10      	cmp	r3, #16
 800213a:	d11d      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x548>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002144:	d118      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002146:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800214e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002150:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002152:	4b2a      	ldr	r3, [pc, #168]	@ (80021fc <HAL_ADC_ConfigChannel+0x5cc>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a2a      	ldr	r2, [pc, #168]	@ (8002200 <HAL_ADC_ConfigChannel+0x5d0>)
 8002158:	fba2 2303 	umull	r2, r3, r2, r3
 800215c:	0c9a      	lsrs	r2, r3, #18
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002168:	e002      	b.n	8002170 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	3b01      	subs	r3, #1
 800216e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f9      	bne.n	800216a <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002176:	e02e      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b11      	cmp	r3, #17
 800217e:	d10b      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x568>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002188:	d106      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800218a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002192:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002194:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002196:	e01e      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2b12      	cmp	r3, #18
 800219e:	d11a      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80021a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80021a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021aa:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021ac:	e013      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b2:	f043 0220 	orr.w	r2, r3, #32
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80021c0:	e00a      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c6:	f043 0220 	orr.w	r2, r3, #32
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80021d4:	e000      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021d6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80021e0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	376c      	adds	r7, #108	@ 0x6c
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	50000100 	.word	0x50000100
 80021f4:	50000400 	.word	0x50000400
 80021f8:	50000500 	.word	0x50000500
 80021fc:	20000000 	.word	0x20000000
 8002200:	431bde83 	.word	0x431bde83

08002204 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002204:	b480      	push	{r7}
 8002206:	b099      	sub	sp, #100	@ 0x64
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800220e:	2300      	movs	r3, #0
 8002210:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800221c:	d102      	bne.n	8002224 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	e01a      	b.n	800225a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a6a      	ldr	r2, [pc, #424]	@ (80023d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d103      	bne.n	8002236 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800222e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	e011      	b.n	800225a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a67      	ldr	r2, [pc, #412]	@ (80023d8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d102      	bne.n	8002246 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002240:	4b66      	ldr	r3, [pc, #408]	@ (80023dc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	e009      	b.n	800225a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a64      	ldr	r2, [pc, #400]	@ (80023dc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d102      	bne.n	8002256 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002250:	4b61      	ldr	r3, [pc, #388]	@ (80023d8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002252:	60bb      	str	r3, [r7, #8]
 8002254:	e001      	b.n	800225a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002256:	2300      	movs	r3, #0
 8002258:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e0b0      	b.n	80023c6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800226a:	2b01      	cmp	r3, #1
 800226c:	d101      	bne.n	8002272 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800226e:	2302      	movs	r3, #2
 8002270:	e0a9      	b.n	80023c6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	2b00      	cmp	r3, #0
 8002286:	f040 808d 	bne.w	80023a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	2b00      	cmp	r3, #0
 8002294:	f040 8086 	bne.w	80023a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022a0:	d004      	beq.n	80022ac <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a4b      	ldr	r2, [pc, #300]	@ (80023d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d101      	bne.n	80022b0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80022ac:	4b4c      	ldr	r3, [pc, #304]	@ (80023e0 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80022ae:	e000      	b.n	80022b2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80022b0:	4b4c      	ldr	r3, [pc, #304]	@ (80023e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80022b2:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d040      	beq.n	800233e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80022bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	6859      	ldr	r1, [r3, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80022ce:	035b      	lsls	r3, r3, #13
 80022d0:	430b      	orrs	r3, r1
 80022d2:	431a      	orrs	r2, r3
 80022d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022d6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d108      	bne.n	80022f8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80022f4:	2301      	movs	r3, #1
 80022f6:	e000      	b.n	80022fa <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80022f8:	2300      	movs	r3, #0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d15c      	bne.n	80023b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	2b01      	cmp	r3, #1
 8002308:	d107      	bne.n	800231a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b01      	cmp	r3, #1
 8002314:	d101      	bne.n	800231a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800231a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800231c:	2b00      	cmp	r3, #0
 800231e:	d14b      	bne.n	80023b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002320:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002328:	f023 030f 	bic.w	r3, r3, #15
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	6811      	ldr	r1, [r2, #0]
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	6892      	ldr	r2, [r2, #8]
 8002334:	430a      	orrs	r2, r1
 8002336:	431a      	orrs	r2, r3
 8002338:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800233a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800233c:	e03c      	b.n	80023b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800233e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002346:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002348:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	2b01      	cmp	r3, #1
 8002356:	d108      	bne.n	800236a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b01      	cmp	r3, #1
 8002364:	d101      	bne.n	800236a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800236a:	2300      	movs	r3, #0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d123      	bne.n	80023b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	2b01      	cmp	r3, #1
 800237a:	d107      	bne.n	800238c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b01      	cmp	r3, #1
 8002386:	d101      	bne.n	800238c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002388:	2301      	movs	r3, #1
 800238a:	e000      	b.n	800238e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 800238c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800238e:	2b00      	cmp	r3, #0
 8002390:	d112      	bne.n	80023b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002392:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800239a:	f023 030f 	bic.w	r3, r3, #15
 800239e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80023a0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80023a2:	e009      	b.n	80023b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a8:	f043 0220 	orr.w	r2, r3, #32
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80023b6:	e000      	b.n	80023ba <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80023b8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80023c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 80023c6:	4618      	mov	r0, r3
 80023c8:	3764      	adds	r7, #100	@ 0x64
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	50000100 	.word	0x50000100
 80023d8:	50000400 	.word	0x50000400
 80023dc:	50000500 	.word	0x50000500
 80023e0:	50000300 	.word	0x50000300
 80023e4:	50000700 	.word	0x50000700

080023e8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fa:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d126      	bne.n	8002450 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002406:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002418:	2b00      	cmp	r3, #0
 800241a:	d115      	bne.n	8002448 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002420:	2b00      	cmp	r3, #0
 8002422:	d111      	bne.n	8002448 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002428:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002434:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d105      	bne.n	8002448 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002440:	f043 0201 	orr.w	r2, r3, #1
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f7fe fd71 	bl	8000f30 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800244e:	e004      	b.n	800245a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	4798      	blx	r3
}
 800245a:	bf00      	nop
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b084      	sub	sp, #16
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f7ff f8b3 	bl	80015dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002476:	bf00      	nop
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b084      	sub	sp, #16
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002490:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249c:	f043 0204 	orr.w	r2, r3, #4
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f7ff f8a3 	bl	80015f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024aa:	bf00      	nop
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d108      	bne.n	80024e0 <ADC_Enable+0x2c>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d101      	bne.n	80024e0 <ADC_Enable+0x2c>
 80024dc:	2301      	movs	r3, #1
 80024de:	e000      	b.n	80024e2 <ADC_Enable+0x2e>
 80024e0:	2300      	movs	r3, #0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d143      	bne.n	800256e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	4b22      	ldr	r3, [pc, #136]	@ (8002578 <ADC_Enable+0xc4>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00d      	beq.n	8002510 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f8:	f043 0210 	orr.w	r2, r3, #16
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002504:	f043 0201 	orr.w	r2, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e02f      	b.n	8002570 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0201 	orr.w	r2, r2, #1
 800251e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002520:	f7ff f82c 	bl	800157c <HAL_GetTick>
 8002524:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002526:	e01b      	b.n	8002560 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002528:	f7ff f828 	bl	800157c <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d914      	bls.n	8002560 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b01      	cmp	r3, #1
 8002542:	d00d      	beq.n	8002560 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002548:	f043 0210 	orr.w	r2, r3, #16
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002554:	f043 0201 	orr.w	r2, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e007      	b.n	8002570 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b01      	cmp	r3, #1
 800256c:	d1dc      	bne.n	8002528 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	8000003f 	.word	0x8000003f

0800257c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002584:	2300      	movs	r3, #0
 8002586:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b01      	cmp	r3, #1
 8002594:	d108      	bne.n	80025a8 <ADC_Disable+0x2c>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <ADC_Disable+0x2c>
 80025a4:	2301      	movs	r3, #1
 80025a6:	e000      	b.n	80025aa <ADC_Disable+0x2e>
 80025a8:	2300      	movs	r3, #0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d047      	beq.n	800263e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 030d 	and.w	r3, r3, #13
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d10f      	bne.n	80025dc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0202 	orr.w	r2, r2, #2
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2203      	movs	r2, #3
 80025d2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80025d4:	f7fe ffd2 	bl	800157c <HAL_GetTick>
 80025d8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025da:	e029      	b.n	8002630 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e0:	f043 0210 	orr.w	r2, r3, #16
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ec:	f043 0201 	orr.w	r2, r3, #1
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e023      	b.n	8002640 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80025f8:	f7fe ffc0 	bl	800157c <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d914      	bls.n	8002630 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b01      	cmp	r3, #1
 8002612:	d10d      	bne.n	8002630 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002618:	f043 0210 	orr.w	r2, r3, #16
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002624:	f043 0201 	orr.w	r2, r3, #1
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e007      	b.n	8002640 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b01      	cmp	r3, #1
 800263c:	d0dc      	beq.n	80025f8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002658:	4b0c      	ldr	r3, [pc, #48]	@ (800268c <__NVIC_SetPriorityGrouping+0x44>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002664:	4013      	ands	r3, r2
 8002666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002670:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002674:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800267a:	4a04      	ldr	r2, [pc, #16]	@ (800268c <__NVIC_SetPriorityGrouping+0x44>)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	60d3      	str	r3, [r2, #12]
}
 8002680:	bf00      	nop
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002694:	4b04      	ldr	r3, [pc, #16]	@ (80026a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	0a1b      	lsrs	r3, r3, #8
 800269a:	f003 0307 	and.w	r3, r3, #7
}
 800269e:	4618      	mov	r0, r3
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	db0b      	blt.n	80026d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	f003 021f 	and.w	r2, r3, #31
 80026c4:	4907      	ldr	r1, [pc, #28]	@ (80026e4 <__NVIC_EnableIRQ+0x38>)
 80026c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ca:	095b      	lsrs	r3, r3, #5
 80026cc:	2001      	movs	r0, #1
 80026ce:	fa00 f202 	lsl.w	r2, r0, r2
 80026d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	e000e100 	.word	0xe000e100

080026e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	6039      	str	r1, [r7, #0]
 80026f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	db0a      	blt.n	8002712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	490c      	ldr	r1, [pc, #48]	@ (8002734 <__NVIC_SetPriority+0x4c>)
 8002702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002706:	0112      	lsls	r2, r2, #4
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	440b      	add	r3, r1
 800270c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002710:	e00a      	b.n	8002728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	b2da      	uxtb	r2, r3
 8002716:	4908      	ldr	r1, [pc, #32]	@ (8002738 <__NVIC_SetPriority+0x50>)
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	3b04      	subs	r3, #4
 8002720:	0112      	lsls	r2, r2, #4
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	440b      	add	r3, r1
 8002726:	761a      	strb	r2, [r3, #24]
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	e000e100 	.word	0xe000e100
 8002738:	e000ed00 	.word	0xe000ed00

0800273c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800273c:	b480      	push	{r7}
 800273e:	b089      	sub	sp, #36	@ 0x24
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f1c3 0307 	rsb	r3, r3, #7
 8002756:	2b04      	cmp	r3, #4
 8002758:	bf28      	it	cs
 800275a:	2304      	movcs	r3, #4
 800275c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	3304      	adds	r3, #4
 8002762:	2b06      	cmp	r3, #6
 8002764:	d902      	bls.n	800276c <NVIC_EncodePriority+0x30>
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	3b03      	subs	r3, #3
 800276a:	e000      	b.n	800276e <NVIC_EncodePriority+0x32>
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002770:	f04f 32ff 	mov.w	r2, #4294967295
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43da      	mvns	r2, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	401a      	ands	r2, r3
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002784:	f04f 31ff 	mov.w	r1, #4294967295
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	fa01 f303 	lsl.w	r3, r1, r3
 800278e:	43d9      	mvns	r1, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002794:	4313      	orrs	r3, r2
         );
}
 8002796:	4618      	mov	r0, r3
 8002798:	3724      	adds	r7, #36	@ 0x24
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
	...

080027a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027b4:	d301      	bcc.n	80027ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027b6:	2301      	movs	r3, #1
 80027b8:	e00f      	b.n	80027da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ba:	4a0a      	ldr	r2, [pc, #40]	@ (80027e4 <SysTick_Config+0x40>)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3b01      	subs	r3, #1
 80027c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027c2:	210f      	movs	r1, #15
 80027c4:	f04f 30ff 	mov.w	r0, #4294967295
 80027c8:	f7ff ff8e 	bl	80026e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027cc:	4b05      	ldr	r3, [pc, #20]	@ (80027e4 <SysTick_Config+0x40>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027d2:	4b04      	ldr	r3, [pc, #16]	@ (80027e4 <SysTick_Config+0x40>)
 80027d4:	2207      	movs	r2, #7
 80027d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	e000e010 	.word	0xe000e010

080027e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7ff ff29 	bl	8002648 <__NVIC_SetPriorityGrouping>
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b086      	sub	sp, #24
 8002802:	af00      	add	r7, sp, #0
 8002804:	4603      	mov	r3, r0
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	607a      	str	r2, [r7, #4]
 800280a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002810:	f7ff ff3e 	bl	8002690 <__NVIC_GetPriorityGrouping>
 8002814:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	68b9      	ldr	r1, [r7, #8]
 800281a:	6978      	ldr	r0, [r7, #20]
 800281c:	f7ff ff8e 	bl	800273c <NVIC_EncodePriority>
 8002820:	4602      	mov	r2, r0
 8002822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002826:	4611      	mov	r1, r2
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff ff5d 	bl	80026e8 <__NVIC_SetPriority>
}
 800282e:	bf00      	nop
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	4603      	mov	r3, r0
 800283e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff31 	bl	80026ac <__NVIC_EnableIRQ>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff ffa2 	bl	80027a4 <SysTick_Config>
 8002860:	4603      	mov	r3, r0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b084      	sub	sp, #16
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e037      	b.n	80028f0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2202      	movs	r2, #2
 8002884:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002896:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800289a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80028a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f940 	bl	8002b58 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <HAL_DMA_Start_IT+0x20>
 8002914:	2302      	movs	r3, #2
 8002916:	e04a      	b.n	80029ae <HAL_DMA_Start_IT+0xb6>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002926:	2b01      	cmp	r3, #1
 8002928:	d13a      	bne.n	80029a0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2202      	movs	r2, #2
 800292e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0201 	bic.w	r2, r2, #1
 8002946:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 f8d4 	bl	8002afc <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002958:	2b00      	cmp	r3, #0
 800295a:	d008      	beq.n	800296e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 020e 	orr.w	r2, r2, #14
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	e00f      	b.n	800298e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f042 020a 	orr.w	r2, r2, #10
 800297c:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0204 	bic.w	r2, r2, #4
 800298c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f042 0201 	orr.w	r2, r2, #1
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	e005      	b.n	80029ac <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80029a8:	2302      	movs	r3, #2
 80029aa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80029ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b084      	sub	sp, #16
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d2:	2204      	movs	r2, #4
 80029d4:	409a      	lsls	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4013      	ands	r3, r2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d024      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x72>
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d01f      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0320 	and.w	r3, r3, #32
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d107      	bne.n	8002a06 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0204 	bic.w	r2, r2, #4
 8002a04:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a0e:	2104      	movs	r1, #4
 8002a10:	fa01 f202 	lsl.w	r2, r1, r2
 8002a14:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d06a      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002a26:	e065      	b.n	8002af4 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	409a      	lsls	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d02c      	beq.n	8002a92 <HAL_DMA_IRQHandler+0xdc>
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d027      	beq.n	8002a92 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0320 	and.w	r3, r3, #32
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10b      	bne.n	8002a68 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 020a 	bic.w	r2, r2, #10
 8002a5e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a70:	2102      	movs	r1, #2
 8002a72:	fa01 f202 	lsl.w	r2, r1, r2
 8002a76:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d035      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a90:	e030      	b.n	8002af4 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	2208      	movs	r2, #8
 8002a98:	409a      	lsls	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d028      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x13e>
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	f003 0308 	and.w	r3, r3, #8
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d023      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 020e 	bic.w	r2, r2, #14
 8002aba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8002aca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d004      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	4798      	blx	r3
    }
  }
}
 8002af2:	e7ff      	b.n	8002af4 <HAL_DMA_IRQHandler+0x13e>
 8002af4:	bf00      	nop
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
 8002b08:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b12:	2101      	movs	r1, #1
 8002b14:	fa01 f202 	lsl.w	r2, r1, r2
 8002b18:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b10      	cmp	r3, #16
 8002b28:	d108      	bne.n	8002b3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b3a:	e007      	b.n	8002b4c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	60da      	str	r2, [r3, #12]
}
 8002b4c:	bf00      	nop
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	461a      	mov	r2, r3
 8002b66:	4b14      	ldr	r3, [pc, #80]	@ (8002bb8 <DMA_CalcBaseAndBitshift+0x60>)
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d80f      	bhi.n	8002b8c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	461a      	mov	r2, r3
 8002b72:	4b12      	ldr	r3, [pc, #72]	@ (8002bbc <DMA_CalcBaseAndBitshift+0x64>)
 8002b74:	4413      	add	r3, r2
 8002b76:	4a12      	ldr	r2, [pc, #72]	@ (8002bc0 <DMA_CalcBaseAndBitshift+0x68>)
 8002b78:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7c:	091b      	lsrs	r3, r3, #4
 8002b7e:	009a      	lsls	r2, r3, #2
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a0f      	ldr	r2, [pc, #60]	@ (8002bc4 <DMA_CalcBaseAndBitshift+0x6c>)
 8002b88:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002b8a:	e00e      	b.n	8002baa <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	461a      	mov	r2, r3
 8002b92:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc8 <DMA_CalcBaseAndBitshift+0x70>)
 8002b94:	4413      	add	r3, r2
 8002b96:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc0 <DMA_CalcBaseAndBitshift+0x68>)
 8002b98:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9c:	091b      	lsrs	r3, r3, #4
 8002b9e:	009a      	lsls	r2, r3, #2
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a09      	ldr	r2, [pc, #36]	@ (8002bcc <DMA_CalcBaseAndBitshift+0x74>)
 8002ba8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	40020407 	.word	0x40020407
 8002bbc:	bffdfff8 	.word	0xbffdfff8
 8002bc0:	cccccccd 	.word	0xcccccccd
 8002bc4:	40020000 	.word	0x40020000
 8002bc8:	bffdfbf8 	.word	0xbffdfbf8
 8002bcc:	40020400 	.word	0x40020400

08002bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b087      	sub	sp, #28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bde:	e160      	b.n	8002ea2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	2101      	movs	r1, #1
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bec:	4013      	ands	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 8152 	beq.w	8002e9c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d005      	beq.n	8002c10 <HAL_GPIO_Init+0x40>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d130      	bne.n	8002c72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	4013      	ands	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	68da      	ldr	r2, [r3, #12]
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c46:	2201      	movs	r2, #1
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	4013      	ands	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	091b      	lsrs	r3, r3, #4
 8002c5c:	f003 0201 	and.w	r2, r3, #1
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	2b03      	cmp	r3, #3
 8002c7c:	d017      	beq.n	8002cae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	2203      	movs	r2, #3
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	4013      	ands	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d123      	bne.n	8002d02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	08da      	lsrs	r2, r3, #3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3208      	adds	r2, #8
 8002cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	220f      	movs	r2, #15
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	691a      	ldr	r2, [r3, #16]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	08da      	lsrs	r2, r3, #3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3208      	adds	r2, #8
 8002cfc:	6939      	ldr	r1, [r7, #16]
 8002cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	2203      	movs	r2, #3
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	43db      	mvns	r3, r3
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	4013      	ands	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f003 0203 	and.w	r2, r3, #3
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f000 80ac 	beq.w	8002e9c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d44:	4b5e      	ldr	r3, [pc, #376]	@ (8002ec0 <HAL_GPIO_Init+0x2f0>)
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	4a5d      	ldr	r2, [pc, #372]	@ (8002ec0 <HAL_GPIO_Init+0x2f0>)
 8002d4a:	f043 0301 	orr.w	r3, r3, #1
 8002d4e:	6193      	str	r3, [r2, #24]
 8002d50:	4b5b      	ldr	r3, [pc, #364]	@ (8002ec0 <HAL_GPIO_Init+0x2f0>)
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d5c:	4a59      	ldr	r2, [pc, #356]	@ (8002ec4 <HAL_GPIO_Init+0x2f4>)
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	089b      	lsrs	r3, r3, #2
 8002d62:	3302      	adds	r3, #2
 8002d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f003 0303 	and.w	r3, r3, #3
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	220f      	movs	r2, #15
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002d86:	d025      	beq.n	8002dd4 <HAL_GPIO_Init+0x204>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a4f      	ldr	r2, [pc, #316]	@ (8002ec8 <HAL_GPIO_Init+0x2f8>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d01f      	beq.n	8002dd0 <HAL_GPIO_Init+0x200>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a4e      	ldr	r2, [pc, #312]	@ (8002ecc <HAL_GPIO_Init+0x2fc>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d019      	beq.n	8002dcc <HAL_GPIO_Init+0x1fc>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a4d      	ldr	r2, [pc, #308]	@ (8002ed0 <HAL_GPIO_Init+0x300>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d013      	beq.n	8002dc8 <HAL_GPIO_Init+0x1f8>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a4c      	ldr	r2, [pc, #304]	@ (8002ed4 <HAL_GPIO_Init+0x304>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d00d      	beq.n	8002dc4 <HAL_GPIO_Init+0x1f4>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a4b      	ldr	r2, [pc, #300]	@ (8002ed8 <HAL_GPIO_Init+0x308>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d007      	beq.n	8002dc0 <HAL_GPIO_Init+0x1f0>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a4a      	ldr	r2, [pc, #296]	@ (8002edc <HAL_GPIO_Init+0x30c>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d101      	bne.n	8002dbc <HAL_GPIO_Init+0x1ec>
 8002db8:	2306      	movs	r3, #6
 8002dba:	e00c      	b.n	8002dd6 <HAL_GPIO_Init+0x206>
 8002dbc:	2307      	movs	r3, #7
 8002dbe:	e00a      	b.n	8002dd6 <HAL_GPIO_Init+0x206>
 8002dc0:	2305      	movs	r3, #5
 8002dc2:	e008      	b.n	8002dd6 <HAL_GPIO_Init+0x206>
 8002dc4:	2304      	movs	r3, #4
 8002dc6:	e006      	b.n	8002dd6 <HAL_GPIO_Init+0x206>
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e004      	b.n	8002dd6 <HAL_GPIO_Init+0x206>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e002      	b.n	8002dd6 <HAL_GPIO_Init+0x206>
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e000      	b.n	8002dd6 <HAL_GPIO_Init+0x206>
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	f002 0203 	and.w	r2, r2, #3
 8002ddc:	0092      	lsls	r2, r2, #2
 8002dde:	4093      	lsls	r3, r2
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002de6:	4937      	ldr	r1, [pc, #220]	@ (8002ec4 <HAL_GPIO_Init+0x2f4>)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	089b      	lsrs	r3, r3, #2
 8002dec:	3302      	adds	r3, #2
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002df4:	4b3a      	ldr	r3, [pc, #232]	@ (8002ee0 <HAL_GPIO_Init+0x310>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	4013      	ands	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d003      	beq.n	8002e18 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002e18:	4a31      	ldr	r2, [pc, #196]	@ (8002ee0 <HAL_GPIO_Init+0x310>)
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e1e:	4b30      	ldr	r3, [pc, #192]	@ (8002ee0 <HAL_GPIO_Init+0x310>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	43db      	mvns	r3, r3
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002e42:	4a27      	ldr	r2, [pc, #156]	@ (8002ee0 <HAL_GPIO_Init+0x310>)
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e48:	4b25      	ldr	r3, [pc, #148]	@ (8002ee0 <HAL_GPIO_Init+0x310>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	43db      	mvns	r3, r3
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	4013      	ands	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002e6c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ee0 <HAL_GPIO_Init+0x310>)
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e72:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee0 <HAL_GPIO_Init+0x310>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002e96:	4a12      	ldr	r2, [pc, #72]	@ (8002ee0 <HAL_GPIO_Init+0x310>)
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f47f ae97 	bne.w	8002be0 <HAL_GPIO_Init+0x10>
  }
}
 8002eb2:	bf00      	nop
 8002eb4:	bf00      	nop
 8002eb6:	371c      	adds	r7, #28
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	40010000 	.word	0x40010000
 8002ec8:	48000400 	.word	0x48000400
 8002ecc:	48000800 	.word	0x48000800
 8002ed0:	48000c00 	.word	0x48000c00
 8002ed4:	48001000 	.word	0x48001000
 8002ed8:	48001400 	.word	0x48001400
 8002edc:	48001800 	.word	0x48001800
 8002ee0:	40010400 	.word	0x40010400

08002ee4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ef0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ef4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ef6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002efa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d102      	bne.n	8002f0a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	f001 b80a 	b.w	8003f1e <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f0e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 8161 	beq.w	80031e2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002f20:	4bae      	ldr	r3, [pc, #696]	@ (80031dc <HAL_RCC_OscConfig+0x2f8>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 030c 	and.w	r3, r3, #12
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d00c      	beq.n	8002f46 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f2c:	4bab      	ldr	r3, [pc, #684]	@ (80031dc <HAL_RCC_OscConfig+0x2f8>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 030c 	and.w	r3, r3, #12
 8002f34:	2b08      	cmp	r3, #8
 8002f36:	d157      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x104>
 8002f38:	4ba8      	ldr	r3, [pc, #672]	@ (80031dc <HAL_RCC_OscConfig+0x2f8>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002f40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f44:	d150      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x104>
 8002f46:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f4a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002f52:	fa93 f3a3 	rbit	r3, r3
 8002f56:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f5a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f5e:	fab3 f383 	clz	r3, r3
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b3f      	cmp	r3, #63	@ 0x3f
 8002f66:	d802      	bhi.n	8002f6e <HAL_RCC_OscConfig+0x8a>
 8002f68:	4b9c      	ldr	r3, [pc, #624]	@ (80031dc <HAL_RCC_OscConfig+0x2f8>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	e015      	b.n	8002f9a <HAL_RCC_OscConfig+0xb6>
 8002f6e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f72:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f76:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8002f7a:	fa93 f3a3 	rbit	r3, r3
 8002f7e:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8002f82:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f86:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002f8a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8002f8e:	fa93 f3a3 	rbit	r3, r3
 8002f92:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002f96:	4b91      	ldr	r3, [pc, #580]	@ (80031dc <HAL_RCC_OscConfig+0x2f8>)
 8002f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002f9e:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8002fa2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8002fa6:	fa92 f2a2 	rbit	r2, r2
 8002faa:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8002fae:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002fb2:	fab2 f282 	clz	r2, r2
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	f042 0220 	orr.w	r2, r2, #32
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	f002 021f 	and.w	r2, r2, #31
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc8:	4013      	ands	r3, r2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 8108 	beq.w	80031e0 <HAL_RCC_OscConfig+0x2fc>
 8002fd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fd4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f040 80ff 	bne.w	80031e0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	f000 bf9b 	b.w	8003f1e <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ff8:	d106      	bne.n	8003008 <HAL_RCC_OscConfig+0x124>
 8002ffa:	4b78      	ldr	r3, [pc, #480]	@ (80031dc <HAL_RCC_OscConfig+0x2f8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a77      	ldr	r2, [pc, #476]	@ (80031dc <HAL_RCC_OscConfig+0x2f8>)
 8003000:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	e036      	b.n	8003076 <HAL_RCC_OscConfig+0x192>
 8003008:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800300c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10c      	bne.n	8003032 <HAL_RCC_OscConfig+0x14e>
 8003018:	4b70      	ldr	r3, [pc, #448]	@ (80031dc <HAL_RCC_OscConfig+0x2f8>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a6f      	ldr	r2, [pc, #444]	@ (80031dc <HAL_RCC_OscConfig+0x2f8>)
 800301e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003022:	6013      	str	r3, [r2, #0]
 8003024:	4b6d      	ldr	r3, [pc, #436]	@ (80031dc <HAL_RCC_OscConfig+0x2f8>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a6c      	ldr	r2, [pc, #432]	@ (80031dc <HAL_RCC_OscConfig+0x2f8>)
 800302a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	e021      	b.n	8003076 <HAL_RCC_OscConfig+0x192>
 8003032:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003036:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003042:	d10c      	bne.n	800305e <HAL_RCC_OscConfig+0x17a>
 8003044:	4b65      	ldr	r3, [pc, #404]	@ (80031dc <HAL_RCC_OscConfig+0x2f8>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a64      	ldr	r2, [pc, #400]	@ (80031dc <HAL_RCC_OscConfig+0x2f8>)
 800304a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	4b62      	ldr	r3, [pc, #392]	@ (80031dc <HAL_RCC_OscConfig+0x2f8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a61      	ldr	r2, [pc, #388]	@ (80031dc <HAL_RCC_OscConfig+0x2f8>)
 8003056:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800305a:	6013      	str	r3, [r2, #0]
 800305c:	e00b      	b.n	8003076 <HAL_RCC_OscConfig+0x192>
 800305e:	4b5f      	ldr	r3, [pc, #380]	@ (80031dc <HAL_RCC_OscConfig+0x2f8>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a5e      	ldr	r2, [pc, #376]	@ (80031dc <HAL_RCC_OscConfig+0x2f8>)
 8003064:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	4b5c      	ldr	r3, [pc, #368]	@ (80031dc <HAL_RCC_OscConfig+0x2f8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a5b      	ldr	r2, [pc, #364]	@ (80031dc <HAL_RCC_OscConfig+0x2f8>)
 8003070:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003074:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003076:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800307a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d054      	beq.n	8003130 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003086:	f7fe fa79 	bl	800157c <HAL_GetTick>
 800308a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800308e:	e00a      	b.n	80030a6 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003090:	f7fe fa74 	bl	800157c <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b64      	cmp	r3, #100	@ 0x64
 800309e:	d902      	bls.n	80030a6 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	f000 bf3c 	b.w	8003f1e <HAL_RCC_OscConfig+0x103a>
 80030a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030aa:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ae:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80030b2:	fa93 f3a3 	rbit	r3, r3
 80030b6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80030ba:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030be:	fab3 f383 	clz	r3, r3
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80030c6:	d802      	bhi.n	80030ce <HAL_RCC_OscConfig+0x1ea>
 80030c8:	4b44      	ldr	r3, [pc, #272]	@ (80031dc <HAL_RCC_OscConfig+0x2f8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	e015      	b.n	80030fa <HAL_RCC_OscConfig+0x216>
 80030ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030d2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80030da:	fa93 f3a3 	rbit	r3, r3
 80030de:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80030e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030e6:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80030ea:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80030ee:	fa93 f3a3 	rbit	r3, r3
 80030f2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80030f6:	4b39      	ldr	r3, [pc, #228]	@ (80031dc <HAL_RCC_OscConfig+0x2f8>)
 80030f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80030fe:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8003102:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003106:	fa92 f2a2 	rbit	r2, r2
 800310a:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800310e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003112:	fab2 f282 	clz	r2, r2
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	f042 0220 	orr.w	r2, r2, #32
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	f002 021f 	and.w	r2, r2, #31
 8003122:	2101      	movs	r1, #1
 8003124:	fa01 f202 	lsl.w	r2, r1, r2
 8003128:	4013      	ands	r3, r2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0b0      	beq.n	8003090 <HAL_RCC_OscConfig+0x1ac>
 800312e:	e058      	b.n	80031e2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003130:	f7fe fa24 	bl	800157c <HAL_GetTick>
 8003134:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003138:	e00a      	b.n	8003150 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800313a:	f7fe fa1f 	bl	800157c <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b64      	cmp	r3, #100	@ 0x64
 8003148:	d902      	bls.n	8003150 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	f000 bee7 	b.w	8003f1e <HAL_RCC_OscConfig+0x103a>
 8003150:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003154:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003158:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800315c:	fa93 f3a3 	rbit	r3, r3
 8003160:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8003164:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003168:	fab3 f383 	clz	r3, r3
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003170:	d802      	bhi.n	8003178 <HAL_RCC_OscConfig+0x294>
 8003172:	4b1a      	ldr	r3, [pc, #104]	@ (80031dc <HAL_RCC_OscConfig+0x2f8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	e015      	b.n	80031a4 <HAL_RCC_OscConfig+0x2c0>
 8003178:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800317c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003180:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003184:	fa93 f3a3 	rbit	r3, r3
 8003188:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800318c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003190:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003194:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003198:	fa93 f3a3 	rbit	r3, r3
 800319c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80031a0:	4b0e      	ldr	r3, [pc, #56]	@ (80031dc <HAL_RCC_OscConfig+0x2f8>)
 80031a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80031a8:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80031ac:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80031b0:	fa92 f2a2 	rbit	r2, r2
 80031b4:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80031b8:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80031bc:	fab2 f282 	clz	r2, r2
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	f042 0220 	orr.w	r2, r2, #32
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	f002 021f 	and.w	r2, r2, #31
 80031cc:	2101      	movs	r1, #1
 80031ce:	fa01 f202 	lsl.w	r2, r1, r2
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1b0      	bne.n	800313a <HAL_RCC_OscConfig+0x256>
 80031d8:	e003      	b.n	80031e2 <HAL_RCC_OscConfig+0x2fe>
 80031da:	bf00      	nop
 80031dc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031e6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 816d 	beq.w	80034d2 <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80031f8:	4bcd      	ldr	r3, [pc, #820]	@ (8003530 <HAL_RCC_OscConfig+0x64c>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f003 030c 	and.w	r3, r3, #12
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00c      	beq.n	800321e <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003204:	4bca      	ldr	r3, [pc, #808]	@ (8003530 <HAL_RCC_OscConfig+0x64c>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 030c 	and.w	r3, r3, #12
 800320c:	2b08      	cmp	r3, #8
 800320e:	d16e      	bne.n	80032ee <HAL_RCC_OscConfig+0x40a>
 8003210:	4bc7      	ldr	r3, [pc, #796]	@ (8003530 <HAL_RCC_OscConfig+0x64c>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8003218:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800321c:	d167      	bne.n	80032ee <HAL_RCC_OscConfig+0x40a>
 800321e:	2302      	movs	r3, #2
 8003220:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003224:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003228:	fa93 f3a3 	rbit	r3, r3
 800322c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8003230:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003234:	fab3 f383 	clz	r3, r3
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b3f      	cmp	r3, #63	@ 0x3f
 800323c:	d802      	bhi.n	8003244 <HAL_RCC_OscConfig+0x360>
 800323e:	4bbc      	ldr	r3, [pc, #752]	@ (8003530 <HAL_RCC_OscConfig+0x64c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	e013      	b.n	800326c <HAL_RCC_OscConfig+0x388>
 8003244:	2302      	movs	r3, #2
 8003246:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800324e:	fa93 f3a3 	rbit	r3, r3
 8003252:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8003256:	2302      	movs	r3, #2
 8003258:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800325c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8003260:	fa93 f3a3 	rbit	r3, r3
 8003264:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003268:	4bb1      	ldr	r3, [pc, #708]	@ (8003530 <HAL_RCC_OscConfig+0x64c>)
 800326a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326c:	2202      	movs	r2, #2
 800326e:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8003272:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8003276:	fa92 f2a2 	rbit	r2, r2
 800327a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 800327e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003282:	fab2 f282 	clz	r2, r2
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	f042 0220 	orr.w	r2, r2, #32
 800328c:	b2d2      	uxtb	r2, r2
 800328e:	f002 021f 	and.w	r2, r2, #31
 8003292:	2101      	movs	r1, #1
 8003294:	fa01 f202 	lsl.w	r2, r1, r2
 8003298:	4013      	ands	r3, r2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00a      	beq.n	80032b4 <HAL_RCC_OscConfig+0x3d0>
 800329e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032a2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d002      	beq.n	80032b4 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	f000 be35 	b.w	8003f1e <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b4:	4b9e      	ldr	r3, [pc, #632]	@ (8003530 <HAL_RCC_OscConfig+0x64c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032c0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	21f8      	movs	r1, #248	@ 0xf8
 80032ca:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ce:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80032d2:	fa91 f1a1 	rbit	r1, r1
 80032d6:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80032da:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80032de:	fab1 f181 	clz	r1, r1
 80032e2:	b2c9      	uxtb	r1, r1
 80032e4:	408b      	lsls	r3, r1
 80032e6:	4992      	ldr	r1, [pc, #584]	@ (8003530 <HAL_RCC_OscConfig+0x64c>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ec:	e0f1      	b.n	80034d2 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032f2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 8083 	beq.w	8003406 <HAL_RCC_OscConfig+0x522>
 8003300:	2301      	movs	r3, #1
 8003302:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003306:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800330a:	fa93 f3a3 	rbit	r3, r3
 800330e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8003312:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003316:	fab3 f383 	clz	r3, r3
 800331a:	b2db      	uxtb	r3, r3
 800331c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003320:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	461a      	mov	r2, r3
 8003328:	2301      	movs	r3, #1
 800332a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332c:	f7fe f926 	bl	800157c <HAL_GetTick>
 8003330:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003334:	e00a      	b.n	800334c <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003336:	f7fe f921 	bl	800157c <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d902      	bls.n	800334c <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	f000 bde9 	b.w	8003f1e <HAL_RCC_OscConfig+0x103a>
 800334c:	2302      	movs	r3, #2
 800334e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003352:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8003356:	fa93 f3a3 	rbit	r3, r3
 800335a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 800335e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003362:	fab3 f383 	clz	r3, r3
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b3f      	cmp	r3, #63	@ 0x3f
 800336a:	d802      	bhi.n	8003372 <HAL_RCC_OscConfig+0x48e>
 800336c:	4b70      	ldr	r3, [pc, #448]	@ (8003530 <HAL_RCC_OscConfig+0x64c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	e013      	b.n	800339a <HAL_RCC_OscConfig+0x4b6>
 8003372:	2302      	movs	r3, #2
 8003374:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003378:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800337c:	fa93 f3a3 	rbit	r3, r3
 8003380:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003384:	2302      	movs	r3, #2
 8003386:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800338a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800338e:	fa93 f3a3 	rbit	r3, r3
 8003392:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003396:	4b66      	ldr	r3, [pc, #408]	@ (8003530 <HAL_RCC_OscConfig+0x64c>)
 8003398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339a:	2202      	movs	r2, #2
 800339c:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80033a0:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80033a4:	fa92 f2a2 	rbit	r2, r2
 80033a8:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80033ac:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80033b0:	fab2 f282 	clz	r2, r2
 80033b4:	b2d2      	uxtb	r2, r2
 80033b6:	f042 0220 	orr.w	r2, r2, #32
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	f002 021f 	and.w	r2, r2, #31
 80033c0:	2101      	movs	r1, #1
 80033c2:	fa01 f202 	lsl.w	r2, r1, r2
 80033c6:	4013      	ands	r3, r2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0b4      	beq.n	8003336 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033cc:	4b58      	ldr	r3, [pc, #352]	@ (8003530 <HAL_RCC_OscConfig+0x64c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033d8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	21f8      	movs	r1, #248	@ 0xf8
 80033e2:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e6:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80033ea:	fa91 f1a1 	rbit	r1, r1
 80033ee:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80033f2:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80033f6:	fab1 f181 	clz	r1, r1
 80033fa:	b2c9      	uxtb	r1, r1
 80033fc:	408b      	lsls	r3, r1
 80033fe:	494c      	ldr	r1, [pc, #304]	@ (8003530 <HAL_RCC_OscConfig+0x64c>)
 8003400:	4313      	orrs	r3, r2
 8003402:	600b      	str	r3, [r1, #0]
 8003404:	e065      	b.n	80034d2 <HAL_RCC_OscConfig+0x5ee>
 8003406:	2301      	movs	r3, #1
 8003408:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8003410:	fa93 f3a3 	rbit	r3, r3
 8003414:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8003418:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800341c:	fab3 f383 	clz	r3, r3
 8003420:	b2db      	uxtb	r3, r3
 8003422:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003426:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	461a      	mov	r2, r3
 800342e:	2300      	movs	r3, #0
 8003430:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003432:	f7fe f8a3 	bl	800157c <HAL_GetTick>
 8003436:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800343a:	e00a      	b.n	8003452 <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800343c:	f7fe f89e 	bl	800157c <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d902      	bls.n	8003452 <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	f000 bd66 	b.w	8003f1e <HAL_RCC_OscConfig+0x103a>
 8003452:	2302      	movs	r3, #2
 8003454:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003458:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800345c:	fa93 f3a3 	rbit	r3, r3
 8003460:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8003464:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003468:	fab3 f383 	clz	r3, r3
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003470:	d802      	bhi.n	8003478 <HAL_RCC_OscConfig+0x594>
 8003472:	4b2f      	ldr	r3, [pc, #188]	@ (8003530 <HAL_RCC_OscConfig+0x64c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	e013      	b.n	80034a0 <HAL_RCC_OscConfig+0x5bc>
 8003478:	2302      	movs	r3, #2
 800347a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003482:	fa93 f3a3 	rbit	r3, r3
 8003486:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800348a:	2302      	movs	r3, #2
 800348c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003490:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003494:	fa93 f3a3 	rbit	r3, r3
 8003498:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800349c:	4b24      	ldr	r3, [pc, #144]	@ (8003530 <HAL_RCC_OscConfig+0x64c>)
 800349e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a0:	2202      	movs	r2, #2
 80034a2:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80034a6:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80034aa:	fa92 f2a2 	rbit	r2, r2
 80034ae:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80034b2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80034b6:	fab2 f282 	clz	r2, r2
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	f042 0220 	orr.w	r2, r2, #32
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	f002 021f 	and.w	r2, r2, #31
 80034c6:	2101      	movs	r1, #1
 80034c8:	fa01 f202 	lsl.w	r2, r1, r2
 80034cc:	4013      	ands	r3, r2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1b4      	bne.n	800343c <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034d6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 8119 	beq.w	800371a <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034ec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 8082 	beq.w	80035fe <HAL_RCC_OscConfig+0x71a>
 80034fa:	2301      	movs	r3, #1
 80034fc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003504:	fa93 f3a3 	rbit	r3, r3
 8003508:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 800350c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003510:	fab3 f383 	clz	r3, r3
 8003514:	b2db      	uxtb	r3, r3
 8003516:	461a      	mov	r2, r3
 8003518:	4b06      	ldr	r3, [pc, #24]	@ (8003534 <HAL_RCC_OscConfig+0x650>)
 800351a:	4413      	add	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	461a      	mov	r2, r3
 8003520:	2301      	movs	r3, #1
 8003522:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003524:	f7fe f82a 	bl	800157c <HAL_GetTick>
 8003528:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800352c:	e00f      	b.n	800354e <HAL_RCC_OscConfig+0x66a>
 800352e:	bf00      	nop
 8003530:	40021000 	.word	0x40021000
 8003534:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003538:	f7fe f820 	bl	800157c <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d902      	bls.n	800354e <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	f000 bce8 	b.w	8003f1e <HAL_RCC_OscConfig+0x103a>
 800354e:	2302      	movs	r3, #2
 8003550:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003554:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003558:	fa93 f2a3 	rbit	r2, r3
 800355c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003560:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800356a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800356e:	2202      	movs	r2, #2
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003576:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	fa93 f2a3 	rbit	r2, r3
 8003580:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003584:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800358e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003592:	2202      	movs	r2, #2
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800359a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	fa93 f2a3 	rbit	r2, r3
 80035a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035a8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80035ac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ae:	4bb0      	ldr	r3, [pc, #704]	@ (8003870 <HAL_RCC_OscConfig+0x98c>)
 80035b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035b6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80035ba:	2102      	movs	r1, #2
 80035bc:	6019      	str	r1, [r3, #0]
 80035be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035c2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	fa93 f1a3 	rbit	r1, r3
 80035cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035d0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80035d4:	6019      	str	r1, [r3, #0]
  return result;
 80035d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035da:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	fab3 f383 	clz	r3, r3
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	f003 031f 	and.w	r3, r3, #31
 80035f0:	2101      	movs	r1, #1
 80035f2:	fa01 f303 	lsl.w	r3, r1, r3
 80035f6:	4013      	ands	r3, r2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d09d      	beq.n	8003538 <HAL_RCC_OscConfig+0x654>
 80035fc:	e08d      	b.n	800371a <HAL_RCC_OscConfig+0x836>
 80035fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003602:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003606:	2201      	movs	r2, #1
 8003608:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800360e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	fa93 f2a3 	rbit	r2, r3
 8003618:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800361c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003620:	601a      	str	r2, [r3, #0]
  return result;
 8003622:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003626:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800362a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800362c:	fab3 f383 	clz	r3, r3
 8003630:	b2db      	uxtb	r3, r3
 8003632:	461a      	mov	r2, r3
 8003634:	4b8f      	ldr	r3, [pc, #572]	@ (8003874 <HAL_RCC_OscConfig+0x990>)
 8003636:	4413      	add	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	461a      	mov	r2, r3
 800363c:	2300      	movs	r3, #0
 800363e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003640:	f7fd ff9c 	bl	800157c <HAL_GetTick>
 8003644:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003648:	e00a      	b.n	8003660 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800364a:	f7fd ff97 	bl	800157c <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d902      	bls.n	8003660 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	f000 bc5f 	b.w	8003f1e <HAL_RCC_OscConfig+0x103a>
 8003660:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003664:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003668:	2202      	movs	r2, #2
 800366a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003670:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	fa93 f2a3 	rbit	r2, r3
 800367a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800367e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003688:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800368c:	2202      	movs	r2, #2
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003694:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	fa93 f2a3 	rbit	r2, r3
 800369e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036a2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036ac:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80036b0:	2202      	movs	r2, #2
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036b8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	fa93 f2a3 	rbit	r2, r3
 80036c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036c6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80036ca:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036cc:	4b68      	ldr	r3, [pc, #416]	@ (8003870 <HAL_RCC_OscConfig+0x98c>)
 80036ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036d4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80036d8:	2102      	movs	r1, #2
 80036da:	6019      	str	r1, [r3, #0]
 80036dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036e0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	fa93 f1a3 	rbit	r1, r3
 80036ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036ee:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80036f2:	6019      	str	r1, [r3, #0]
  return result;
 80036f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036f8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	fab3 f383 	clz	r3, r3
 8003702:	b2db      	uxtb	r3, r3
 8003704:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003708:	b2db      	uxtb	r3, r3
 800370a:	f003 031f 	and.w	r3, r3, #31
 800370e:	2101      	movs	r1, #1
 8003710:	fa01 f303 	lsl.w	r3, r1, r3
 8003714:	4013      	ands	r3, r2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d197      	bne.n	800364a <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800371a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800371e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0304 	and.w	r3, r3, #4
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 819c 	beq.w	8003a68 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003730:	2300      	movs	r3, #0
 8003732:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003736:	4b4e      	ldr	r3, [pc, #312]	@ (8003870 <HAL_RCC_OscConfig+0x98c>)
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d116      	bne.n	8003770 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003742:	4b4b      	ldr	r3, [pc, #300]	@ (8003870 <HAL_RCC_OscConfig+0x98c>)
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	4a4a      	ldr	r2, [pc, #296]	@ (8003870 <HAL_RCC_OscConfig+0x98c>)
 8003748:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800374c:	61d3      	str	r3, [r2, #28]
 800374e:	4b48      	ldr	r3, [pc, #288]	@ (8003870 <HAL_RCC_OscConfig+0x98c>)
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003756:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800375a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003764:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003768:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800376a:	2301      	movs	r3, #1
 800376c:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003770:	4b41      	ldr	r3, [pc, #260]	@ (8003878 <HAL_RCC_OscConfig+0x994>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003778:	2b00      	cmp	r3, #0
 800377a:	d11a      	bne.n	80037b2 <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800377c:	4b3e      	ldr	r3, [pc, #248]	@ (8003878 <HAL_RCC_OscConfig+0x994>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a3d      	ldr	r2, [pc, #244]	@ (8003878 <HAL_RCC_OscConfig+0x994>)
 8003782:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003786:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003788:	f7fd fef8 	bl	800157c <HAL_GetTick>
 800378c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003790:	e009      	b.n	80037a6 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003792:	f7fd fef3 	bl	800157c <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b64      	cmp	r3, #100	@ 0x64
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e3bb      	b.n	8003f1e <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a6:	4b34      	ldr	r3, [pc, #208]	@ (8003878 <HAL_RCC_OscConfig+0x994>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0ef      	beq.n	8003792 <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037b6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d106      	bne.n	80037d0 <HAL_RCC_OscConfig+0x8ec>
 80037c2:	4b2b      	ldr	r3, [pc, #172]	@ (8003870 <HAL_RCC_OscConfig+0x98c>)
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	4a2a      	ldr	r2, [pc, #168]	@ (8003870 <HAL_RCC_OscConfig+0x98c>)
 80037c8:	f043 0301 	orr.w	r3, r3, #1
 80037cc:	6213      	str	r3, [r2, #32]
 80037ce:	e035      	b.n	800383c <HAL_RCC_OscConfig+0x958>
 80037d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037d4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10c      	bne.n	80037fa <HAL_RCC_OscConfig+0x916>
 80037e0:	4b23      	ldr	r3, [pc, #140]	@ (8003870 <HAL_RCC_OscConfig+0x98c>)
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	4a22      	ldr	r2, [pc, #136]	@ (8003870 <HAL_RCC_OscConfig+0x98c>)
 80037e6:	f023 0301 	bic.w	r3, r3, #1
 80037ea:	6213      	str	r3, [r2, #32]
 80037ec:	4b20      	ldr	r3, [pc, #128]	@ (8003870 <HAL_RCC_OscConfig+0x98c>)
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003870 <HAL_RCC_OscConfig+0x98c>)
 80037f2:	f023 0304 	bic.w	r3, r3, #4
 80037f6:	6213      	str	r3, [r2, #32]
 80037f8:	e020      	b.n	800383c <HAL_RCC_OscConfig+0x958>
 80037fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037fe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2b05      	cmp	r3, #5
 8003808:	d10c      	bne.n	8003824 <HAL_RCC_OscConfig+0x940>
 800380a:	4b19      	ldr	r3, [pc, #100]	@ (8003870 <HAL_RCC_OscConfig+0x98c>)
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	4a18      	ldr	r2, [pc, #96]	@ (8003870 <HAL_RCC_OscConfig+0x98c>)
 8003810:	f043 0304 	orr.w	r3, r3, #4
 8003814:	6213      	str	r3, [r2, #32]
 8003816:	4b16      	ldr	r3, [pc, #88]	@ (8003870 <HAL_RCC_OscConfig+0x98c>)
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	4a15      	ldr	r2, [pc, #84]	@ (8003870 <HAL_RCC_OscConfig+0x98c>)
 800381c:	f043 0301 	orr.w	r3, r3, #1
 8003820:	6213      	str	r3, [r2, #32]
 8003822:	e00b      	b.n	800383c <HAL_RCC_OscConfig+0x958>
 8003824:	4b12      	ldr	r3, [pc, #72]	@ (8003870 <HAL_RCC_OscConfig+0x98c>)
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	4a11      	ldr	r2, [pc, #68]	@ (8003870 <HAL_RCC_OscConfig+0x98c>)
 800382a:	f023 0301 	bic.w	r3, r3, #1
 800382e:	6213      	str	r3, [r2, #32]
 8003830:	4b0f      	ldr	r3, [pc, #60]	@ (8003870 <HAL_RCC_OscConfig+0x98c>)
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	4a0e      	ldr	r2, [pc, #56]	@ (8003870 <HAL_RCC_OscConfig+0x98c>)
 8003836:	f023 0304 	bic.w	r3, r3, #4
 800383a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800383c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003840:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 8085 	beq.w	8003958 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800384e:	f7fd fe95 	bl	800157c <HAL_GetTick>
 8003852:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003856:	e011      	b.n	800387c <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003858:	f7fd fe90 	bl	800157c <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003868:	4293      	cmp	r3, r2
 800386a:	d907      	bls.n	800387c <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e356      	b.n	8003f1e <HAL_RCC_OscConfig+0x103a>
 8003870:	40021000 	.word	0x40021000
 8003874:	10908120 	.word	0x10908120
 8003878:	40007000 	.word	0x40007000
 800387c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003880:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003884:	2202      	movs	r2, #2
 8003886:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003888:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800388c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	fa93 f2a3 	rbit	r2, r3
 8003896:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800389a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038a4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80038a8:	2202      	movs	r2, #2
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038b0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	fa93 f2a3 	rbit	r2, r3
 80038ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038be:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80038c2:	601a      	str	r2, [r3, #0]
  return result;
 80038c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038c8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80038cc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ce:	fab3 f383 	clz	r3, r3
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d102      	bne.n	80038e4 <HAL_RCC_OscConfig+0xa00>
 80038de:	4b98      	ldr	r3, [pc, #608]	@ (8003b40 <HAL_RCC_OscConfig+0xc5c>)
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	e013      	b.n	800390c <HAL_RCC_OscConfig+0xa28>
 80038e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038e8:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80038ec:	2202      	movs	r2, #2
 80038ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038f4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	fa93 f2a3 	rbit	r2, r3
 80038fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003902:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	4b8d      	ldr	r3, [pc, #564]	@ (8003b40 <HAL_RCC_OscConfig+0xc5c>)
 800390a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003910:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003914:	2102      	movs	r1, #2
 8003916:	6011      	str	r1, [r2, #0]
 8003918:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800391c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003920:	6812      	ldr	r2, [r2, #0]
 8003922:	fa92 f1a2 	rbit	r1, r2
 8003926:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800392a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800392e:	6011      	str	r1, [r2, #0]
  return result;
 8003930:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003934:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003938:	6812      	ldr	r2, [r2, #0]
 800393a:	fab2 f282 	clz	r2, r2
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	f002 021f 	and.w	r2, r2, #31
 800394a:	2101      	movs	r1, #1
 800394c:	fa01 f202 	lsl.w	r2, r1, r2
 8003950:	4013      	ands	r3, r2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d080      	beq.n	8003858 <HAL_RCC_OscConfig+0x974>
 8003956:	e07d      	b.n	8003a54 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003958:	f7fd fe10 	bl	800157c <HAL_GetTick>
 800395c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003960:	e00b      	b.n	800397a <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003962:	f7fd fe0b 	bl	800157c <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003972:	4293      	cmp	r3, r2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e2d1      	b.n	8003f1e <HAL_RCC_OscConfig+0x103a>
 800397a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800397e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003982:	2202      	movs	r2, #2
 8003984:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003986:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800398a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	fa93 f2a3 	rbit	r2, r3
 8003994:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003998:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039a2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80039a6:	2202      	movs	r2, #2
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039ae:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	fa93 f2a3 	rbit	r2, r3
 80039b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039bc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80039c0:	601a      	str	r2, [r3, #0]
  return result;
 80039c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039c6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80039ca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039cc:	fab3 f383 	clz	r3, r3
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d102      	bne.n	80039e2 <HAL_RCC_OscConfig+0xafe>
 80039dc:	4b58      	ldr	r3, [pc, #352]	@ (8003b40 <HAL_RCC_OscConfig+0xc5c>)
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	e013      	b.n	8003a0a <HAL_RCC_OscConfig+0xb26>
 80039e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039e6:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80039ea:	2202      	movs	r2, #2
 80039ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039f2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	fa93 f2a3 	rbit	r2, r3
 80039fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a00:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	4b4e      	ldr	r3, [pc, #312]	@ (8003b40 <HAL_RCC_OscConfig+0xc5c>)
 8003a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003a0e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003a12:	2102      	movs	r1, #2
 8003a14:	6011      	str	r1, [r2, #0]
 8003a16:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003a1a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003a1e:	6812      	ldr	r2, [r2, #0]
 8003a20:	fa92 f1a2 	rbit	r1, r2
 8003a24:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003a28:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003a2c:	6011      	str	r1, [r2, #0]
  return result;
 8003a2e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003a32:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003a36:	6812      	ldr	r2, [r2, #0]
 8003a38:	fab2 f282 	clz	r2, r2
 8003a3c:	b2d2      	uxtb	r2, r2
 8003a3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	f002 021f 	and.w	r2, r2, #31
 8003a48:	2101      	movs	r1, #1
 8003a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d186      	bne.n	8003962 <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a54:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d105      	bne.n	8003a68 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a5c:	4b38      	ldr	r3, [pc, #224]	@ (8003b40 <HAL_RCC_OscConfig+0xc5c>)
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	4a37      	ldr	r2, [pc, #220]	@ (8003b40 <HAL_RCC_OscConfig+0xc5c>)
 8003a62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a66:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a6c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 8251 	beq.w	8003f1c <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a7a:	4b31      	ldr	r3, [pc, #196]	@ (8003b40 <HAL_RCC_OscConfig+0xc5c>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f003 030c 	and.w	r3, r3, #12
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	f000 820f 	beq.w	8003ea6 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a8c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	f040 8165 	bne.w	8003d64 <HAL_RCC_OscConfig+0xe80>
 8003a9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a9e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003aa2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003aa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003aac:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	fa93 f2a3 	rbit	r2, r3
 8003ab6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003aba:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003abe:	601a      	str	r2, [r3, #0]
  return result;
 8003ac0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ac4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003ac8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aca:	fab3 f383 	clz	r3, r3
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003ad4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	461a      	mov	r2, r3
 8003adc:	2300      	movs	r3, #0
 8003ade:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae0:	f7fd fd4c 	bl	800157c <HAL_GetTick>
 8003ae4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ae8:	e009      	b.n	8003afe <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aea:	f7fd fd47 	bl	800157c <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e20f      	b.n	8003f1e <HAL_RCC_OscConfig+0x103a>
 8003afe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b02:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003b06:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b10:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	fa93 f2a3 	rbit	r2, r3
 8003b1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b1e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003b22:	601a      	str	r2, [r3, #0]
  return result;
 8003b24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b28:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003b2c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b2e:	fab3 f383 	clz	r3, r3
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b3f      	cmp	r3, #63	@ 0x3f
 8003b36:	d805      	bhi.n	8003b44 <HAL_RCC_OscConfig+0xc60>
 8003b38:	4b01      	ldr	r3, [pc, #4]	@ (8003b40 <HAL_RCC_OscConfig+0xc5c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	e02a      	b.n	8003b94 <HAL_RCC_OscConfig+0xcb0>
 8003b3e:	bf00      	nop
 8003b40:	40021000 	.word	0x40021000
 8003b44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b48:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003b4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b56:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	fa93 f2a3 	rbit	r2, r3
 8003b60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b64:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b6e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003b72:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b7c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	fa93 f2a3 	rbit	r2, r3
 8003b86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b8a:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	4bca      	ldr	r3, [pc, #808]	@ (8003ebc <HAL_RCC_OscConfig+0xfd8>)
 8003b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b94:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b98:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003b9c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003ba0:	6011      	str	r1, [r2, #0]
 8003ba2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003ba6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003baa:	6812      	ldr	r2, [r2, #0]
 8003bac:	fa92 f1a2 	rbit	r1, r2
 8003bb0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003bb4:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003bb8:	6011      	str	r1, [r2, #0]
  return result;
 8003bba:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003bbe:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003bc2:	6812      	ldr	r2, [r2, #0]
 8003bc4:	fab2 f282 	clz	r2, r2
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	f042 0220 	orr.w	r2, r2, #32
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	f002 021f 	and.w	r2, r2, #31
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	fa01 f202 	lsl.w	r2, r1, r2
 8003bda:	4013      	ands	r3, r2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d184      	bne.n	8003aea <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003be0:	4bb6      	ldr	r3, [pc, #728]	@ (8003ebc <HAL_RCC_OscConfig+0xfd8>)
 8003be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be4:	f023 020f 	bic.w	r2, r3, #15
 8003be8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf4:	49b1      	ldr	r1, [pc, #708]	@ (8003ebc <HAL_RCC_OscConfig+0xfd8>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8003bfa:	4bb0      	ldr	r3, [pc, #704]	@ (8003ebc <HAL_RCC_OscConfig+0xfd8>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8003c02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c06:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6a19      	ldr	r1, [r3, #32]
 8003c0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c12:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	430b      	orrs	r3, r1
 8003c1c:	49a7      	ldr	r1, [pc, #668]	@ (8003ebc <HAL_RCC_OscConfig+0xfd8>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	604b      	str	r3, [r1, #4]
 8003c22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c26:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003c2a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003c2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c34:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	fa93 f2a3 	rbit	r2, r3
 8003c3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c42:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003c46:	601a      	str	r2, [r3, #0]
  return result;
 8003c48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c4c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003c50:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c52:	fab3 f383 	clz	r3, r3
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003c5c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	461a      	mov	r2, r3
 8003c64:	2301      	movs	r3, #1
 8003c66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c68:	f7fd fc88 	bl	800157c <HAL_GetTick>
 8003c6c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c70:	e009      	b.n	8003c86 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c72:	f7fd fc83 	bl	800157c <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e14b      	b.n	8003f1e <HAL_RCC_OscConfig+0x103a>
 8003c86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c8a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003c8e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c98:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	fa93 f2a3 	rbit	r2, r3
 8003ca2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ca6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003caa:	601a      	str	r2, [r3, #0]
  return result;
 8003cac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cb0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003cb4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cb6:	fab3 f383 	clz	r3, r3
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b3f      	cmp	r3, #63	@ 0x3f
 8003cbe:	d802      	bhi.n	8003cc6 <HAL_RCC_OscConfig+0xde2>
 8003cc0:	4b7e      	ldr	r3, [pc, #504]	@ (8003ebc <HAL_RCC_OscConfig+0xfd8>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	e027      	b.n	8003d16 <HAL_RCC_OscConfig+0xe32>
 8003cc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cca:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003cce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003cd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cd8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	fa93 f2a3 	rbit	r2, r3
 8003ce2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ce6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cf0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003cf4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cfe:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	fa93 f2a3 	rbit	r2, r3
 8003d08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d0c:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	4b6a      	ldr	r3, [pc, #424]	@ (8003ebc <HAL_RCC_OscConfig+0xfd8>)
 8003d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d16:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003d1a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003d1e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003d22:	6011      	str	r1, [r2, #0]
 8003d24:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003d28:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003d2c:	6812      	ldr	r2, [r2, #0]
 8003d2e:	fa92 f1a2 	rbit	r1, r2
 8003d32:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003d36:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003d3a:	6011      	str	r1, [r2, #0]
  return result;
 8003d3c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003d40:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003d44:	6812      	ldr	r2, [r2, #0]
 8003d46:	fab2 f282 	clz	r2, r2
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	f042 0220 	orr.w	r2, r2, #32
 8003d50:	b2d2      	uxtb	r2, r2
 8003d52:	f002 021f 	and.w	r2, r2, #31
 8003d56:	2101      	movs	r1, #1
 8003d58:	fa01 f202 	lsl.w	r2, r1, r2
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d087      	beq.n	8003c72 <HAL_RCC_OscConfig+0xd8e>
 8003d62:	e0db      	b.n	8003f1c <HAL_RCC_OscConfig+0x1038>
 8003d64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d68:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003d6c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003d70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d76:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	fa93 f2a3 	rbit	r2, r3
 8003d80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d84:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003d88:	601a      	str	r2, [r3, #0]
  return result;
 8003d8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d8e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003d92:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d94:	fab3 f383 	clz	r3, r3
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003d9e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	461a      	mov	r2, r3
 8003da6:	2300      	movs	r3, #0
 8003da8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003daa:	f7fd fbe7 	bl	800157c <HAL_GetTick>
 8003dae:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003db2:	e009      	b.n	8003dc8 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db4:	f7fd fbe2 	bl	800157c <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e0aa      	b.n	8003f1e <HAL_RCC_OscConfig+0x103a>
 8003dc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003dcc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003dd0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003dd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003dda:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	fa93 f2a3 	rbit	r2, r3
 8003de4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003de8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003dec:	601a      	str	r2, [r3, #0]
  return result;
 8003dee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003df2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003df6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003df8:	fab3 f383 	clz	r3, r3
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b3f      	cmp	r3, #63	@ 0x3f
 8003e00:	d802      	bhi.n	8003e08 <HAL_RCC_OscConfig+0xf24>
 8003e02:	4b2e      	ldr	r3, [pc, #184]	@ (8003ebc <HAL_RCC_OscConfig+0xfd8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	e027      	b.n	8003e58 <HAL_RCC_OscConfig+0xf74>
 8003e08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e0c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003e10:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e1a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	fa93 f2a3 	rbit	r2, r3
 8003e24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e28:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e32:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003e36:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e40:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	fa93 f2a3 	rbit	r2, r3
 8003e4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e4e:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	4b19      	ldr	r3, [pc, #100]	@ (8003ebc <HAL_RCC_OscConfig+0xfd8>)
 8003e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e58:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003e5c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003e60:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003e64:	6011      	str	r1, [r2, #0]
 8003e66:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003e6a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003e6e:	6812      	ldr	r2, [r2, #0]
 8003e70:	fa92 f1a2 	rbit	r1, r2
 8003e74:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003e78:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003e7c:	6011      	str	r1, [r2, #0]
  return result;
 8003e7e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003e82:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003e86:	6812      	ldr	r2, [r2, #0]
 8003e88:	fab2 f282 	clz	r2, r2
 8003e8c:	b2d2      	uxtb	r2, r2
 8003e8e:	f042 0220 	orr.w	r2, r2, #32
 8003e92:	b2d2      	uxtb	r2, r2
 8003e94:	f002 021f 	and.w	r2, r2, #31
 8003e98:	2101      	movs	r1, #1
 8003e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d187      	bne.n	8003db4 <HAL_RCC_OscConfig+0xed0>
 8003ea4:	e03a      	b.n	8003f1c <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ea6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003eaa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d104      	bne.n	8003ec0 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e031      	b.n	8003f1e <HAL_RCC_OscConfig+0x103a>
 8003eba:	bf00      	nop
 8003ebc:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ec0:	4b19      	ldr	r3, [pc, #100]	@ (8003f28 <HAL_RCC_OscConfig+0x1044>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003ec8:	4b17      	ldr	r3, [pc, #92]	@ (8003f28 <HAL_RCC_OscConfig+0x1044>)
 8003eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ecc:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ed0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003ed4:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003ed8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003edc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d117      	bne.n	8003f18 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003ee8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003eec:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003ef0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ef4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d10b      	bne.n	8003f18 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003f00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003f04:	f003 020f 	and.w	r2, r3, #15
 8003f08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f0c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d001      	beq.n	8003f1c <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e000      	b.n	8003f1e <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40021000 	.word	0x40021000

08003f2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b09e      	sub	sp, #120	@ 0x78
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e154      	b.n	80041ee <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f44:	4b89      	ldr	r3, [pc, #548]	@ (800416c <HAL_RCC_ClockConfig+0x240>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d910      	bls.n	8003f74 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f52:	4b86      	ldr	r3, [pc, #536]	@ (800416c <HAL_RCC_ClockConfig+0x240>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f023 0207 	bic.w	r2, r3, #7
 8003f5a:	4984      	ldr	r1, [pc, #528]	@ (800416c <HAL_RCC_ClockConfig+0x240>)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f62:	4b82      	ldr	r3, [pc, #520]	@ (800416c <HAL_RCC_ClockConfig+0x240>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d001      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e13c      	b.n	80041ee <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d008      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f80:	4b7b      	ldr	r3, [pc, #492]	@ (8004170 <HAL_RCC_ClockConfig+0x244>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	4978      	ldr	r1, [pc, #480]	@ (8004170 <HAL_RCC_ClockConfig+0x244>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f000 80cd 	beq.w	800413a <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d137      	bne.n	8004018 <HAL_RCC_ClockConfig+0xec>
 8003fa8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003fac:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fb0:	fa93 f3a3 	rbit	r3, r3
 8003fb4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003fb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fb8:	fab3 f383 	clz	r3, r3
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b3f      	cmp	r3, #63	@ 0x3f
 8003fc0:	d802      	bhi.n	8003fc8 <HAL_RCC_ClockConfig+0x9c>
 8003fc2:	4b6b      	ldr	r3, [pc, #428]	@ (8004170 <HAL_RCC_ClockConfig+0x244>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	e00f      	b.n	8003fe8 <HAL_RCC_ClockConfig+0xbc>
 8003fc8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003fcc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003fd0:	fa93 f3a3 	rbit	r3, r3
 8003fd4:	667b      	str	r3, [r7, #100]	@ 0x64
 8003fd6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003fda:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fdc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003fde:	fa93 f3a3 	rbit	r3, r3
 8003fe2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fe4:	4b62      	ldr	r3, [pc, #392]	@ (8004170 <HAL_RCC_ClockConfig+0x244>)
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003fec:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003fee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ff0:	fa92 f2a2 	rbit	r2, r2
 8003ff4:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003ff6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003ff8:	fab2 f282 	clz	r2, r2
 8003ffc:	b2d2      	uxtb	r2, r2
 8003ffe:	f042 0220 	orr.w	r2, r2, #32
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	f002 021f 	and.w	r2, r2, #31
 8004008:	2101      	movs	r1, #1
 800400a:	fa01 f202 	lsl.w	r2, r1, r2
 800400e:	4013      	ands	r3, r2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d171      	bne.n	80040f8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e0ea      	b.n	80041ee <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2b02      	cmp	r3, #2
 800401e:	d137      	bne.n	8004090 <HAL_RCC_ClockConfig+0x164>
 8004020:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004024:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004026:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004028:	fa93 f3a3 	rbit	r3, r3
 800402c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800402e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004030:	fab3 f383 	clz	r3, r3
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b3f      	cmp	r3, #63	@ 0x3f
 8004038:	d802      	bhi.n	8004040 <HAL_RCC_ClockConfig+0x114>
 800403a:	4b4d      	ldr	r3, [pc, #308]	@ (8004170 <HAL_RCC_ClockConfig+0x244>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	e00f      	b.n	8004060 <HAL_RCC_ClockConfig+0x134>
 8004040:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004044:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004046:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004048:	fa93 f3a3 	rbit	r3, r3
 800404c:	647b      	str	r3, [r7, #68]	@ 0x44
 800404e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004052:	643b      	str	r3, [r7, #64]	@ 0x40
 8004054:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004056:	fa93 f3a3 	rbit	r3, r3
 800405a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800405c:	4b44      	ldr	r3, [pc, #272]	@ (8004170 <HAL_RCC_ClockConfig+0x244>)
 800405e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004060:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004064:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004066:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004068:	fa92 f2a2 	rbit	r2, r2
 800406c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800406e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004070:	fab2 f282 	clz	r2, r2
 8004074:	b2d2      	uxtb	r2, r2
 8004076:	f042 0220 	orr.w	r2, r2, #32
 800407a:	b2d2      	uxtb	r2, r2
 800407c:	f002 021f 	and.w	r2, r2, #31
 8004080:	2101      	movs	r1, #1
 8004082:	fa01 f202 	lsl.w	r2, r1, r2
 8004086:	4013      	ands	r3, r2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d135      	bne.n	80040f8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e0ae      	b.n	80041ee <HAL_RCC_ClockConfig+0x2c2>
 8004090:	2302      	movs	r3, #2
 8004092:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004096:	fa93 f3a3 	rbit	r3, r3
 800409a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800409c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800409e:	fab3 f383 	clz	r3, r3
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b3f      	cmp	r3, #63	@ 0x3f
 80040a6:	d802      	bhi.n	80040ae <HAL_RCC_ClockConfig+0x182>
 80040a8:	4b31      	ldr	r3, [pc, #196]	@ (8004170 <HAL_RCC_ClockConfig+0x244>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	e00d      	b.n	80040ca <HAL_RCC_ClockConfig+0x19e>
 80040ae:	2302      	movs	r3, #2
 80040b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b4:	fa93 f3a3 	rbit	r3, r3
 80040b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80040ba:	2302      	movs	r3, #2
 80040bc:	623b      	str	r3, [r7, #32]
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	fa93 f3a3 	rbit	r3, r3
 80040c4:	61fb      	str	r3, [r7, #28]
 80040c6:	4b2a      	ldr	r3, [pc, #168]	@ (8004170 <HAL_RCC_ClockConfig+0x244>)
 80040c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ca:	2202      	movs	r2, #2
 80040cc:	61ba      	str	r2, [r7, #24]
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	fa92 f2a2 	rbit	r2, r2
 80040d4:	617a      	str	r2, [r7, #20]
  return result;
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	fab2 f282 	clz	r2, r2
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	f042 0220 	orr.w	r2, r2, #32
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	f002 021f 	and.w	r2, r2, #31
 80040e8:	2101      	movs	r1, #1
 80040ea:	fa01 f202 	lsl.w	r2, r1, r2
 80040ee:	4013      	ands	r3, r2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e07a      	b.n	80041ee <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004170 <HAL_RCC_ClockConfig+0x244>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f023 0203 	bic.w	r2, r3, #3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	491a      	ldr	r1, [pc, #104]	@ (8004170 <HAL_RCC_ClockConfig+0x244>)
 8004106:	4313      	orrs	r3, r2
 8004108:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800410a:	f7fd fa37 	bl	800157c <HAL_GetTick>
 800410e:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004110:	e00a      	b.n	8004128 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004112:	f7fd fa33 	bl	800157c <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004120:	4293      	cmp	r3, r2
 8004122:	d901      	bls.n	8004128 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e062      	b.n	80041ee <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004128:	4b11      	ldr	r3, [pc, #68]	@ (8004170 <HAL_RCC_ClockConfig+0x244>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f003 020c 	and.w	r2, r3, #12
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	429a      	cmp	r2, r3
 8004138:	d1eb      	bne.n	8004112 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800413a:	4b0c      	ldr	r3, [pc, #48]	@ (800416c <HAL_RCC_ClockConfig+0x240>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0307 	and.w	r3, r3, #7
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	d215      	bcs.n	8004174 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004148:	4b08      	ldr	r3, [pc, #32]	@ (800416c <HAL_RCC_ClockConfig+0x240>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f023 0207 	bic.w	r2, r3, #7
 8004150:	4906      	ldr	r1, [pc, #24]	@ (800416c <HAL_RCC_ClockConfig+0x240>)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	4313      	orrs	r3, r2
 8004156:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004158:	4b04      	ldr	r3, [pc, #16]	@ (800416c <HAL_RCC_ClockConfig+0x240>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	d006      	beq.n	8004174 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e041      	b.n	80041ee <HAL_RCC_ClockConfig+0x2c2>
 800416a:	bf00      	nop
 800416c:	40022000 	.word	0x40022000
 8004170:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b00      	cmp	r3, #0
 800417e:	d008      	beq.n	8004192 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004180:	4b1d      	ldr	r3, [pc, #116]	@ (80041f8 <HAL_RCC_ClockConfig+0x2cc>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	491a      	ldr	r1, [pc, #104]	@ (80041f8 <HAL_RCC_ClockConfig+0x2cc>)
 800418e:	4313      	orrs	r3, r2
 8004190:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0308 	and.w	r3, r3, #8
 800419a:	2b00      	cmp	r3, #0
 800419c:	d009      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800419e:	4b16      	ldr	r3, [pc, #88]	@ (80041f8 <HAL_RCC_ClockConfig+0x2cc>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	4912      	ldr	r1, [pc, #72]	@ (80041f8 <HAL_RCC_ClockConfig+0x2cc>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80041b2:	f000 f829 	bl	8004208 <HAL_RCC_GetSysClockFreq>
 80041b6:	4601      	mov	r1, r0
 80041b8:	4b0f      	ldr	r3, [pc, #60]	@ (80041f8 <HAL_RCC_ClockConfig+0x2cc>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041c0:	22f0      	movs	r2, #240	@ 0xf0
 80041c2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	fa92 f2a2 	rbit	r2, r2
 80041ca:	60fa      	str	r2, [r7, #12]
  return result;
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	fab2 f282 	clz	r2, r2
 80041d2:	b2d2      	uxtb	r2, r2
 80041d4:	40d3      	lsrs	r3, r2
 80041d6:	4a09      	ldr	r2, [pc, #36]	@ (80041fc <HAL_RCC_ClockConfig+0x2d0>)
 80041d8:	5cd3      	ldrb	r3, [r2, r3]
 80041da:	fa21 f303 	lsr.w	r3, r1, r3
 80041de:	4a08      	ldr	r2, [pc, #32]	@ (8004200 <HAL_RCC_ClockConfig+0x2d4>)
 80041e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80041e2:	4b08      	ldr	r3, [pc, #32]	@ (8004204 <HAL_RCC_ClockConfig+0x2d8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fd f984 	bl	80014f4 <HAL_InitTick>
  
  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3778      	adds	r7, #120	@ 0x78
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	40021000 	.word	0x40021000
 80041fc:	0800598c 	.word	0x0800598c
 8004200:	20000000 	.word	0x20000000
 8004204:	20000004 	.word	0x20000004

08004208 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800420e:	2300      	movs	r3, #0
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	2300      	movs	r3, #0
 8004214:	60bb      	str	r3, [r7, #8]
 8004216:	2300      	movs	r3, #0
 8004218:	617b      	str	r3, [r7, #20]
 800421a:	2300      	movs	r3, #0
 800421c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800421e:	2300      	movs	r3, #0
 8004220:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004222:	4b1f      	ldr	r3, [pc, #124]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f003 030c 	and.w	r3, r3, #12
 800422e:	2b04      	cmp	r3, #4
 8004230:	d002      	beq.n	8004238 <HAL_RCC_GetSysClockFreq+0x30>
 8004232:	2b08      	cmp	r3, #8
 8004234:	d003      	beq.n	800423e <HAL_RCC_GetSysClockFreq+0x36>
 8004236:	e029      	b.n	800428c <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004238:	4b1a      	ldr	r3, [pc, #104]	@ (80042a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800423a:	613b      	str	r3, [r7, #16]
      break;
 800423c:	e029      	b.n	8004292 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	0c9b      	lsrs	r3, r3, #18
 8004242:	f003 030f 	and.w	r3, r3, #15
 8004246:	4a18      	ldr	r2, [pc, #96]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004248:	5cd3      	ldrb	r3, [r2, r3]
 800424a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800424c:	4b14      	ldr	r3, [pc, #80]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800424e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004250:	f003 030f 	and.w	r3, r3, #15
 8004254:	4a15      	ldr	r2, [pc, #84]	@ (80042ac <HAL_RCC_GetSysClockFreq+0xa4>)
 8004256:	5cd3      	ldrb	r3, [r2, r3]
 8004258:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d008      	beq.n	8004276 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004264:	4a0f      	ldr	r2, [pc, #60]	@ (80042a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	fbb2 f2f3 	udiv	r2, r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	fb02 f303 	mul.w	r3, r2, r3
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	e007      	b.n	8004286 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004276:	4a0b      	ldr	r2, [pc, #44]	@ (80042a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	fbb2 f2f3 	udiv	r2, r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	fb02 f303 	mul.w	r3, r2, r3
 8004284:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	613b      	str	r3, [r7, #16]
      break;
 800428a:	e002      	b.n	8004292 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800428c:	4b05      	ldr	r3, [pc, #20]	@ (80042a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800428e:	613b      	str	r3, [r7, #16]
      break;
 8004290:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004292:	693b      	ldr	r3, [r7, #16]
}
 8004294:	4618      	mov	r0, r3
 8004296:	371c      	adds	r7, #28
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	40021000 	.word	0x40021000
 80042a4:	007a1200 	.word	0x007a1200
 80042a8:	0800599c 	.word	0x0800599c
 80042ac:	080059ac 	.word	0x080059ac

080042b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b092      	sub	sp, #72	@ 0x48
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80042c0:	2300      	movs	r3, #0
 80042c2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 80d2 	beq.w	8004478 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042d4:	4b4d      	ldr	r3, [pc, #308]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10e      	bne.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042e0:	4b4a      	ldr	r3, [pc, #296]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	4a49      	ldr	r2, [pc, #292]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80042e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042ea:	61d3      	str	r3, [r2, #28]
 80042ec:	4b47      	ldr	r3, [pc, #284]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042f4:	60bb      	str	r3, [r7, #8]
 80042f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042f8:	2301      	movs	r3, #1
 80042fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fe:	4b44      	ldr	r3, [pc, #272]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004306:	2b00      	cmp	r3, #0
 8004308:	d118      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800430a:	4b41      	ldr	r3, [pc, #260]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a40      	ldr	r2, [pc, #256]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004314:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004316:	f7fd f931 	bl	800157c <HAL_GetTick>
 800431a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800431c:	e008      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800431e:	f7fd f92d 	bl	800157c <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b64      	cmp	r3, #100	@ 0x64
 800432a:	d901      	bls.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e1d4      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004330:	4b37      	ldr	r3, [pc, #220]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0f0      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800433c:	4b33      	ldr	r3, [pc, #204]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004344:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 8082 	beq.w	8004452 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004356:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004358:	429a      	cmp	r2, r3
 800435a:	d07a      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800435c:	4b2b      	ldr	r3, [pc, #172]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004364:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004366:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800436a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800436e:	fa93 f3a3 	rbit	r3, r3
 8004372:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004376:	fab3 f383 	clz	r3, r3
 800437a:	b2db      	uxtb	r3, r3
 800437c:	461a      	mov	r2, r3
 800437e:	4b25      	ldr	r3, [pc, #148]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004380:	4413      	add	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	461a      	mov	r2, r3
 8004386:	2301      	movs	r3, #1
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800438e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004392:	fa93 f3a3 	rbit	r3, r3
 8004396:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800439a:	fab3 f383 	clz	r3, r3
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	461a      	mov	r2, r3
 80043a2:	4b1c      	ldr	r3, [pc, #112]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043a4:	4413      	add	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	461a      	mov	r2, r3
 80043aa:	2300      	movs	r3, #0
 80043ac:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80043ae:	4a17      	ldr	r2, [pc, #92]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80043b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043b2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80043b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d049      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043be:	f7fd f8dd 	bl	800157c <HAL_GetTick>
 80043c2:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c4:	e00a      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043c6:	f7fd f8d9 	bl	800157c <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d901      	bls.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e17e      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80043dc:	2302      	movs	r3, #2
 80043de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e2:	fa93 f3a3 	rbit	r3, r3
 80043e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80043e8:	2302      	movs	r3, #2
 80043ea:	623b      	str	r3, [r7, #32]
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	fa93 f3a3 	rbit	r3, r3
 80043f2:	61fb      	str	r3, [r7, #28]
  return result;
 80043f4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f6:	fab3 f383 	clz	r3, r3
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d108      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004406:	4b01      	ldr	r3, [pc, #4]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	e00d      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800440c:	40021000 	.word	0x40021000
 8004410:	40007000 	.word	0x40007000
 8004414:	10908100 	.word	0x10908100
 8004418:	2302      	movs	r3, #2
 800441a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	fa93 f3a3 	rbit	r3, r3
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	4b9a      	ldr	r3, [pc, #616]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004428:	2202      	movs	r2, #2
 800442a:	613a      	str	r2, [r7, #16]
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	fa92 f2a2 	rbit	r2, r2
 8004432:	60fa      	str	r2, [r7, #12]
  return result;
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	fab2 f282 	clz	r2, r2
 800443a:	b2d2      	uxtb	r2, r2
 800443c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	f002 021f 	and.w	r2, r2, #31
 8004446:	2101      	movs	r1, #1
 8004448:	fa01 f202 	lsl.w	r2, r1, r2
 800444c:	4013      	ands	r3, r2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d0b9      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004452:	4b8f      	ldr	r3, [pc, #572]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	498c      	ldr	r1, [pc, #560]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004460:	4313      	orrs	r3, r2
 8004462:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004464:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004468:	2b01      	cmp	r3, #1
 800446a:	d105      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800446c:	4b88      	ldr	r3, [pc, #544]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	4a87      	ldr	r2, [pc, #540]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004472:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004476:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b00      	cmp	r3, #0
 8004482:	d008      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004484:	4b82      	ldr	r3, [pc, #520]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004488:	f023 0203 	bic.w	r2, r3, #3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	497f      	ldr	r1, [pc, #508]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004492:	4313      	orrs	r3, r2
 8004494:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d008      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044a2:	4b7b      	ldr	r3, [pc, #492]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	4978      	ldr	r1, [pc, #480]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d008      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044c0:	4b73      	ldr	r3, [pc, #460]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	4970      	ldr	r1, [pc, #448]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d008      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044de:	4b6c      	ldr	r3, [pc, #432]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e2:	f023 0210 	bic.w	r2, r3, #16
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	4969      	ldr	r1, [pc, #420]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d008      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80044fc:	4b64      	ldr	r3, [pc, #400]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004508:	4961      	ldr	r1, [pc, #388]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800450a:	4313      	orrs	r3, r2
 800450c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004516:	2b00      	cmp	r3, #0
 8004518:	d008      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800451a:	4b5d      	ldr	r3, [pc, #372]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800451c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451e:	f023 0220 	bic.w	r2, r3, #32
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	495a      	ldr	r1, [pc, #360]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004528:	4313      	orrs	r3, r2
 800452a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d008      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004538:	4b55      	ldr	r3, [pc, #340]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800453a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004544:	4952      	ldr	r1, [pc, #328]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004546:	4313      	orrs	r3, r2
 8004548:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0308 	and.w	r3, r3, #8
 8004552:	2b00      	cmp	r3, #0
 8004554:	d008      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004556:	4b4e      	ldr	r3, [pc, #312]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	494b      	ldr	r1, [pc, #300]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004564:	4313      	orrs	r3, r2
 8004566:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0310 	and.w	r3, r3, #16
 8004570:	2b00      	cmp	r3, #0
 8004572:	d008      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004574:	4b46      	ldr	r3, [pc, #280]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004578:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	4943      	ldr	r1, [pc, #268]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004582:	4313      	orrs	r3, r2
 8004584:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800458e:	2b00      	cmp	r3, #0
 8004590:	d008      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004592:	4b3f      	ldr	r3, [pc, #252]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459e:	493c      	ldr	r1, [pc, #240]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d008      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80045b0:	4b37      	ldr	r3, [pc, #220]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b4:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045bc:	4934      	ldr	r1, [pc, #208]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d008      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80045ce:	4b30      	ldr	r3, [pc, #192]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d2:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045da:	492d      	ldr	r1, [pc, #180]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d008      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80045ec:	4b28      	ldr	r3, [pc, #160]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045f8:	4925      	ldr	r1, [pc, #148]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d008      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800460a:	4b21      	ldr	r3, [pc, #132]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800460c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004616:	491e      	ldr	r1, [pc, #120]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004618:	4313      	orrs	r3, r2
 800461a:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d008      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004628:	4b19      	ldr	r3, [pc, #100]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800462a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004634:	4916      	ldr	r1, [pc, #88]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004636:	4313      	orrs	r3, r2
 8004638:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d008      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004646:	4b12      	ldr	r3, [pc, #72]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800464a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004652:	490f      	ldr	r1, [pc, #60]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004654:	4313      	orrs	r3, r2
 8004656:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d008      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004664:	4b0a      	ldr	r3, [pc, #40]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004668:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004670:	4907      	ldr	r1, [pc, #28]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004672:	4313      	orrs	r3, r2
 8004674:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00c      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004682:	4b03      	ldr	r3, [pc, #12]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004686:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	e002      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800468e:	bf00      	nop
 8004690:	40021000 	.word	0x40021000
 8004694:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004696:	4913      	ldr	r1, [pc, #76]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004698:	4313      	orrs	r3, r2
 800469a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d008      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80046a8:	4b0e      	ldr	r3, [pc, #56]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80046aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046b4:	490b      	ldr	r1, [pc, #44]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d008      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80046c6:	4b07      	ldr	r3, [pc, #28]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80046c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ca:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046d2:	4904      	ldr	r1, [pc, #16]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3748      	adds	r7, #72	@ 0x48
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	40021000 	.word	0x40021000

080046e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e049      	b.n	800478e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d106      	bne.n	8004714 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7fc fdec 	bl	80012ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3304      	adds	r3, #4
 8004724:	4619      	mov	r1, r3
 8004726:	4610      	mov	r0, r2
 8004728:	f000 fb76 	bl	8004e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b082      	sub	sp, #8
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e049      	b.n	800483c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d106      	bne.n	80047c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f7fc fdb5 	bl	800132c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2202      	movs	r2, #2
 80047c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	3304      	adds	r3, #4
 80047d2:	4619      	mov	r1, r3
 80047d4:	4610      	mov	r0, r2
 80047d6:	f000 fb1f 	bl	8004e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d109      	bne.n	8004868 <HAL_TIM_PWM_Start+0x24>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b01      	cmp	r3, #1
 800485e:	bf14      	ite	ne
 8004860:	2301      	movne	r3, #1
 8004862:	2300      	moveq	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	e03c      	b.n	80048e2 <HAL_TIM_PWM_Start+0x9e>
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	2b04      	cmp	r3, #4
 800486c:	d109      	bne.n	8004882 <HAL_TIM_PWM_Start+0x3e>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b01      	cmp	r3, #1
 8004878:	bf14      	ite	ne
 800487a:	2301      	movne	r3, #1
 800487c:	2300      	moveq	r3, #0
 800487e:	b2db      	uxtb	r3, r3
 8004880:	e02f      	b.n	80048e2 <HAL_TIM_PWM_Start+0x9e>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	2b08      	cmp	r3, #8
 8004886:	d109      	bne.n	800489c <HAL_TIM_PWM_Start+0x58>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b01      	cmp	r3, #1
 8004892:	bf14      	ite	ne
 8004894:	2301      	movne	r3, #1
 8004896:	2300      	moveq	r3, #0
 8004898:	b2db      	uxtb	r3, r3
 800489a:	e022      	b.n	80048e2 <HAL_TIM_PWM_Start+0x9e>
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	2b0c      	cmp	r3, #12
 80048a0:	d109      	bne.n	80048b6 <HAL_TIM_PWM_Start+0x72>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	bf14      	ite	ne
 80048ae:	2301      	movne	r3, #1
 80048b0:	2300      	moveq	r3, #0
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	e015      	b.n	80048e2 <HAL_TIM_PWM_Start+0x9e>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2b10      	cmp	r3, #16
 80048ba:	d109      	bne.n	80048d0 <HAL_TIM_PWM_Start+0x8c>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	bf14      	ite	ne
 80048c8:	2301      	movne	r3, #1
 80048ca:	2300      	moveq	r3, #0
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	e008      	b.n	80048e2 <HAL_TIM_PWM_Start+0x9e>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b01      	cmp	r3, #1
 80048da:	bf14      	ite	ne
 80048dc:	2301      	movne	r3, #1
 80048de:	2300      	moveq	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e0a1      	b.n	8004a2e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d104      	bne.n	80048fa <HAL_TIM_PWM_Start+0xb6>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048f8:	e023      	b.n	8004942 <HAL_TIM_PWM_Start+0xfe>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b04      	cmp	r3, #4
 80048fe:	d104      	bne.n	800490a <HAL_TIM_PWM_Start+0xc6>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004908:	e01b      	b.n	8004942 <HAL_TIM_PWM_Start+0xfe>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b08      	cmp	r3, #8
 800490e:	d104      	bne.n	800491a <HAL_TIM_PWM_Start+0xd6>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004918:	e013      	b.n	8004942 <HAL_TIM_PWM_Start+0xfe>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b0c      	cmp	r3, #12
 800491e:	d104      	bne.n	800492a <HAL_TIM_PWM_Start+0xe6>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004928:	e00b      	b.n	8004942 <HAL_TIM_PWM_Start+0xfe>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b10      	cmp	r3, #16
 800492e:	d104      	bne.n	800493a <HAL_TIM_PWM_Start+0xf6>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004938:	e003      	b.n	8004942 <HAL_TIM_PWM_Start+0xfe>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2202      	movs	r2, #2
 800493e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2201      	movs	r2, #1
 8004948:	6839      	ldr	r1, [r7, #0]
 800494a:	4618      	mov	r0, r3
 800494c:	f000 feae 	bl	80056ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a38      	ldr	r2, [pc, #224]	@ (8004a38 <HAL_TIM_PWM_Start+0x1f4>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d018      	beq.n	800498c <HAL_TIM_PWM_Start+0x148>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a37      	ldr	r2, [pc, #220]	@ (8004a3c <HAL_TIM_PWM_Start+0x1f8>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d013      	beq.n	800498c <HAL_TIM_PWM_Start+0x148>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a35      	ldr	r2, [pc, #212]	@ (8004a40 <HAL_TIM_PWM_Start+0x1fc>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d00e      	beq.n	800498c <HAL_TIM_PWM_Start+0x148>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a34      	ldr	r2, [pc, #208]	@ (8004a44 <HAL_TIM_PWM_Start+0x200>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d009      	beq.n	800498c <HAL_TIM_PWM_Start+0x148>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a32      	ldr	r2, [pc, #200]	@ (8004a48 <HAL_TIM_PWM_Start+0x204>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d004      	beq.n	800498c <HAL_TIM_PWM_Start+0x148>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a31      	ldr	r2, [pc, #196]	@ (8004a4c <HAL_TIM_PWM_Start+0x208>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d101      	bne.n	8004990 <HAL_TIM_PWM_Start+0x14c>
 800498c:	2301      	movs	r3, #1
 800498e:	e000      	b.n	8004992 <HAL_TIM_PWM_Start+0x14e>
 8004990:	2300      	movs	r3, #0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d007      	beq.n	80049a6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a23      	ldr	r2, [pc, #140]	@ (8004a38 <HAL_TIM_PWM_Start+0x1f4>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d01d      	beq.n	80049ec <HAL_TIM_PWM_Start+0x1a8>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049b8:	d018      	beq.n	80049ec <HAL_TIM_PWM_Start+0x1a8>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a24      	ldr	r2, [pc, #144]	@ (8004a50 <HAL_TIM_PWM_Start+0x20c>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d013      	beq.n	80049ec <HAL_TIM_PWM_Start+0x1a8>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a22      	ldr	r2, [pc, #136]	@ (8004a54 <HAL_TIM_PWM_Start+0x210>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d00e      	beq.n	80049ec <HAL_TIM_PWM_Start+0x1a8>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a1a      	ldr	r2, [pc, #104]	@ (8004a3c <HAL_TIM_PWM_Start+0x1f8>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d009      	beq.n	80049ec <HAL_TIM_PWM_Start+0x1a8>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a18      	ldr	r2, [pc, #96]	@ (8004a40 <HAL_TIM_PWM_Start+0x1fc>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d004      	beq.n	80049ec <HAL_TIM_PWM_Start+0x1a8>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a19      	ldr	r2, [pc, #100]	@ (8004a4c <HAL_TIM_PWM_Start+0x208>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d115      	bne.n	8004a18 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689a      	ldr	r2, [r3, #8]
 80049f2:	4b19      	ldr	r3, [pc, #100]	@ (8004a58 <HAL_TIM_PWM_Start+0x214>)
 80049f4:	4013      	ands	r3, r2
 80049f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2b06      	cmp	r3, #6
 80049fc:	d015      	beq.n	8004a2a <HAL_TIM_PWM_Start+0x1e6>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a04:	d011      	beq.n	8004a2a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f042 0201 	orr.w	r2, r2, #1
 8004a14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a16:	e008      	b.n	8004a2a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f042 0201 	orr.w	r2, r2, #1
 8004a26:	601a      	str	r2, [r3, #0]
 8004a28:	e000      	b.n	8004a2c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	40012c00 	.word	0x40012c00
 8004a3c:	40013400 	.word	0x40013400
 8004a40:	40014000 	.word	0x40014000
 8004a44:	40014400 	.word	0x40014400
 8004a48:	40014800 	.word	0x40014800
 8004a4c:	40015000 	.word	0x40015000
 8004a50:	40000400 	.word	0x40000400
 8004a54:	40000800 	.word	0x40000800
 8004a58:	00010007 	.word	0x00010007

08004a5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d101      	bne.n	8004a7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a76:	2302      	movs	r3, #2
 8004a78:	e0ff      	b.n	8004c7a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b14      	cmp	r3, #20
 8004a86:	f200 80f0 	bhi.w	8004c6a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a90:	08004ae5 	.word	0x08004ae5
 8004a94:	08004c6b 	.word	0x08004c6b
 8004a98:	08004c6b 	.word	0x08004c6b
 8004a9c:	08004c6b 	.word	0x08004c6b
 8004aa0:	08004b25 	.word	0x08004b25
 8004aa4:	08004c6b 	.word	0x08004c6b
 8004aa8:	08004c6b 	.word	0x08004c6b
 8004aac:	08004c6b 	.word	0x08004c6b
 8004ab0:	08004b67 	.word	0x08004b67
 8004ab4:	08004c6b 	.word	0x08004c6b
 8004ab8:	08004c6b 	.word	0x08004c6b
 8004abc:	08004c6b 	.word	0x08004c6b
 8004ac0:	08004ba7 	.word	0x08004ba7
 8004ac4:	08004c6b 	.word	0x08004c6b
 8004ac8:	08004c6b 	.word	0x08004c6b
 8004acc:	08004c6b 	.word	0x08004c6b
 8004ad0:	08004be9 	.word	0x08004be9
 8004ad4:	08004c6b 	.word	0x08004c6b
 8004ad8:	08004c6b 	.word	0x08004c6b
 8004adc:	08004c6b 	.word	0x08004c6b
 8004ae0:	08004c29 	.word	0x08004c29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68b9      	ldr	r1, [r7, #8]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 fa3e 	bl	8004f6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	699a      	ldr	r2, [r3, #24]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f042 0208 	orr.w	r2, r2, #8
 8004afe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	699a      	ldr	r2, [r3, #24]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 0204 	bic.w	r2, r2, #4
 8004b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6999      	ldr	r1, [r3, #24]
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	691a      	ldr	r2, [r3, #16]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	619a      	str	r2, [r3, #24]
      break;
 8004b22:	e0a5      	b.n	8004c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68b9      	ldr	r1, [r7, #8]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 fab8 	bl	80050a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699a      	ldr	r2, [r3, #24]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	699a      	ldr	r2, [r3, #24]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6999      	ldr	r1, [r3, #24]
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	021a      	lsls	r2, r3, #8
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	619a      	str	r2, [r3, #24]
      break;
 8004b64:	e084      	b.n	8004c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68b9      	ldr	r1, [r7, #8]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 fb2b 	bl	80051c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	69da      	ldr	r2, [r3, #28]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f042 0208 	orr.w	r2, r2, #8
 8004b80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	69da      	ldr	r2, [r3, #28]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 0204 	bic.w	r2, r2, #4
 8004b90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	69d9      	ldr	r1, [r3, #28]
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	691a      	ldr	r2, [r3, #16]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	61da      	str	r2, [r3, #28]
      break;
 8004ba4:	e064      	b.n	8004c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68b9      	ldr	r1, [r7, #8]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 fb9d 	bl	80052ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	69da      	ldr	r2, [r3, #28]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69da      	ldr	r2, [r3, #28]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	69d9      	ldr	r1, [r3, #28]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	021a      	lsls	r2, r3, #8
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	61da      	str	r2, [r3, #28]
      break;
 8004be6:	e043      	b.n	8004c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68b9      	ldr	r1, [r7, #8]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 fbec 	bl	80053cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0208 	orr.w	r2, r2, #8
 8004c02:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 0204 	bic.w	r2, r2, #4
 8004c12:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	691a      	ldr	r2, [r3, #16]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004c26:	e023      	b.n	8004c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68b9      	ldr	r1, [r7, #8]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 fc36 	bl	80054a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c42:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c52:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	021a      	lsls	r2, r3, #8
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004c68:	e002      	b.n	8004c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8004c6e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3718      	adds	r7, #24
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop

08004c84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d101      	bne.n	8004ca0 <HAL_TIM_ConfigClockSource+0x1c>
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	e0b6      	b.n	8004e0e <HAL_TIM_ConfigClockSource+0x18a>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cbe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004cc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cdc:	d03e      	beq.n	8004d5c <HAL_TIM_ConfigClockSource+0xd8>
 8004cde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ce2:	f200 8087 	bhi.w	8004df4 <HAL_TIM_ConfigClockSource+0x170>
 8004ce6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cea:	f000 8086 	beq.w	8004dfa <HAL_TIM_ConfigClockSource+0x176>
 8004cee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cf2:	d87f      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x170>
 8004cf4:	2b70      	cmp	r3, #112	@ 0x70
 8004cf6:	d01a      	beq.n	8004d2e <HAL_TIM_ConfigClockSource+0xaa>
 8004cf8:	2b70      	cmp	r3, #112	@ 0x70
 8004cfa:	d87b      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x170>
 8004cfc:	2b60      	cmp	r3, #96	@ 0x60
 8004cfe:	d050      	beq.n	8004da2 <HAL_TIM_ConfigClockSource+0x11e>
 8004d00:	2b60      	cmp	r3, #96	@ 0x60
 8004d02:	d877      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x170>
 8004d04:	2b50      	cmp	r3, #80	@ 0x50
 8004d06:	d03c      	beq.n	8004d82 <HAL_TIM_ConfigClockSource+0xfe>
 8004d08:	2b50      	cmp	r3, #80	@ 0x50
 8004d0a:	d873      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x170>
 8004d0c:	2b40      	cmp	r3, #64	@ 0x40
 8004d0e:	d058      	beq.n	8004dc2 <HAL_TIM_ConfigClockSource+0x13e>
 8004d10:	2b40      	cmp	r3, #64	@ 0x40
 8004d12:	d86f      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x170>
 8004d14:	2b30      	cmp	r3, #48	@ 0x30
 8004d16:	d064      	beq.n	8004de2 <HAL_TIM_ConfigClockSource+0x15e>
 8004d18:	2b30      	cmp	r3, #48	@ 0x30
 8004d1a:	d86b      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x170>
 8004d1c:	2b20      	cmp	r3, #32
 8004d1e:	d060      	beq.n	8004de2 <HAL_TIM_ConfigClockSource+0x15e>
 8004d20:	2b20      	cmp	r3, #32
 8004d22:	d867      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x170>
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d05c      	beq.n	8004de2 <HAL_TIM_ConfigClockSource+0x15e>
 8004d28:	2b10      	cmp	r3, #16
 8004d2a:	d05a      	beq.n	8004de2 <HAL_TIM_ConfigClockSource+0x15e>
 8004d2c:	e062      	b.n	8004df4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d3e:	f000 fc95 	bl	800566c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	609a      	str	r2, [r3, #8]
      break;
 8004d5a:	e04f      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d6c:	f000 fc7e 	bl	800566c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689a      	ldr	r2, [r3, #8]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d7e:	609a      	str	r2, [r3, #8]
      break;
 8004d80:	e03c      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d8e:	461a      	mov	r2, r3
 8004d90:	f000 fbf2 	bl	8005578 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2150      	movs	r1, #80	@ 0x50
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 fc4b 	bl	8005636 <TIM_ITRx_SetConfig>
      break;
 8004da0:	e02c      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dae:	461a      	mov	r2, r3
 8004db0:	f000 fc11 	bl	80055d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2160      	movs	r1, #96	@ 0x60
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 fc3b 	bl	8005636 <TIM_ITRx_SetConfig>
      break;
 8004dc0:	e01c      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dce:	461a      	mov	r2, r3
 8004dd0:	f000 fbd2 	bl	8005578 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2140      	movs	r1, #64	@ 0x40
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 fc2b 	bl	8005636 <TIM_ITRx_SetConfig>
      break;
 8004de0:	e00c      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4619      	mov	r1, r3
 8004dec:	4610      	mov	r0, r2
 8004dee:	f000 fc22 	bl	8005636 <TIM_ITRx_SetConfig>
      break;
 8004df2:	e003      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	73fb      	strb	r3, [r7, #15]
      break;
 8004df8:	e000      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004dfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
	...

08004e18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a48      	ldr	r2, [pc, #288]	@ (8004f4c <TIM_Base_SetConfig+0x134>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d013      	beq.n	8004e58 <TIM_Base_SetConfig+0x40>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e36:	d00f      	beq.n	8004e58 <TIM_Base_SetConfig+0x40>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a45      	ldr	r2, [pc, #276]	@ (8004f50 <TIM_Base_SetConfig+0x138>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d00b      	beq.n	8004e58 <TIM_Base_SetConfig+0x40>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a44      	ldr	r2, [pc, #272]	@ (8004f54 <TIM_Base_SetConfig+0x13c>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d007      	beq.n	8004e58 <TIM_Base_SetConfig+0x40>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a43      	ldr	r2, [pc, #268]	@ (8004f58 <TIM_Base_SetConfig+0x140>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d003      	beq.n	8004e58 <TIM_Base_SetConfig+0x40>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a42      	ldr	r2, [pc, #264]	@ (8004f5c <TIM_Base_SetConfig+0x144>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d108      	bne.n	8004e6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a37      	ldr	r2, [pc, #220]	@ (8004f4c <TIM_Base_SetConfig+0x134>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d01f      	beq.n	8004eb2 <TIM_Base_SetConfig+0x9a>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e78:	d01b      	beq.n	8004eb2 <TIM_Base_SetConfig+0x9a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a34      	ldr	r2, [pc, #208]	@ (8004f50 <TIM_Base_SetConfig+0x138>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d017      	beq.n	8004eb2 <TIM_Base_SetConfig+0x9a>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a33      	ldr	r2, [pc, #204]	@ (8004f54 <TIM_Base_SetConfig+0x13c>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d013      	beq.n	8004eb2 <TIM_Base_SetConfig+0x9a>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a32      	ldr	r2, [pc, #200]	@ (8004f58 <TIM_Base_SetConfig+0x140>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d00f      	beq.n	8004eb2 <TIM_Base_SetConfig+0x9a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a32      	ldr	r2, [pc, #200]	@ (8004f60 <TIM_Base_SetConfig+0x148>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d00b      	beq.n	8004eb2 <TIM_Base_SetConfig+0x9a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a31      	ldr	r2, [pc, #196]	@ (8004f64 <TIM_Base_SetConfig+0x14c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d007      	beq.n	8004eb2 <TIM_Base_SetConfig+0x9a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a30      	ldr	r2, [pc, #192]	@ (8004f68 <TIM_Base_SetConfig+0x150>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d003      	beq.n	8004eb2 <TIM_Base_SetConfig+0x9a>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a2b      	ldr	r2, [pc, #172]	@ (8004f5c <TIM_Base_SetConfig+0x144>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d108      	bne.n	8004ec4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	689a      	ldr	r2, [r3, #8]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a18      	ldr	r2, [pc, #96]	@ (8004f4c <TIM_Base_SetConfig+0x134>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d013      	beq.n	8004f18 <TIM_Base_SetConfig+0x100>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a19      	ldr	r2, [pc, #100]	@ (8004f58 <TIM_Base_SetConfig+0x140>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d00f      	beq.n	8004f18 <TIM_Base_SetConfig+0x100>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a19      	ldr	r2, [pc, #100]	@ (8004f60 <TIM_Base_SetConfig+0x148>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d00b      	beq.n	8004f18 <TIM_Base_SetConfig+0x100>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a18      	ldr	r2, [pc, #96]	@ (8004f64 <TIM_Base_SetConfig+0x14c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d007      	beq.n	8004f18 <TIM_Base_SetConfig+0x100>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a17      	ldr	r2, [pc, #92]	@ (8004f68 <TIM_Base_SetConfig+0x150>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d003      	beq.n	8004f18 <TIM_Base_SetConfig+0x100>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a12      	ldr	r2, [pc, #72]	@ (8004f5c <TIM_Base_SetConfig+0x144>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d103      	bne.n	8004f20 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	691a      	ldr	r2, [r3, #16]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d105      	bne.n	8004f3e <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	f023 0201 	bic.w	r2, r3, #1
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	611a      	str	r2, [r3, #16]
  }
}
 8004f3e:	bf00      	nop
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	40012c00 	.word	0x40012c00
 8004f50:	40000400 	.word	0x40000400
 8004f54:	40000800 	.word	0x40000800
 8004f58:	40013400 	.word	0x40013400
 8004f5c:	40015000 	.word	0x40015000
 8004f60:	40014000 	.word	0x40014000
 8004f64:	40014400 	.word	0x40014400
 8004f68:	40014800 	.word	0x40014800

08004f6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b087      	sub	sp, #28
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	f023 0201 	bic.w	r2, r3, #1
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 0303 	bic.w	r3, r3, #3
 8004fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f023 0302 	bic.w	r3, r3, #2
 8004fb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a30      	ldr	r2, [pc, #192]	@ (8005088 <TIM_OC1_SetConfig+0x11c>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d013      	beq.n	8004ff4 <TIM_OC1_SetConfig+0x88>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a2f      	ldr	r2, [pc, #188]	@ (800508c <TIM_OC1_SetConfig+0x120>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d00f      	beq.n	8004ff4 <TIM_OC1_SetConfig+0x88>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a2e      	ldr	r2, [pc, #184]	@ (8005090 <TIM_OC1_SetConfig+0x124>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d00b      	beq.n	8004ff4 <TIM_OC1_SetConfig+0x88>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a2d      	ldr	r2, [pc, #180]	@ (8005094 <TIM_OC1_SetConfig+0x128>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d007      	beq.n	8004ff4 <TIM_OC1_SetConfig+0x88>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a2c      	ldr	r2, [pc, #176]	@ (8005098 <TIM_OC1_SetConfig+0x12c>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d003      	beq.n	8004ff4 <TIM_OC1_SetConfig+0x88>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a2b      	ldr	r2, [pc, #172]	@ (800509c <TIM_OC1_SetConfig+0x130>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d10c      	bne.n	800500e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f023 0308 	bic.w	r3, r3, #8
 8004ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	4313      	orrs	r3, r2
 8005004:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f023 0304 	bic.w	r3, r3, #4
 800500c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a1d      	ldr	r2, [pc, #116]	@ (8005088 <TIM_OC1_SetConfig+0x11c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d013      	beq.n	800503e <TIM_OC1_SetConfig+0xd2>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a1c      	ldr	r2, [pc, #112]	@ (800508c <TIM_OC1_SetConfig+0x120>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d00f      	beq.n	800503e <TIM_OC1_SetConfig+0xd2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a1b      	ldr	r2, [pc, #108]	@ (8005090 <TIM_OC1_SetConfig+0x124>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d00b      	beq.n	800503e <TIM_OC1_SetConfig+0xd2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a1a      	ldr	r2, [pc, #104]	@ (8005094 <TIM_OC1_SetConfig+0x128>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d007      	beq.n	800503e <TIM_OC1_SetConfig+0xd2>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a19      	ldr	r2, [pc, #100]	@ (8005098 <TIM_OC1_SetConfig+0x12c>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d003      	beq.n	800503e <TIM_OC1_SetConfig+0xd2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a18      	ldr	r2, [pc, #96]	@ (800509c <TIM_OC1_SetConfig+0x130>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d111      	bne.n	8005062 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005044:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800504c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	4313      	orrs	r3, r2
 8005056:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	4313      	orrs	r3, r2
 8005060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	621a      	str	r2, [r3, #32]
}
 800507c:	bf00      	nop
 800507e:	371c      	adds	r7, #28
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	40012c00 	.word	0x40012c00
 800508c:	40013400 	.word	0x40013400
 8005090:	40014000 	.word	0x40014000
 8005094:	40014400 	.word	0x40014400
 8005098:	40014800 	.word	0x40014800
 800509c:	40015000 	.word	0x40015000

080050a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b087      	sub	sp, #28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	f023 0210 	bic.w	r2, r3, #16
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	021b      	lsls	r3, r3, #8
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f023 0320 	bic.w	r3, r3, #32
 80050ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	011b      	lsls	r3, r3, #4
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a2c      	ldr	r2, [pc, #176]	@ (80051b0 <TIM_OC2_SetConfig+0x110>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d007      	beq.n	8005114 <TIM_OC2_SetConfig+0x74>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a2b      	ldr	r2, [pc, #172]	@ (80051b4 <TIM_OC2_SetConfig+0x114>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d003      	beq.n	8005114 <TIM_OC2_SetConfig+0x74>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a2a      	ldr	r2, [pc, #168]	@ (80051b8 <TIM_OC2_SetConfig+0x118>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d10d      	bne.n	8005130 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800511a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	011b      	lsls	r3, r3, #4
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	4313      	orrs	r3, r2
 8005126:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800512e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a1f      	ldr	r2, [pc, #124]	@ (80051b0 <TIM_OC2_SetConfig+0x110>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d013      	beq.n	8005160 <TIM_OC2_SetConfig+0xc0>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a1e      	ldr	r2, [pc, #120]	@ (80051b4 <TIM_OC2_SetConfig+0x114>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d00f      	beq.n	8005160 <TIM_OC2_SetConfig+0xc0>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a1e      	ldr	r2, [pc, #120]	@ (80051bc <TIM_OC2_SetConfig+0x11c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d00b      	beq.n	8005160 <TIM_OC2_SetConfig+0xc0>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a1d      	ldr	r2, [pc, #116]	@ (80051c0 <TIM_OC2_SetConfig+0x120>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d007      	beq.n	8005160 <TIM_OC2_SetConfig+0xc0>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a1c      	ldr	r2, [pc, #112]	@ (80051c4 <TIM_OC2_SetConfig+0x124>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d003      	beq.n	8005160 <TIM_OC2_SetConfig+0xc0>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a17      	ldr	r2, [pc, #92]	@ (80051b8 <TIM_OC2_SetConfig+0x118>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d113      	bne.n	8005188 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005166:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800516e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	4313      	orrs	r3, r2
 800517a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	4313      	orrs	r3, r2
 8005186:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	621a      	str	r2, [r3, #32]
}
 80051a2:	bf00      	nop
 80051a4:	371c      	adds	r7, #28
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	40012c00 	.word	0x40012c00
 80051b4:	40013400 	.word	0x40013400
 80051b8:	40015000 	.word	0x40015000
 80051bc:	40014000 	.word	0x40014000
 80051c0:	40014400 	.word	0x40014400
 80051c4:	40014800 	.word	0x40014800

080051c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f023 0303 	bic.w	r3, r3, #3
 8005202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	4313      	orrs	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005214:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	021b      	lsls	r3, r3, #8
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	4313      	orrs	r3, r2
 8005220:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a2b      	ldr	r2, [pc, #172]	@ (80052d4 <TIM_OC3_SetConfig+0x10c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d007      	beq.n	800523a <TIM_OC3_SetConfig+0x72>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a2a      	ldr	r2, [pc, #168]	@ (80052d8 <TIM_OC3_SetConfig+0x110>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d003      	beq.n	800523a <TIM_OC3_SetConfig+0x72>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a29      	ldr	r2, [pc, #164]	@ (80052dc <TIM_OC3_SetConfig+0x114>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d10d      	bne.n	8005256 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005240:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	021b      	lsls	r3, r3, #8
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	4313      	orrs	r3, r2
 800524c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005254:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a1e      	ldr	r2, [pc, #120]	@ (80052d4 <TIM_OC3_SetConfig+0x10c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d013      	beq.n	8005286 <TIM_OC3_SetConfig+0xbe>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a1d      	ldr	r2, [pc, #116]	@ (80052d8 <TIM_OC3_SetConfig+0x110>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d00f      	beq.n	8005286 <TIM_OC3_SetConfig+0xbe>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a1d      	ldr	r2, [pc, #116]	@ (80052e0 <TIM_OC3_SetConfig+0x118>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d00b      	beq.n	8005286 <TIM_OC3_SetConfig+0xbe>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a1c      	ldr	r2, [pc, #112]	@ (80052e4 <TIM_OC3_SetConfig+0x11c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d007      	beq.n	8005286 <TIM_OC3_SetConfig+0xbe>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a1b      	ldr	r2, [pc, #108]	@ (80052e8 <TIM_OC3_SetConfig+0x120>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d003      	beq.n	8005286 <TIM_OC3_SetConfig+0xbe>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a16      	ldr	r2, [pc, #88]	@ (80052dc <TIM_OC3_SetConfig+0x114>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d113      	bne.n	80052ae <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800528c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	011b      	lsls	r3, r3, #4
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	4313      	orrs	r3, r2
 80052a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	011b      	lsls	r3, r3, #4
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	621a      	str	r2, [r3, #32]
}
 80052c8:	bf00      	nop
 80052ca:	371c      	adds	r7, #28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	40012c00 	.word	0x40012c00
 80052d8:	40013400 	.word	0x40013400
 80052dc:	40015000 	.word	0x40015000
 80052e0:	40014000 	.word	0x40014000
 80052e4:	40014400 	.word	0x40014400
 80052e8:	40014800 	.word	0x40014800

080052ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800531a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800531e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005326:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	021b      	lsls	r3, r3, #8
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	4313      	orrs	r3, r2
 8005332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800533a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	031b      	lsls	r3, r3, #12
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	4313      	orrs	r3, r2
 8005346:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a1a      	ldr	r2, [pc, #104]	@ (80053b4 <TIM_OC4_SetConfig+0xc8>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d013      	beq.n	8005378 <TIM_OC4_SetConfig+0x8c>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a19      	ldr	r2, [pc, #100]	@ (80053b8 <TIM_OC4_SetConfig+0xcc>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d00f      	beq.n	8005378 <TIM_OC4_SetConfig+0x8c>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a18      	ldr	r2, [pc, #96]	@ (80053bc <TIM_OC4_SetConfig+0xd0>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d00b      	beq.n	8005378 <TIM_OC4_SetConfig+0x8c>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a17      	ldr	r2, [pc, #92]	@ (80053c0 <TIM_OC4_SetConfig+0xd4>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d007      	beq.n	8005378 <TIM_OC4_SetConfig+0x8c>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a16      	ldr	r2, [pc, #88]	@ (80053c4 <TIM_OC4_SetConfig+0xd8>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d003      	beq.n	8005378 <TIM_OC4_SetConfig+0x8c>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a15      	ldr	r2, [pc, #84]	@ (80053c8 <TIM_OC4_SetConfig+0xdc>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d109      	bne.n	800538c <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800537e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	019b      	lsls	r3, r3, #6
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	4313      	orrs	r3, r2
 800538a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	621a      	str	r2, [r3, #32]
}
 80053a6:	bf00      	nop
 80053a8:	371c      	adds	r7, #28
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	40012c00 	.word	0x40012c00
 80053b8:	40013400 	.word	0x40013400
 80053bc:	40014000 	.word	0x40014000
 80053c0:	40014400 	.word	0x40014400
 80053c4:	40014800 	.word	0x40014800
 80053c8:	40015000 	.word	0x40015000

080053cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	4313      	orrs	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005410:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	041b      	lsls	r3, r3, #16
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	4313      	orrs	r3, r2
 800541c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a19      	ldr	r2, [pc, #100]	@ (8005488 <TIM_OC5_SetConfig+0xbc>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d013      	beq.n	800544e <TIM_OC5_SetConfig+0x82>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a18      	ldr	r2, [pc, #96]	@ (800548c <TIM_OC5_SetConfig+0xc0>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d00f      	beq.n	800544e <TIM_OC5_SetConfig+0x82>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a17      	ldr	r2, [pc, #92]	@ (8005490 <TIM_OC5_SetConfig+0xc4>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d00b      	beq.n	800544e <TIM_OC5_SetConfig+0x82>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a16      	ldr	r2, [pc, #88]	@ (8005494 <TIM_OC5_SetConfig+0xc8>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d007      	beq.n	800544e <TIM_OC5_SetConfig+0x82>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a15      	ldr	r2, [pc, #84]	@ (8005498 <TIM_OC5_SetConfig+0xcc>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d003      	beq.n	800544e <TIM_OC5_SetConfig+0x82>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a14      	ldr	r2, [pc, #80]	@ (800549c <TIM_OC5_SetConfig+0xd0>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d109      	bne.n	8005462 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005454:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	021b      	lsls	r3, r3, #8
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	4313      	orrs	r3, r2
 8005460:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	621a      	str	r2, [r3, #32]
}
 800547c:	bf00      	nop
 800547e:	371c      	adds	r7, #28
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	40012c00 	.word	0x40012c00
 800548c:	40013400 	.word	0x40013400
 8005490:	40014000 	.word	0x40014000
 8005494:	40014400 	.word	0x40014400
 8005498:	40014800 	.word	0x40014800
 800549c:	40015000 	.word	0x40015000

080054a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b087      	sub	sp, #28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	021b      	lsls	r3, r3, #8
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	4313      	orrs	r3, r2
 80054de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80054e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	051b      	lsls	r3, r3, #20
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a1a      	ldr	r2, [pc, #104]	@ (8005560 <TIM_OC6_SetConfig+0xc0>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d013      	beq.n	8005524 <TIM_OC6_SetConfig+0x84>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a19      	ldr	r2, [pc, #100]	@ (8005564 <TIM_OC6_SetConfig+0xc4>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d00f      	beq.n	8005524 <TIM_OC6_SetConfig+0x84>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a18      	ldr	r2, [pc, #96]	@ (8005568 <TIM_OC6_SetConfig+0xc8>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d00b      	beq.n	8005524 <TIM_OC6_SetConfig+0x84>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a17      	ldr	r2, [pc, #92]	@ (800556c <TIM_OC6_SetConfig+0xcc>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d007      	beq.n	8005524 <TIM_OC6_SetConfig+0x84>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a16      	ldr	r2, [pc, #88]	@ (8005570 <TIM_OC6_SetConfig+0xd0>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d003      	beq.n	8005524 <TIM_OC6_SetConfig+0x84>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a15      	ldr	r2, [pc, #84]	@ (8005574 <TIM_OC6_SetConfig+0xd4>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d109      	bne.n	8005538 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800552a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	029b      	lsls	r3, r3, #10
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	4313      	orrs	r3, r2
 8005536:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	621a      	str	r2, [r3, #32]
}
 8005552:	bf00      	nop
 8005554:	371c      	adds	r7, #28
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	40012c00 	.word	0x40012c00
 8005564:	40013400 	.word	0x40013400
 8005568:	40014000 	.word	0x40014000
 800556c:	40014400 	.word	0x40014400
 8005570:	40014800 	.word	0x40014800
 8005574:	40015000 	.word	0x40015000

08005578 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	f023 0201 	bic.w	r2, r3, #1
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	011b      	lsls	r3, r3, #4
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f023 030a 	bic.w	r3, r3, #10
 80055b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	621a      	str	r2, [r3, #32]
}
 80055ca:	bf00      	nop
 80055cc:	371c      	adds	r7, #28
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b087      	sub	sp, #28
 80055da:	af00      	add	r7, sp, #0
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6a1b      	ldr	r3, [r3, #32]
 80055ec:	f023 0210 	bic.w	r2, r3, #16
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005600:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	031b      	lsls	r3, r3, #12
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	4313      	orrs	r3, r2
 800560a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005612:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	011b      	lsls	r3, r3, #4
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	4313      	orrs	r3, r2
 800561c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	621a      	str	r2, [r3, #32]
}
 800562a:	bf00      	nop
 800562c:	371c      	adds	r7, #28
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005636:	b480      	push	{r7}
 8005638:	b085      	sub	sp, #20
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800564c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4313      	orrs	r3, r2
 8005654:	f043 0307 	orr.w	r3, r3, #7
 8005658:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	609a      	str	r2, [r3, #8]
}
 8005660:	bf00      	nop
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
 8005678:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005686:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	021a      	lsls	r2, r3, #8
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	431a      	orrs	r2, r3
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	4313      	orrs	r3, r2
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	4313      	orrs	r3, r2
 8005698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	609a      	str	r2, [r3, #8]
}
 80056a0:	bf00      	nop
 80056a2:	371c      	adds	r7, #28
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f003 031f 	and.w	r3, r3, #31
 80056be:	2201      	movs	r2, #1
 80056c0:	fa02 f303 	lsl.w	r3, r2, r3
 80056c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6a1a      	ldr	r2, [r3, #32]
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	43db      	mvns	r3, r3
 80056ce:	401a      	ands	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6a1a      	ldr	r2, [r3, #32]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f003 031f 	and.w	r3, r3, #31
 80056de:	6879      	ldr	r1, [r7, #4]
 80056e0:	fa01 f303 	lsl.w	r3, r1, r3
 80056e4:	431a      	orrs	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	621a      	str	r2, [r3, #32]
}
 80056ea:	bf00      	nop
 80056ec:	371c      	adds	r7, #28
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
	...

080056f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800570c:	2302      	movs	r3, #2
 800570e:	e06d      	b.n	80057ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a30      	ldr	r2, [pc, #192]	@ (80057f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d009      	beq.n	800574e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a2f      	ldr	r2, [pc, #188]	@ (80057fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d004      	beq.n	800574e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a2d      	ldr	r2, [pc, #180]	@ (8005800 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d108      	bne.n	8005760 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005754:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	4313      	orrs	r3, r2
 800575e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005766:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	4313      	orrs	r3, r2
 8005770:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a1e      	ldr	r2, [pc, #120]	@ (80057f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d01d      	beq.n	80057c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800578c:	d018      	beq.n	80057c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a1c      	ldr	r2, [pc, #112]	@ (8005804 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d013      	beq.n	80057c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a1a      	ldr	r2, [pc, #104]	@ (8005808 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d00e      	beq.n	80057c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a15      	ldr	r2, [pc, #84]	@ (80057fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d009      	beq.n	80057c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a16      	ldr	r2, [pc, #88]	@ (800580c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d004      	beq.n	80057c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a11      	ldr	r2, [pc, #68]	@ (8005800 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d10c      	bne.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	40012c00 	.word	0x40012c00
 80057fc:	40013400 	.word	0x40013400
 8005800:	40015000 	.word	0x40015000
 8005804:	40000400 	.word	0x40000400
 8005808:	40000800 	.word	0x40000800
 800580c:	40014000 	.word	0x40014000

08005810 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800581a:	2300      	movs	r3, #0
 800581c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005824:	2b01      	cmp	r3, #1
 8005826:	d101      	bne.n	800582c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005828:	2302      	movs	r3, #2
 800582a:	e06a      	b.n	8005902 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	4313      	orrs	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	4313      	orrs	r3, r2
 800584e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	4313      	orrs	r3, r2
 800585c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4313      	orrs	r3, r2
 800586a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	4313      	orrs	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	4313      	orrs	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	041b      	lsls	r3, r3, #16
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a19      	ldr	r2, [pc, #100]	@ (8005910 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d009      	beq.n	80058c4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a17      	ldr	r2, [pc, #92]	@ (8005914 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d004      	beq.n	80058c4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a16      	ldr	r2, [pc, #88]	@ (8005918 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d115      	bne.n	80058f0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ce:	051b      	lsls	r3, r3, #20
 80058d0:	4313      	orrs	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	6a1b      	ldr	r3, [r3, #32]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	40012c00 	.word	0x40012c00
 8005914:	40013400 	.word	0x40013400
 8005918:	40015000 	.word	0x40015000

0800591c <memset>:
 800591c:	4402      	add	r2, r0
 800591e:	4603      	mov	r3, r0
 8005920:	4293      	cmp	r3, r2
 8005922:	d100      	bne.n	8005926 <memset+0xa>
 8005924:	4770      	bx	lr
 8005926:	f803 1b01 	strb.w	r1, [r3], #1
 800592a:	e7f9      	b.n	8005920 <memset+0x4>

0800592c <__libc_init_array>:
 800592c:	b570      	push	{r4, r5, r6, lr}
 800592e:	4d0d      	ldr	r5, [pc, #52]	@ (8005964 <__libc_init_array+0x38>)
 8005930:	4c0d      	ldr	r4, [pc, #52]	@ (8005968 <__libc_init_array+0x3c>)
 8005932:	1b64      	subs	r4, r4, r5
 8005934:	10a4      	asrs	r4, r4, #2
 8005936:	2600      	movs	r6, #0
 8005938:	42a6      	cmp	r6, r4
 800593a:	d109      	bne.n	8005950 <__libc_init_array+0x24>
 800593c:	4d0b      	ldr	r5, [pc, #44]	@ (800596c <__libc_init_array+0x40>)
 800593e:	4c0c      	ldr	r4, [pc, #48]	@ (8005970 <__libc_init_array+0x44>)
 8005940:	f000 f818 	bl	8005974 <_init>
 8005944:	1b64      	subs	r4, r4, r5
 8005946:	10a4      	asrs	r4, r4, #2
 8005948:	2600      	movs	r6, #0
 800594a:	42a6      	cmp	r6, r4
 800594c:	d105      	bne.n	800595a <__libc_init_array+0x2e>
 800594e:	bd70      	pop	{r4, r5, r6, pc}
 8005950:	f855 3b04 	ldr.w	r3, [r5], #4
 8005954:	4798      	blx	r3
 8005956:	3601      	adds	r6, #1
 8005958:	e7ee      	b.n	8005938 <__libc_init_array+0xc>
 800595a:	f855 3b04 	ldr.w	r3, [r5], #4
 800595e:	4798      	blx	r3
 8005960:	3601      	adds	r6, #1
 8005962:	e7f2      	b.n	800594a <__libc_init_array+0x1e>
 8005964:	080059bc 	.word	0x080059bc
 8005968:	080059bc 	.word	0x080059bc
 800596c:	080059bc 	.word	0x080059bc
 8005970:	080059c0 	.word	0x080059c0

08005974 <_init>:
 8005974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005976:	bf00      	nop
 8005978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800597a:	bc08      	pop	{r3}
 800597c:	469e      	mov	lr, r3
 800597e:	4770      	bx	lr

08005980 <_fini>:
 8005980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005982:	bf00      	nop
 8005984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005986:	bc08      	pop	{r3}
 8005988:	469e      	mov	lr, r3
 800598a:	4770      	bx	lr
